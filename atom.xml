<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Allin的个人博客</title>
  
  <subtitle>Talk is cheap.Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hardape.top/"/>
  <updated>2020-07-11T12:10:59.426Z</updated>
  <id>https://www.hardape.top/</id>
  
  <author>
    <name>Allin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>02-Vue组件化开发</title>
    <link href="https://www.hardape.top/article/c3f4dfc6.html"/>
    <id>https://www.hardape.top/article/c3f4dfc6.html</id>
    <published>2020-07-10T12:45:18.000Z</published>
    <updated>2020-07-11T12:10:59.426Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV15741177Eh" target="_blank" rel="noopener">2019年最全最新Vue、Vuejs教程，从入门到精通</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="简介">简介</h2><ul><li>Vue（读音/vju:/，类似于 view）是一套用于构建用户界面的<strong>渐进式的js框架</strong>，发布于2014年月。与其他大型框架不同的是，Vue 被设计为可以自底向上逐层应用。</li><li>渐进式意味着你可以将Vue作为应用的一部分嵌入其中，带来更丰富的交互体验</li><li><strong>Vue的核心库只关心视图层</strong>，不仅易于上手，还便于第三方库（如：vue-router，vue-resource，vuex）或既有项目整合。</li><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="MVVM模式的实现者">MVVM模式的实现者</h2><h3 id="MVVM模式">MVVM模式</h3><ul><li>M：<code>Model</code>，模型层，在 Vue 中表示 JavaScript对象</li><li>V：<code>View</code>，视图层，在 Vue 中表示 DOM，即HTML操作的元素</li><li>MV：<code>ViewModel</code>：连接视图和数据的中间件</li></ul><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200703160859668.png" alt="image-20200703160859668"></p><h3 id="双向数据绑定">双向数据绑定</h3><ul><li>在MVVM架构中，是不允许<strong>数据</strong>和<strong>视图</strong>直接通信的，只能通过<code>ViewModel</code>来通信，而 ViewModel 就是定义了一个<code>Observer</code>观察者<ul><li>ViewModel 能够观察到数据的变化，并对视图对应的内容进行更新</li><li>ViewModel 能够监听到视图的变化，并能够通知数据发改变</li></ul></li><li><strong>Vue.js就是 MVVM 中 ViewModel 层的实现者</strong>，它的核心就是实现了<code>DOM监听</code>和<code>数据绑定</code></li></ul><h3 id="其他MVVM实现者">其他MVVM实现者</h3><ul><li>AngularJS</li><li>ReactJS</li><li>微信小程序</li></ul><h2 id="Vue的优势">Vue的优势</h2><ul><li>轻量级，体积小。Vue.js 压缩后只有<strong>20+Kb</strong>（Angular 压缩后 56kb+，React 压缩后 44kb+）</li><li>移动优先，更适合移动端。</li><li>易上手，学习曲线平稳，文档齐全</li><li>吸取了 Angular（<code>模块化</code>) 和 React（<code>虚拟DOM</code>）的长处，并拥有自己独特的功能，如：<code>计算属性</code></li><li>开源，社区活跃度高</li></ul><h2 id="Vue的两大核心要素">Vue的两大核心要素</h2><p>Vue的两个核心要素为：<code>数据驱动</code>和<code>组件化</code></p><h3 id="数据驱动">数据驱动</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200703161734285.png" alt="image-20200703161734285"></p><ul><li>当把一个普通的 JavaScript 对象传给 Vue 实例的 <code>data</code>选项，Vue 将遍历此对象所有的属性，并使用<code>Object.definProperty</code>把这些属性全部转为<code>getter/setter</code>。Object.defineProperty无法识别的特性，这也就是为什么 Vue 不支持 IE8 以及更低版本的浏览器。</li><li>这些<code>getter/setter</code>对用户来说是不可见的。但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化，这里需要注意的问题是浏览器控制台在打印数据对象时<code>getter/setter</code>的格式化并不同，所以你可能需要安装<code>vue-devtools</code>插件来获取更友好的检查窗口</li><li>每个组件实例都有响应的<code>wather</code>实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的<code>setter</code>被调用时，会通知<code>watcher</code>重新计算，从而致使它关联的组件得以更新。</li></ul><h3 id="组件化">组件化</h3><ul><li>页面上每个独立的可交互的区域视为一个组件</li><li>每个组件对应一个工程目录，组件所需的各种资源在这个目录下就近维护</li><li>也被不过是组件的容器，组件可以嵌套自由组合（复用）形成完整的页面</li></ul><h2 id="Vue-js安装">Vue.js安装</h2><h3 id="方式一">方式一</h3><p>直接CDN引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式二">方式二</h3><p>下载和引入</p><ul><li><strong>开发环境</strong> <a href="https://vuejs.org/js/vue.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.js</a></li><li><strong>生产环境</strong> <a href="https://vuejs.org/js/vue.min.js" target="_blank" rel="noopener">https://vuejs.org/js/vue.min.js</a></li></ul><h3 id="方式三">方式三</h3><p>NPM安装</p><h2 id="HelloWorld">HelloWorld</h2><p>下面以一个HelloWorld案例快速入门Vue</p><h3 id="步骤">步骤</h3><ol><li><p>在页面引入vue的js文件即可（注意：cdn是一种加速策略）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在页面中创建一个div</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建一个div, id为app --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个vue对象实例，设计对象的内容，使用<code>el</code>属性绑定页面中的div，将数据定义在<code>data</code>属性中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">"Hello Vue!"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在页面元素div中使用<code>插值表达式</code>来使用vue对象中定义的数据内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建一个div, id为app --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="完整代码">完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>First-Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 创建一个div, id为app --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message: <span class="string">"Hello Vue!"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面结果">页面结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Vue!</span><br></pre></td></tr></table></figure><h2 id="差值表达式">差值表达式</h2><h3 id="作用">作用</h3><p>差值表达式（Mustache语法）的作用是在<code>View</code>中获得<code>Model</code>中的内容，是用在 html 中被绑定的元素中的。目的是通过插值表达式来。</p><h3 id="语法">语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;表达式&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="用法">用法</h3><ol><li>获取 vue 对象中的属性和方法</li><li>直接定义数组或对象并获取特定值</li><li>可以使用一些简单的表达式运算或js的函数调用</li></ol><h3 id="实例">实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">    &#123;&#123; ["angular","react","vue"][2] &#125;&#125;</span><br><span class="line">    &#123;&#123; &#123;"name":"张三","age":20&#125;.name &#125;&#125;</span><br><span class="line">    &#123;&#123; sayHi() &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg: <span class="string">"Hello Vue"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sayHi:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hi~"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Vue vue 张三 Hi~</span><br></pre></td></tr></table></figure><h2 id="Vue实例的options">Vue实例的options</h2><p>目前常用的Vue实例的对象options如下</p><h3 id="el">el</h3><ul><li>类型：String | HTMLElement</li><li>作用：决定之后Vue实例会管理哪一个DOM</li></ul><h3 id="data">data</h3><ul><li>类型：Object | Function （组件当中data必须是一个函数）</li><li>作用：Vue实例对应的数据对象</li></ul><h3 id="methods">methods</h3><ul><li>类型：Function</li><li>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中调用</li></ul><h3 id="computed">computed</h3><ul><li>类型：Fucntion</li><li>作用：计算属性</li></ul><h2 id="计算属性">计算属性</h2><h3 id="什么是计算属性">什么是计算属性</h3><ul><li>我们知道，在模板中可以直接通过插值语法显示一些data中的数据</li><li>但是在某些情况下，我们可能需要对数据进行一些转化后在显示，或者需要将多个数据结合起来进行显示，此时可以使用计算属性</li><li>计算属性<code>computed</code>值为函数形式，但是实际上其返回值为属性，<code>computed</code>中的函数必须返回一个值。</li></ul><h3 id="示例">示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName:<span class="string">'Kobe'</span>,</span><br><span class="line">        lastName:<span class="string">'Bryant'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">''</span> +  <span class="keyword">this</span>.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="计算属性的setter和getter">计算属性的setter和getter</h3><ul><li><p>实际上，每个计算属性都包含一个<code>getter</code>和<code>setter</code></p></li><li><p>上述以函数形式获取计算属性的方法只是使用<code>getter</code>来读取</p></li><li><p>在某些情况下，你也可以提供一个<code>setter</code>方法（不常用）</p></li><li><p>例子如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName:<span class="string">'Kobe'</span>,</span><br><span class="line">        lastName:<span class="string">'Bryant'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        funllName: &#123;</span><br><span class="line">            <span class="keyword">get</span>() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">''</span> +  <span class="keyword">this</span>.lastName; </span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">                <span class="keyword">const</span> names = newValue.split(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">this</span>.lastName = names[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="计算属性的缓存">计算属性的缓存</h3><ul><li>我们可能会考虑这样一个问题<ul><li><code>methods</code>和<code>computed</code>看起来都可以实现我们的功能</li><li>那么为什么还要多一个计算属性呢？</li></ul></li><li>原因在于<ul><li>计算属性会进行缓存，在值为改变的情况下，如果多次使用，计算属性只会调用一次。</li><li>即计算属性在第一次调用时会将结果放入缓存中，只有数据发生改变才会再次进行计算。</li></ul></li></ul><h2 id="生命周期">生命周期</h2><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-lifecycle.png" alt="image-20200711132136058"></p><h2 id="v-once">v-once</h2><h3 id="作用-v2">作用</h3><p>指明此元素的数据只渲染一次，数据内容的修改不影响此元素，该指令后面不需要跟任何的表达式</p><h3 id="实例-v2">实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;titile&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-html和v-text">v-html和v-text</h2><h3 id="作用-v3">作用</h3><ul><li><code>v-html</code>：将指定属性的值作为标签的内容，能识别html标签，类似 innerHTML</li><li><code>v-text</code>：将指定属性的值作为标签的内容，不能识别html标签，类似 innerText</li></ul><h3 id="实例-v3">实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"input"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"input"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        input:<span class="string">'&lt;input type="button" value="按我" /&gt;'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200703175825144.png" alt="image-20200703175825144"></p><h2 id="v-pre">v-pre</h2><h3 id="作用-v4">作用</h3><p><code>v-pre</code>用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustacher语法，该指令后面不需要跟任何的表达式</p><h3 id="实例-v4">实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message:<span class="string">'Hello Vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello Vue</span><br><span class="line">&#123;&#123;message&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="v-cloak">v-cloak</h2><h3 id="作用-v5">作用</h3><ul><li>在某些情况下，我们浏览器可能会直接显示出未编译的 Mustache 标签</li><li>cloak：斗篷，<code>v-cloak</code>可用于隐藏未渲染出来的 Mustache 标签</li></ul><h3 id="实例-v5">实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>Hello,&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message:<span class="string">'Vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>CSS样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bind">v-bind</h2><h3 id="作用-v6">作用</h3><ul><li>用于属性绑定，由于插值表达式只能在html内容中使用，无法在html标签中的属性值中使用，而，而<code>v-bind</code>就能vue对象中的属性绑定在html标签中的属性中</li><li><code>v-bind:属性名</code>，可以简写为<code>:属性名</code></li></ul><h3 id="实例-v6">实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"link"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        title: <span class="string">'百度一下'</span>,</span><br><span class="line">        link: <span class="string">'http://www.baidu.com'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度一下</a></p></blockquote><h3 id="v-bind绑定class">v-bind绑定class</h3><ul><li><p>可以使用<code>v-bind</code>来动态绑定class以切换样式</p></li><li><p>绑定 class 有两种方式</p><ul><li>对象语法</li><li>数组语法</li></ul></li><li><p>绑定方式一：对象语法，class 后面跟是一个对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">用法一：直接通过&#123;&#125;绑定一个类 </span></span><br><span class="line"><span class="comment">当isActive为true时，该标签才被渲染active类</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': isActive&#125;"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法二：也可以通过判断，传入多个值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    用法三：和普通的类同时存在，并不冲突</span></span><br><span class="line"><span class="comment">    注：如果isActive和isLine都为true，那么会有title/active/line三个类</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法四：如果过于复杂，可以将对象放在一个methods或者computed中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>绑定方式二：数组语法，class 后面跟的是一个数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用法一：直接通过[]绑定一个数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"['active']"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 用法二：也可以传入多个值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> '<span class="attr">line</span>']"&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">用法三：和普通的类同时存在，并不冲突</span></span><br><span class="line"><span class="comment">注：会有title/active/line三个类 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> '<span class="attr">line</span>']"&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用法四：如果过于复杂，可以将数组放在一个methods或者computed中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-bind绑定style">v-bind绑定style</h3><ul><li><p>可以利用<code>v-bind</code>来绑定一些 CSS 内联样式</p></li><li><p>在写CSS 属性名的时候，比如<code>font-size</code></p><ul><li>可以使用驼峰式（camelCase) → <code>fontSize</code></li><li>也可以使用短横线分隔（kebab-case）→ <code>font-size</code></li></ul></li><li><p>绑定 class 有两种方式</p><ul><li>对象语法</li><li>数组语法</li></ul></li><li><p>绑定方式一：对象语法，style 后面跟的是一个对象类型</p><ul><li><p>对象的 key 是CSS属性名称</p></li><li><p>对象的 value 是具体赋的值，值可以是来自于 data 中的属性</p></li><li><p>例子如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"&#123;color: currentColor, fontSize: fontSize + 'px'&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>绑定方式二：数组语法，style 后面跟的是一个数组类型</p><ul><li><p>多个值以逗号<code>,</code>分隔</p></li><li><p>例子如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="v-on">v-on</h2><h3 id="v-on事件绑定">v-on事件绑定</h3><p>在Vue中，使用<code>v-on:事件名</code>进行实践绑定，可以简写为<code>@:事件绑定</code></p><h3 id="v-on参数">v-on参数</h3><p>在使用<code>v-on</code>进行参数绑定是，要注意参数问题</p><ul><li>情况一：如果该方法不需要额外参数，那么方法后的<code>()</code>可以不添加<ul><li>但是方法本身有一个参数，那么会默认将原生事件<code>event</code>参数传递进去</li></ul></li><li>情况二：如果需要同时传入某个参数，同时需要<code>event</code>时，在传参时通过<code>$event</code>传入事件。</li></ul><h3 id="v-on修饰符">v-on修饰符</h3><ul><li>在某些情况下，我们拿到的<code>event</code>的目的可能是进行一些事件处理</li><li>Vue 提供了修饰符来帮助我们方便地处理一些事件<ul><li><code>.stop</code>：调用<code>event.stopPropagation()</code>，阻止事件冒泡</li><li><code>.prevent</code>：调用<code>event.preventDefault()</code>，阻止默认行为</li><li><code>.{keyCode | keyAlia}</code>：只当事件是从特点键触发时才触发回调，如空格<code>.space</code>，回车<code>.enter</code>或<code>.13</code></li><li><code>.native</code>：监听组件根元素的原生事件</li><li><code>.once</code>：只触发一次回调</li></ul></li><li>v-on修饰符还支持串联修饰符，如<code>@click.stop.prevent</code></li></ul><h3 id="实例-v7">实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;num&#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    步长：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"steps"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-on:click</span>=<span class="string">"increase"</span> &gt;</span>增加&#123;&#123;steps&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"decrease"</span> &gt;</span>减少&#123;&#123;steps&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        num: <span class="number">1</span>,</span><br><span class="line">        steps: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        increase:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"你点击了"</span> + event.target.innerHTML + <span class="string">"按钮"</span>)</span><br><span class="line">            <span class="keyword">this</span>.num+=<span class="built_in">Number</span>(<span class="keyword">this</span>.steps);</span><br><span class="line">        &#125;,</span><br><span class="line">        decrease:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"你点击了"</span> + event.target.innerHTML + <span class="string">"按钮"</span>)</span><br><span class="line">            <span class="keyword">this</span>.num-=<span class="built_in">Number</span>(<span class="keyword">this</span>.steps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-on.gif" alt="vue-v-on"></p><h2 id="条件判断">条件判断</h2><h3 id="v-if、v-else-if、v-else">v-if、v-else-if、v-else</h3><ul><li>这三个指令与 JavaScript 条件语句 if 、else、else if 类型</li><li>Vue 的条件指定可以根据表达式的中在 DOM 中渲染或销毁元素或组件</li></ul><h3 id="v-if的原理">v-if的原理</h3><ul><li>vi-if 后面的条件为 <code>false</code>时，对应的元素以及其子元素不会渲染</li><li>也就是根本不会有对应的标签出现在DOM中</li></ul><h3 id="条件渲染案例">条件渲染案例</h3><p>用户登录时，可以切换使用用户账号登录还是邮箱地址登录</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染小案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isName"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"用户账号"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"useremail"</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"useremail"</span> <span class="attr">id</span>=<span class="string">"useremail"</span> <span class="attr">placeholder</span>=<span class="string">"用户邮箱"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>切换登录方式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      isName: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      change() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isName = !<span class="keyword">this</span>.isName;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-if.gif" alt="vue-v-if"></p><h3 id="案例小问题">案例小问题</h3><ul><li><p>小问题</p><ul><li>如果我们在有输入的情况下，切换了类型，我们会发现文字依然显示之前输入的内容</li><li>但是按道理将，我们应该切换到另外一个input元素中了</li></ul></li><li><p>问题解答</p><ul><li>这是因为 Vue 在进行 DOM渲染时，出于性能考虑，会尽可能地复用已经存在的元素，而不是重新创建新的元素</li></ul></li><li><p>解决方案</p><ul><li>如果我们不希望 Vue 出现类似重复利用的问题，可以给对应的 input 添加 key</li><li>并且我们需要保证 key 的不同</li></ul></li><li><p>上述例子修改如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"用户账号"</span>  <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"useremail"</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"useremail"</span> <span class="attr">id</span>=<span class="string">"useremail"</span> <span class="attr">placeholder</span>=<span class="string">"用户邮箱"</span> <span class="attr">key</span>=<span class="string">"useremail"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span>切换登录方式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="v-show">v-show</h2><h3 id="作用-v7">作用</h3><ul><li><code>v-show</code>的用法和<code>v-if</code>非常相似，也用于决定一个元素是否渲染</li><li>当<code>v-show</code>的表达式的值为<code>true</code>是，所在元素就显示出来，否则会隐藏</li></ul><h3 id="v-if和v-show对比">v-if和v-show对比</h3><ul><li><code>v-if</code>当条件为<code>false</code>时，不会又对应的元素在 DOM 中</li><li><code>v-show</code>当条件为<code>false</code>时，仅仅是将元素的<code>display</code>属性设置为<code>none</code>而已</li></ul><h3 id="开发中的选择">开发中的选择</h3><ul><li>当需要在显示和隐藏之间切换很频繁时，使用<code>v-show</code></li><li>当只有一次切换时，通过使用<code>v-if</code></li></ul><h2 id="v-for">v-for</h2><p><code>v-for</code>用于循环遍历数组或对象</p><h3 id="遍历数组">遍历数组</h3><h4 id="使用">使用</h4><ul><li>当我们有一组数据需要进行渲染时，就可以使用<code>v-for</code>来完成</li><li>格式为：<code>v-for:&quot;item in items&quot;</code></li><li>如果在遍历的过程中，需要拿到元素在数组中的索引<ul><li>语法格式：<code>v-for:&quot;(item,index) in items&quot;</code></li><li>其中的 index 就代表了取出的 item 在原数组的索引值</li></ul></li><li>注意：item 和 index 的命名随意，Vue 是以前后顺序来识别元素和索引值的，而不是以命名来识别</li></ul><h4 id="案例">案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(user,index) in users"</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      users:[<span class="string">'刘备'</span>,<span class="string">'关羽'</span>,<span class="string">'张飞'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">· 0-刘备</span><br><span class="line">· 1-关羽</span><br><span class="line">· 2-张飞</span><br></pre></td></tr></table></figure><h3 id="遍历对象">遍历对象</h3><h4 id="使用-v2">使用</h4><ul><li><code>v-for</code>可以用于遍历对象</li><li>当只取出对象的值时，格式为<code>v-for:&quot;value in obj&quot;</code></li><li>当需要取出对象的值和键时，格式为<code>v-for:&quot;(value,key) in obj&quot;</code></li><li>当需要取出对象的值、键以及属性的索引值时，格式为<code>v-for:&quot;(value,key,index) in obj&quot;</code></li><li>同样的，value、key和 index 的命名随意，Vue 是以前后顺序来识别键、值和索引值的，而不是以命名来识别</li></ul><h4 id="案例-v2">案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in user"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key) in user"</span>&gt;</span>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in user"</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        username:<span class="string">"张三"</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        sex: <span class="string">'男'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">· 张三</span><br><span class="line">· 18</span><br><span class="line">· 男</span><br><span class="line"></span><br><span class="line">· username-张三</span><br><span class="line">· age-18</span><br><span class="line">· sex-男</span><br><span class="line"></span><br><span class="line">· 0-username-张三</span><br><span class="line">· 1-age-18</span><br><span class="line">· 2-sex-男</span><br></pre></td></tr></table></figure><h3 id="key属性">:key属性</h3><ul><li><p>官方推荐我们在使用<code>v-for</code>时，给对应的元素或组件加上一个<code>:key</code>属性</p></li><li><p>为什么需要这个<code>:key</code>属性呢？</p><ul><li><p>这个其实和Vue的<code>虚拟DOM</code>和<code>Diff算法</code>有关系</p></li><li><p><a href="https://link.zhihu.com/?target=https://calendar.perfplanet.com/2013/diff/">React’s</a><a href="https://link.zhihu.com/?target=https://calendar.perfplanet.com/2013/diff/"> diff algorithm</a>中的图示如下</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200711155827550.png" alt="image-20200711155827550"></p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200711155740759.png" alt="image-20200711155740759"></p></li></ul></li><li><p>如上图所示，我们希望可以在B和C之间插入一个F，Diff 算法默认执行起来是把 C 更新成 F ，D 更新成 C，E 更新成D，最后再插入 E，效率低下</p></li><li><p>但是但我们使用<code>:key</code>来给每个节点做一个唯一标识时，Diff 算法就可以正确地识别此节点，找到正确的位置区插入新的节点</p></li><li><p>总的来说。<strong>:key的作用主要是为了高效地更新虚拟DOM</strong></p></li></ul><h3 id="检测数组更新">检测数组更新</h3><ul><li>由于 Vue 是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新</li><li>Vue 中包含了一组观察编译的方法，使用它们改变数组也会触发视图的更新<ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul></li><li>注意：如果直接对数组中的某个元素进行赋值变化，视图是不会发生对应的更新的</li></ul><h2 id="阶段案例">阶段案例</h2><h3 id="列表点击案例">列表点击案例</h3><h4 id="需求">需求</h4><p>使用 v-for 和 v-on 完成如下效果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-for-test.gif" alt="vue-v-for-test"></p><h4 id="实现">实现</h4><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(pet,index) in pets"</span> <span class="attr">:class</span>=<span class="string">"&#123;active:currentIndex===index&#125;"</span> @<span class="attr">click</span>=<span class="string">"changeColor(index)"</span> &gt;</span>&#123;&#123;index+1&#125;&#125;.&#123;&#123;pet&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        pets:[<span class="string">'dog'</span>,<span class="string">'cat'</span>,<span class="string">'pig'</span>,<span class="string">'bird'</span>],</span><br><span class="line">        currentIndex:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        changeColor:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.currentIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="图书购物车案例">图书购物车案例</h3><h4 id="需求-v2">需求</h4><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-bookshop-test.gif" alt="vue-bookshop-test"></p><h4 id="实现-v2">实现</h4><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"books.length"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"gray"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(book,index) in books"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>《&#123;&#123;book.name&#125;&#125;》<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;book.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;book.price | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrease(index)"</span> <span class="attr">:disabled</span>=<span class="string">"book.num &lt;=1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        &#123;&#123;book.num&#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increase(index)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"remove(index)"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总计：&#123;&#123;totalNum | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>购物车为空<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span>,<span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gray</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shop = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      books: [</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'算法导论'</span>,</span><br><span class="line">          date:<span class="string">'2006-9'</span>,</span><br><span class="line">          price:<span class="number">85.00</span>,</span><br><span class="line">          num:<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'UNIX编程艺术'</span>,</span><br><span class="line">          date:<span class="string">'2006-2'</span>,</span><br><span class="line">          price:<span class="number">59.00</span>,</span><br><span class="line">          num:<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'编程珠玑'</span>,</span><br><span class="line">          date:<span class="string">'2008-10'</span>,</span><br><span class="line">          price:<span class="number">39.00</span>,</span><br><span class="line">          num:<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name:<span class="string">'代码大全'</span>,</span><br><span class="line">          date:<span class="string">'2006-3'</span>,</span><br><span class="line">          price:<span class="number">128.00</span>,</span><br><span class="line">          num:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increase(index) &#123;</span><br><span class="line">        <span class="keyword">this</span>.books[index].num++;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      decrease(index) &#123;</span><br><span class="line">        <span class="keyword">this</span>.books[index].num--;</span><br><span class="line">      &#125;,</span><br><span class="line">      remove(index) &#123;</span><br><span class="line">        <span class="keyword">this</span>.books.splice(index,<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      totalNum() &#123;</span><br><span class="line">        <span class="comment">// let result = 0;</span></span><br><span class="line">        <span class="comment">// for(let book of this.books) &#123;</span></span><br><span class="line">        <span class="comment">//   result += book.price * book.num;</span></span><br><span class="line">          </span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return result;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.books.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue,book</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> preValue + book.price * book.num;</span><br><span class="line">        &#125;,<span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">      showPrice: <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'￥'</span> + price.toFixed(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="v-model">v-model</h2><h3 id="作用-v8">作用</h3><ul><li>表单控件在实际开发中是非常常见的，特别是对应用户信息的提交，需要大量的表单。</li><li>Vue 中使用<code>v-mode</code>指令来实现表单元素<code>value</code>值和数据的双向绑定</li><li>也可以将<code>v-model</code>用于<code>textarea</code>元素</li></ul><h3 id="实例-v8">实例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message:<span class="string">'Hello Vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-model.gif" alt="vue-v-model"></p><h3 id="v-model原理">v-model原理</h3><ul><li><p><code>v-model</code>的背后本质上是包含两个操作</p><ul><li><code>v-bind</code>绑定一个<code>value</code>属性</li><li><code>v-on</code>指令给当前元素绑定<code>input</code>事件</li></ul></li><li><p>实例等效代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等同于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"message = $event.target.value"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-model与radio">v-model与radio</h3><p>当<code>v-model</code>用于单选框时，一组单选框的<code>v-model</code>绑定的数据相同，可以省略<code>name</code>属性，案例如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    您选择的是：&#123;&#123;sex&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        sex:<span class="string">'男'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-model-radio.gif" alt="vue-v-model-radio"></p><h3 id="v-model与checkbox">v-model与checkbox</h3><p>当<code>v-model</code>用于复选框时，分为两种情况：单个勾选框和多个勾选框</p><h4 id="单个勾选框">单个勾选框</h4><ul><li><code>v-model</code>即为布尔值</li><li>此时<code>input</code>的<code>value</code>并不影响<code>v-model</code>的值</li></ul><p>案例如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"flag"</span> <span class="attr">name</span>=<span class="string">"agree"</span> <span class="attr">id</span>=<span class="string">"agree"</span>&gt;</span>同意本公司协议</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!flag"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        flag:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-model-checkbox-single.gif" alt="vue-v-model-checkbox-single"></p><h4 id="多个勾选框">多个勾选框</h4><ul><li>当时多个勾选框时，因为可以选中多个，所欲对应的<code>v-model</code>绑定的数据时一个数组</li><li>当选中某一个是，就会将<code>input</code>的<code>value</code>添加到数组中</li></ul><p>案例如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择您的爱好:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"吃饭"</span>&gt;</span>吃饭<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"睡觉"</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"打豆豆"</span>&gt;</span>打豆豆<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"旅游"</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">value</span>=<span class="string">"刷剧"</span>&gt;</span>刷剧<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您选择的爱好是:&#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        hobbies: []</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-model-checkbox-multi.gif" alt="vue-v-model-checkbox-multi"></p><h3 id="v-model与select">v-model与select</h3><p>和 checkbox 一样，select 也分为单选和多选两种情况</p><h4 id="单选">单选</h4><p>只能选中一个值，<code>v-model</code>绑定的是一个值，例子如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择您最喜欢的水果：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"fruit"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"葡萄"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"榴莲"</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"芒果"</span>&gt;</span>芒果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您最喜欢的水果是：&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        fruit: <span class="string">'苹果'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-model-select-single.gif" alt="vue-v-model-select-single"></p><h4 id="多选">多选</h4><p>可以选中多个值，<code>v-model</code>绑定的是一个数组，例子如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择您喜欢的水果：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"葡萄"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"榴莲"</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"芒果"</span>&gt;</span>芒果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您最喜欢的水果是：&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        fruit: [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-v-model-select-multi.gif" alt="vue-v-model-select-multi"></p><h3 id="修饰符">修饰符</h3><h4 id="lazy修饰符">lazy修饰符</h4><ul><li>默认情况下，<code>v-model</code>默认是在 input 事件中同步输入框的数据的</li><li>也就是说，一旦有表单控件的<code>value</code>值发生改变，对应的数据就会自动发生改变</li><li><code>lazy</code>修饰符可以让表单控件在<code>失去焦点</code>或者<code>回车</code>时才会更新数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="number修饰符">number修饰符</h4><ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。</li><li>但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。</li><li><code>number</code>修饰符可以让在输入框中输入的内容自动转成数字类型</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="trim修饰符">trim修饰符</h4><ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除</li><li><code>trim</code>修饰符可以过滤内容左右两边的空格</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"message"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV15741177Eh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019年最全最新Vue、Vuejs教程，从入门到精通&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端框架" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.hardape.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>02-Vue组件化开发</title>
    <link href="https://www.hardape.top/article/c3f4dfc6.html"/>
    <id>https://www.hardape.top/article/c3f4dfc6.html</id>
    <published>2020-07-10T12:45:18.000Z</published>
    <updated>2020-07-11T12:11:35.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV15741177Eh" target="_blank" rel="noopener">2019年最全最新Vue、Vuejs教程，从入门到精通</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="什么是组件化">什么是组件化</h2><ul><li>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。</li><li>但如果，我们将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</li></ul><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200710155213133.png" alt="image-20200710155213133"></p><ul><li>我们将一个完整的页面分成很多个组件</li><li>每个组件都用于实现页面的一个功能块</li><li>而每一个组件又可以进行细分</li></ul><h2 id="Vue组件化思想">Vue组件化思想</h2><ul><li><p>组件化是<code>Vue.js</code>中的重要思想</p><ul><li><p>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</p></li><li><p>任何的应用都会被抽象成一颗组件树</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200710155644109.png" alt="image-20200710155644109"></p></li></ul></li><li><p>组件化思想的应用</p><ul><li>在开发中尽可能地将页面拆分成一个小小的、可复用的组件</li><li>这样让我们的代码更加方便组织和管理，并且扩展性也更强</li></ul></li></ul><h2 id="注册组件的基本步骤">注册组件的基本步骤</h2><h3 id="基本步骤">基本步骤</h3><ol><li>创建组件构建器：<code>Vue.extend()</code></li><li>注册组件：<code>Vue.component()</code></li><li>使用组件：在 Vue 实例的作用范围内使用</li></ol><h3 id="示例代码">示例代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue注册组件的基本步骤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 使用组件，在Vue实例的作用范围内通过组件标签名使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 1.创建组件构建器</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> myComponent = Vue.extend(&#123;</span></span><br><span class="line">    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是组件中的一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 2. 注册组件，并定义组件标签的名称</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'my-comp'</span>,myComponent);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200710160959272.png" alt="image-20200710160959272"></p><h3 id="步骤解析">步骤解析</h3><ul><li><code>Vue.extend()</code><ul><li>调用<code>Vue.extend()</code>创建的是一个组件构建器</li><li>通常在创建组件构建器时，传入<code>template</code>代表自定义组件的模板</li><li>该模板就是在使用到组件的地方，要显示的HTML代码</li><li>事实上，这种写法在<code>Vue2.x</code>的文档中几乎以及看不到了，它会直接使用<strong>注册组件的语法糖</strong>，但是在很多资料还是会提到这种方式。</li></ul></li><li><code>Vue.component()</code><ul><li>调用<code>Vue.component()</code>是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。</li><li>所以需要传递两个参数<ul><li>注册组件的标签名</li><li>组件构建器</li></ul></li></ul></li><li>注意：组件必须挂载在某个<code>Vue实例</code>下，否则它不会生效</li></ul><h2 id="全局注册和局部注册">全局注册和局部注册</h2><h3 id="全局注册">全局注册</h3><ul><li>当我们通过调用<code>Vue.component()</code>注册组件时，组件的注册是全局的</li><li>这就意味着该组件可以在任意 Vue 实例下使用</li></ul><h3 id="局部注册">局部注册</h3><p>如果我们注册的组件是挂载在某个实例的<code>components</code>中，那么就是一个局部组件，实例代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue注册组件-局部注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. 使用组件，在Vue实例的作用范围内通过组件标签名使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 1.创建组件构建器</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> myComponent = Vue.extend(&#123;</span></span><br><span class="line">    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是组件中的一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3. 局部注册组件</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 组件标签对象:组件构建器</span></span></span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span>:myComponent</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果和上面示例代码的执行结果一致。</p><h2 id="父组件和子组件">父组件和子组件</h2><h3 id="组件间的关系">组件间的关系</h3><ul><li>组件和组件之间存在层级关系</li><li>而其中一种非常重要的关系就是父子组件关系</li></ul><h3 id="父子组件的实现">父子组件的实现</h3><ul><li>在一个组件中使用<code>components</code>注册另一个组件，两个组件就构成父子组件的关系</li><li>在父组件的<code>template</code>模板中可以使用子组件的组件标签</li></ul><h3 id="示例代码-v2">示例代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>父组件和子组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">p-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 子组件构建器</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> childrenComponent = Vue.extend(&#123;</span></span><br><span class="line">    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="comment">// 父组件构建器</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> parentComponent = Vue.extend(&#123;</span></span><br><span class="line">    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>父组件标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">c-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">c-comp</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">    `,</span><br><span class="line"><span class="actionscript">    <span class="comment">// 注册子组件</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'c-comp'</span>: childrenComponent</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 局部注册组件</span></span></span><br><span class="line"><span class="actionscript">      <span class="string">'p-comp'</span>:parentComponent</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200710163720527.png" alt="image-20200710163720527"></p><h3 id="注意">注意</h3><ul><li>在上述代码中，无法在Vue示例中使用子组件，只有注册了子组件的父组件才能使用子组件</li><li>原因：当子组件注册到父组件的<code>components</code>时，Vue会编译好父组件的模块，也就是说编译后的父组件中已经渲染了子组件中的<code>template</code>内容。</li></ul><h2 id="注册组件语法糖">注册组件语法糖</h2><h3 id="简介">简介</h3><ul><li>上述注册组件的方式，可能会有些繁琐</li><li>Vue 为了简化这个过程，提供了注册的语法糖，Vue2.x 版本推荐使用该方式</li><li>主要是省去了调用<code>Vue.extend()</code>的步骤，而是可以直接使用<code>一个对象</code>来代替。</li></ul><h3 id="示例代码-v3">示例代码</h3><h4 id="全局注册-v2">全局注册</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue注册组件的语法糖(Vue2.x)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'my-comp'</span>, &#123;</span></span><br><span class="line">    template:`</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是组件中的一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部注册-v2">局部注册</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue注册组件的语法糖(Vue2.x)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span> : &#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是组件中的一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件模板的分离写法">组件模板的分离写法</h2><h3 id="简介-v2">简介</h3><ul><li>上文的注册组件中的<code>templates</code>写法较为麻烦，如果将其中的HTML分离出来写，然后挂载到对应的组件上，必然结构会变得非常清晰。</li><li>Vue 提供了两种方案来定义HTML模块内容<ul><li>使用<code>&lt;script&gt;</code>标签</li><li>使用<code>&lt;template&gt;</code>标签</li></ul></li></ul><h3 id="script标签写法">script标签写法</h3><h4 id="语法">语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="comment">&lt;!-- 组件模板内容 --&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在挂载时<code>template</code>值为上述<code>script</code>标签的<code>id选择器</code>，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template:<span class="string">'#myComp'</span></span><br></pre></td></tr></table></figure><h4 id="示例代码-v4">示例代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue组件模板使用script标签进行分离<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="comment">&lt;!-- 组件模板内容 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是组件中的一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="actionscript">  <span class="comment">// 2. 注册组件，并定义组件标签的名称</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'my-comp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">    template:<span class="string">'#myComp'</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="template标签写法-常用">template标签写法(常用)</h3><h4 id="语法-v2">语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 组件模板内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在挂载时<code>template</code>值为上述<code>template</code>标签的<code>id选择器</code>，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template:<span class="string">'#myComp'</span></span><br></pre></td></tr></table></figure><h4 id="示例代码-v5">示例代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue组件模板使用template标签进行分离<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 组件模板内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是组件中的一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 2. 注册组件，并定义组件标签的名称</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'my-comp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">    template:<span class="string">'#myComp'</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件数据的存放">组件数据的存放</h2><h3 id="简介-v3">简介</h3><ul><li>组件是一个单独功能模块的封装，这个模块有属于自己的HTML模板，也应该有属于自己的数据<code>data</code></li><li>组件无法访问Vue实例的<code>data</code>数据，Vue组件应该有自己保存数据的地方。</li></ul><h3 id="data必须是一个函数">data必须是一个函数</h3><ul><li>组件自己的数据存放在自己的data属性中<ul><li>注意：<strong>该data属性必须是一个函数</strong></li><li>而且这个函数返回一个对象，对象内部保存着数据</li></ul></li><li>为什么data在组件中必须是一个函数呢？<ul><li>组件是可复用的模块。</li><li>data 是一个函数可以使每个组件对象都返回一个新的对象，一个组件在多次使用时 data 中保存的数据不会相互影响。</li></ul></li><li>组件对象中也可以有<code>methods</code>、<code>computed</code>等属性</li></ul><h3 id="实例代码">实例代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue组件中数据的存放data<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>组件中的数据:&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#myComp'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// data必须是一个函数，返回保存着数据的对象</span></span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            message:<span class="string">'Hello Vue!'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-202007101724171022.png" alt="image-20200710172417102"></p><h2 id="父子组件的通信">父子组件的通信</h2><h3 id="必要性">必要性</h3><ul><li>在开发中，往往一些数据确实需要从上层传递到下层</li><li>比如，在一个页面中<ul><li>我们从服务器请求到了很多的数据</li><li>其中一部分数据，并非是整个页面的大组件来展示的，而是需要下面的子组件进行展示。</li><li>这个时候，并不会让子组件再次发送一个网络请求，而是直接让父组件将数据传递给小组件。</li></ul></li></ul><h3 id="通信方式">通信方式</h3><p>Vue提供了父子组件的通信方式</p><ul><li>通过<code>props</code>实现父组件向子组件传递数据</li><li>通过事件实现子组件向父组件发送消息</li></ul><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200710173036999.png" alt="image-20200710173036999"></p><p>在实际开发中，<strong>Vue实例和子组件的通信</strong>与<strong>父组件和子组件的通信</strong>过程是一致的。</p><h3 id="props的使用">props的使用</h3><h4 id="props基本用法">props基本用法</h4><ul><li><p>在Vue组件中，使用选项<code>props</code>来声明需要从父级接收到的数据</p></li><li><p><code>props</code>的值有两种方式</p><ul><li>方式一：字符串数组，数组中的字符串就是传递时的名称</li><li>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等</li></ul></li><li><p>通过在父组件使用子组件标签时，在子组件标签中使用<code>v-bind</code>来对子组件<code>props</code>中的值和父组件中的数据进行绑定。</p></li><li><p>实例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>props实现父组件传递数据给子组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span> <span class="attr">:p-data</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件中的数据:&#123;&#123;pData&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message:<span class="string">"Hello Vue!"</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#myComp'</span>,</span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'pData'</span>]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200710202619573.png" alt="image-20200710202619573"></p></li></ul><h4 id="props数据验证">props数据验证</h4><ul><li><p>在前面，我们的<code>props</code>选项是使用一个数组</p></li><li><p>当需要对<code>props</code>类型等进行验证时，就需要对象写法了。</p></li><li><p><code>props</code>数据验证支持的数据类型</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul></li><li><p>例子如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>当我们有自定义构造函数时，验证也支持自定义的类型，例子如下</p></li></ul><h3 id="子级向父级传递">子级向父级传递</h3><h4 id="简介-v4">简介</h4><ul><li>子组件通过<strong>自定义事件</strong>类将数据或事件传递到父组件中</li><li>自定义事件的流程<ul><li>在子组件中，通过<code>$emit()</code>来触发事件</li><li>在父组件中，通过<code>v-on</code>来监听子组件事件</li></ul></li><li><code>$emit()</code>的参数<ul><li>第一个参数：要触发的时间名</li><li>第二个参数：要传递的数据</li></ul></li></ul><h4 id="示例代码-v6">示例代码</h4><p>子组件通过两个按钮+1和-1对数据counter进行加减操作，并通过自定义事件将数据传递到父组件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>子组件通过$emit触发事件来传递数据到父组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定自定义事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span> @<span class="attr">count-change</span>=<span class="string">"changeRes"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>结果:&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increase"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrease"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      result: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#myComp'</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            counter: 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 当点击+1或-1按钮是触发自定义事件count-change</span></span></span><br><span class="line">          increase() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.counter++;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$emit(<span class="string">'count-change'</span>, <span class="keyword">this</span>.counter);</span></span><br><span class="line">          &#125;,</span><br><span class="line">          decrease() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.counter--;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$emit(<span class="string">'count-change'</span>, <span class="keyword">this</span>.counter);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeRes(counter) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.result = counter;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/vue-emit.gif" alt="vue-emit"></p><h2 id="父子组件的访问">父子组件的访问</h2><h3 id="简介-v5">简介</h3><ul><li>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问根组件</li><li>Vue提供了父子组件间的相互访问和访问根组件<ul><li>父组件访问子组件：<code>$children</code>或<code>refs</code></li><li>子组件访问父组件：<code>$parent</code></li><li>访问根组件：<code>$root</code></li></ul></li></ul><h3 id="children">$children</h3><h4 id="概述">概述</h4><p>在父组件中，<code>this.$children</code>是一个数组类型，它包含所有子组件对象</p><h4 id="实例">实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>父组件通过$children访问子组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first-children</span>&gt;</span><span class="tag">&lt;/<span class="name">first-children</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">second-children</span>&gt;</span><span class="tag">&lt;/<span class="name">second-children</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getChildrens"</span>&gt;</span>访问所有子组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第一个子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"firstChildren"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是第一个子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第二个子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"secondChildren"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是第二个子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'first-children'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#firstChildren'</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            message:<span class="string">'我是第一个子组件'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="string">'second-children'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#secondChildren'</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            message: <span class="string">'我是第二个子组件'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getChildrens() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过$children访问子组件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.$children.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[i].message);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当点击按钮时，控制台打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是第一个子组件</span><br><span class="line">我是第二个子组件</span><br></pre></td></tr></table></figure><h4 id="缺陷">缺陷</h4><ul><li>通过<code>$children</code>访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值</li><li>但是当子组件过多，需要拿到其中一个子组件时，往往不能确定它的索引值，甚至索引值还可能会发生变化</li><li>有时候，我想明确获取其中一个特定的组件，这个时候就可以使用<code>$refs</code></li></ul><h3 id="refs">$refs</h3><h4 id="概述-v2">概述</h4><p><code>$refs</code>只能访问到绑定了<code>ref</code>属性的子组件</p><h4 id="使用">使用</h4><ol><li><code>$ref</code>和<code>ref</code>指令通常是一起使用的</li><li>首先，通过<code>ref</code>给某一个子组件绑定一个特定的ID</li><li>其次，通过<code>this.$refs.ID</code>就可以访问到该组件了</li></ol><h4 id="实例-v2">实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>父组件通过$children访问子组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first-child</span> <span class="attr">ref</span>=<span class="string">"child1"</span>&gt;</span><span class="tag">&lt;/<span class="name">first-child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">second-child</span> <span class="attr">ref</span>=<span class="string">"child2"</span>&gt;</span><span class="tag">&lt;/<span class="name">second-child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getChildren"</span>&gt;</span>访问所有子组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第一个子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"firstChild"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是第一个子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第二个子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"secondChild"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是第二个子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'first-child'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#firstChild'</span>,</span></span><br><span class="line">        data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            message:<span class="string">'我是第一个子组件'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="string">'second-child'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#secondChild'</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            message: <span class="string">'我是第二个子组件'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getChildren() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过$refs访问子组件</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.child1.message);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.child2.message);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="parent和-root">$parent和$root</h3><h4 id="概述-v3">概述</h4><ul><li>如果我们想要在子组件中访问父组件，可以通过<code>$parent</code></li><li>如果我们想要访问根组件，可以通过<code>$root</code></li></ul><h4 id="实例-v3">实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>访问父组件$parent,访问根组件$root<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp-1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp-1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第一个组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Vue实例的子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">my-comp-2</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp-2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第二个组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是Vue实例的孙组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getParent"</span>&gt;</span>获取父组件信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getRoot"</span>&gt;</span>获取根组件信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 全局注册</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'my-comp-1'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">    template: <span class="string">'#myComp1'</span>,</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        message:<span class="string">'我是Vue实例的子组件'</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp-2'</span>:&#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#myComp2'</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line">          getParent() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取父组件信息</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$parent.message);</span></span><br><span class="line">          &#125;,</span><br><span class="line">          getRoot() &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取根组件信息</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$root.message);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'我是Vue实例(根组件)'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注意-v2">注意</h4><ul><li>尽管在Vue开发中，我们允许供<code>$parent</code>和<code>$root</code>访问父组件和根组件，但是在真实开发中尽量不要这样做。</li><li>子组件应该尽量避免直接访问父组件的数据，因为这样耦合度太高了</li><li>如果我们将子组件放在另一个组件之内，很可能该父组件没有对应的属性，往往会引起问题。</li><li>另外，更不要做的是通过<code>$parent</code>和<code>$root</code>直接修改父组件或根组件的状态，否则父/根组件中的状态将变得飘忽不定，很不利于调试和维护</li></ul><h2 id="非父子组件通信">非父子组件通信</h2><ul><li>非父子组件关系包括多个层级的组件，也包括兄弟组件的关系</li><li>在<code>Vue1.x</code>的时候，可以通过<code>$dispatch</code>和<code>$broadcast</code>完成非父子组件间的通信<ul><li><code>$dispatch</code>用于向上级派发事件</li><li><code>$broadcast</code>用于向下级广播事件</li><li>但是在<code>Vue2.x</code>都被取消了</li></ul></li><li>在<code>Vue2.x</code>中，有一种方案是通过<strong>中央事件总线</strong>，也就是一个中介来完成<ul><li>但是这种方案和直接使用<code>Vuex</code>的状态管理方案还是逊色很多</li><li>并且<code>Vuex</code>提供了更多好用的功能，所以这里暂且不讨论这种方案</li></ul></li></ul><h2 id="插槽slot">插槽slot</h2><h3 id="编译作用域">编译作用域</h3><p>在真正学习插槽之前，我们需要先理解一个概念：<strong>编译作用域</strong></p><h4 id="一个栗子">一个栗子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>编译作用域的理解<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该isShow属性的作用域是父组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我能不能显示出来呢?<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 父组件（Vue实例）</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      isShow: <span class="literal">true</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span>:&#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#myComp'</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            isShow:<span class="literal">false</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>问：上述代码子组件的h2标签是否可以被渲染出来？</li><li>答：可以被渲染出来，也就是使用 isShow 使用的是 Vue 实例的属性</li><li>原因：在使用<code>&lt;my-comp v-show=&quot;isShow&quot;&gt;&lt;/my-comp</code>的时候，整个组件的使用过程是相当于在父组件中出现的，那么他的作用域就是父组件，使用的属性也是属于父组件的属性</li></ul><h4 id="准则">准则</h4><p><strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译</strong></p><h3 id="为什么使用slot">为什么使用slot</h3><ul><li><p><code>slot</code>即为插槽</p><ul><li>在生活中很多地方都有插槽，电脑的USB插槽，插板当中的电源插槽</li><li>插槽的目的是让我们原来的设备具有更多的扩展性。</li></ul></li><li><p>组件的插槽</p><ul><li>组件的插槽也是为了让我们封装的组件更加具有扩展性</li><li>让使用者可以决定组件内部的一些内容到底展示什么</li></ul></li><li><p>一个栗子：移动网站中的导航栏</p><ul><li><p>移动开发中，几乎每个页面都有导航栏</p></li><li><p>导航栏我们必然会封装成一个插件，比如 nav-bar 插件</p></li><li><p>一旦有了这个组件，我们就看在多个页面中复用了</p></li><li><p>但是，每个页面中的导航栏并不一致，以京东M站为例</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200711100448394.png" alt="image-20200711100448394"></p></li></ul></li><li><p>如何封装上述导航栏组件呢？抽取共性，保留不同</p><ul><li>最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽</li><li>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容</li><li>是搜索框，还是文字、菜单，有调用者自己来决定</li></ul></li></ul><h3 id="slot基本使用">slot基本使用</h3><h4 id="基本使用">基本使用</h4><ul><li>在子组件中，使用特殊的元素<code>&lt;slot&gt;</code>就可以为子组件开启一个插槽</li><li>该插槽中插入什么内容取决于父组件如何使用</li><li><code>&lt;slot&gt;</code>标签中可以指定插槽的默认内容</li><li>在父组件使用子组件标签时标签中的内容在渲染时会替换所有的未具名<code>&lt;slot&gt;</code>标签</li></ul><h4 id="示例代码-v7">示例代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>slot插槽的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定插槽内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件指定的插槽内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 未指定插槽内容，使用默认的插槽内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span><span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽的默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 父组件（Vue实例）</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#myComp'</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200711101737869.png" alt="image-20200711101737869"></p><h3 id="具名插槽">具名插槽</h3><h4 id="概述-v4">概述</h4><ul><li>当子组件的功能复杂时，子组件的插槽可能并非一个</li><li>此时就要使用具名插槽给指定的插槽插入指定的内容</li></ul><h4 id="使用-v2">使用</h4><ul><li>旧版本<ul><li>给<code>&lt;slot&gt;</code>标签指定一个<code>name</code>属性</li><li>在插入插槽时在标签上使用<code>slot</code>属性，值为指定插槽的<code>name</code>属性值</li></ul></li><li>从 <code>vue@2.6.x</code> 开始，Vue 为具名和作用域插槽引入了一个全新的语法：<code>v-shot</code>指令，目的就是想统一 slot 和 slot-scope 语法，使代码更加规范和清晰</li><li>跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (v-slot:) 替换为字符<code>#</code>。例如 v-slot:header 可以被缩写为 #header</li><li>新版本<ul><li>在新版本中，在插入插槽时使用<code>template</code>标签并加以<code>v-slot</code>属性，值为指定插槽的<code>name</code>属性值，<code>template</code>标签内为插槽要插入的内容</li><li>特殊地，当在<code>template</code>标签中使用属性<code>v-slot:default</code>（缩写为<code>#default</code>)是将内容插入未具名的插槽中（<code>v-shot</code>属性可以省略），当然，未在<code>template</code>标签中的内容同样会被插入未具名的插槽中。</li></ul></li></ul><h4 id="旧版本的栗子">旧版本的栗子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav-bar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"center"</span>&gt;</span>京东商城<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span>菜单栏<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav-bar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 导航栏组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"navBar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 具名插槽 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"center"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'nav-bar'</span>:&#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#navBar'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新版本的栗子">新版本的栗子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>具名插槽<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav-bar</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 插入内容,v2.6.x,v-slot --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">left</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">center</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>京东商城<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">right</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>菜单栏<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav-bar</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 导航栏组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"navBar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 具名插槽--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"center"</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el:<span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'nav-bar'</span>:&#123;</span></span><br><span class="line"><span class="actionscript">        template:<span class="string">'#navBar'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="栗子结果">栗子结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">返回 京东商城 菜单栏</span><br></pre></td></tr></table></figure><h3 id="作用域插槽">作用域插槽</h3><h4 id="概述-v5">概述</h4><p><strong>父组件替换插槽的标签，但是内容由子组件来提供</strong></p><h4 id="使用-v3">使用</h4><ul><li>旧版本<ul><li>在子组件中，通过<code>v-bind</code>将子组件中要展示的数据绑定在自定义属性中</li><li>在父组件中，使用<code>template</code>标签和<code>slot-scope</code>属性获取作用域插槽</li><li>通过<code>作用域插槽名.绑定的属性名</code>就可以在父组件中获取子组件中的数据</li></ul></li><li>新版本<ul><li>新版本（v2.6.x），在父组件中，使用<code>v-slot</code>标签获取作用域插槽</li><li>可以显示调用插槽名字<code>v-slot:插槽名</code>，未具名插槽为<code>v-slot:default</code>，也可省略为<code>v-slot</code></li></ul></li></ul><h4 id="旧版本的栗子-v2">旧版本的栗子</h4><p>需求：子组件中的一组数据，比如：ppLanguages: [‘JavaScript’, ‘Python’, ‘Swift’, ‘Go’, ‘C++’]，需要在多个页面进行展示</p><ul><li>某些界面是以水平方向一一展示的</li><li>某些界面是以列表形式展示的</li><li>某些界面直接展示一个数组</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>作用域插槽-slot-scope<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表形式展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"slotDatas"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"lan in slotDatas.lans"</span>&gt;</span>&#123;&#123;lan&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 水平展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"slotDatas"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slotDatas.lans.join('--')&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:lans</span>=<span class="string">"pLanguage"</span>&gt;</span>&#123;&#123;pLanguage&#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#myComp'</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            pLanguage: [<span class="string">'JavaScript'</span>, <span class="string">'Python'</span>, <span class="string">'Swift'</span>, <span class="string">'Go'</span>, <span class="string">'C++'</span>]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新版本的栗子-v2">新版本的栗子</h4><p>需求和旧版本的栗子需求一致</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>作用域插槽-v-slot<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表形式展示 使用v-slot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotDatas"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"lan in slotDatas.lans"</span>&gt;</span>&#123;&#123;lan&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 水平展示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-comp</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">"slotDatas"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slotDatas.lans.join('--')&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-comp</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myComp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:lans</span>=<span class="string">"pLanguage"</span> &gt;</span>&#123;&#123;pLanguage&#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      <span class="string">'my-comp'</span>: &#123;</span></span><br><span class="line"><span class="actionscript">        template: <span class="string">'#myComp'</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            pLanguage: [<span class="string">'JavaScript'</span>, <span class="string">'Python'</span>, <span class="string">'Swift'</span>, <span class="string">'Go'</span>, <span class="string">'C++'</span>]</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="栗子结果-v2">栗子结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">· JavaScript</span><br><span class="line">· Python</span><br><span class="line">· Swift</span><br><span class="line">· Go</span><br><span class="line">· C++</span><br><span class="line">JavaScript--Python--Swift--Go--C++</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV15741177Eh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019年最全最新Vue、Vuejs教程，从入门到精通&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端框架" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.hardape.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>09-Mybatis注解开发</title>
    <link href="https://www.hardape.top/article/f7736aa1.html"/>
    <id>https://www.hardape.top/article/f7736aa1.html</id>
    <published>2020-06-24T15:52:30.000Z</published>
    <updated>2020-06-29T04:36:24.273Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="概述">概述</h2><p>这几年来注解开发越来越流行，Mybatis 也可以使用注解开发方式，可以不用编写映射配置文件了，但是Mybatis主配置文件不能省略。</p><h2 id="操作注解">操作注解</h2><ul><li><code>@Insert(&quot;SQL语句&quot;)</code>：实现新增</li><li><code>@Update(&quot;SQL语句&quot;)</code>：实现更新</li><li><code>@Delete(&quot;SQL语句&quot;)</code>：实现删除</li><li><code>@Select(&quot;SQL语句&quot;)</code>：实现查询</li></ul><h2 id="映射关系">映射关系</h2><h3 id="Results">@Results</h3><h4 id="概述-v2">概述</h4><ul><li>代替的是<code>&lt;reslutMap&gt;</code>标签</li><li>该注解中可以使用单个<code>@Result</code>注解，也可以使用<code>@Result</code>集合</li></ul><h4 id="属性">属性</h4><ul><li><code>id</code>：设置当前<code>@Result</code>注解封装的唯一标识，用于<code>@ResultMap</code>注解的引用</li><li><code>value</code>：<code>@Result</code>的结果集封装</li></ul><h4 id="使用格式">使用格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Results</span>(id=<span class="string">""</span>,value=&#123;<span class="meta">@Result</span>(), <span class="meta">@Result</span>()&#125;)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="meta">@Results</span>(id=<span class="string">""</span>,value=<span class="meta">@Result</span>())</span><br></pre></td></tr></table></figure><h3 id="Result">@Result</h3><h4 id="概述-v3">概述</h4><p>代替了<code>&lt;id&gt;</code>标签和<code>&lt;result&gt;</code>标签</p><h4 id="属性-v2">属性</h4><ul><li><code>id</code>：是否是注解字段，可取值为<code>true/false</code>，默认为<code>false</code></li><li><code>column</code>：数据库的列名</li><li><code>property</code>：需要装配的属性名</li><li><code>one</code>：需要使用的<code>@One</code>注解，<code>@Results(@Result( one = @One() ))</code></li><li><code>many</code>：需要使用的<code>@Many</code>注解，<code>@Results(@Result( many = @Many() ))</code></li></ul><h3 id="ResultMap">@ResultMap</h3><h4 id="概述-v4">概述</h4><p>实现引用<code>@Reults</code>定义的封装，可以引用单个id，也可以引用多个id</p><h4 id="使用格式-v2">使用格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResultMap</span>(<span class="string">"id"</span>); <span class="comment">// 引用单个id</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="meta">@ResultMap</span>(&#123;<span class="string">"id1"</span>,<span class="string">"id2"</span>&#125;) <span class="comment">// 引用多个id</span></span><br></pre></td></tr></table></figure><h3 id="One">@One</h3><h4 id="概述-v5">概述</h4><p>一对一，代替了<code>&lt;association&gt;</code>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。</p><h4 id="属性-v3">属性</h4><ul><li><code>select</code>：指定用来多表查询的映射SQL语句的mapper</li><li><code>fetchType</code>：会覆盖全局的配置参数<code>lazyLoadingEnabled</code>，取值如下<ul><li><code>FecthType.LAZY</code>：懒加载，即延迟加载</li><li><code>FecthType.EAGER</code>：立即加载</li><li><code>FecthType.DEFAULT</code>：默认值</li></ul></li></ul><h4 id="使用格式-v3">使用格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Result</span>(column = <span class="string">""</span>, property = <span class="string">""</span>. one = <span class="meta">@One</span>(select = <span class="string">""</span>, fetchType=<span class="string">""</span>))</span><br></pre></td></tr></table></figure><h3 id="Many">@Many</h3><h4 id="概述-v6">概述</h4><p>多对一，代替了<code>&lt;collection&gt;</code>标签，是多表查询的关键，在注解中用来指定子查询返回对象集合。</p><h4 id="属性-v4">属性</h4><ul><li><code>select</code>：指定用来多表查询的映射SQL语句的mapper</li><li><code>fetchType</code>：会覆盖全局的配置参数<code>lazyLoadingEnabled</code>，取值如下<ul><li><code>FecthType.LAZY</code>：懒加载，即延迟加载</li><li><code>FecthType.EAGER</code>：立即加载</li><li><code>FecthType.DEFAULT</code>：默认值</li></ul></li></ul><h4 id="使用格式-v4">使用格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Result</span>(column = <span class="string">""</span>, property = <span class="string">""</span>. many = <span class="meta">@Many</span>(select = <span class="string">""</span>))</span><br></pre></td></tr></table></figure><h2 id="实例">实例</h2><h3 id="单表CURD">单表CURD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 要保存的用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 新用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username = #&#123;username&#125;, birthday = #&#123;birthday&#125;, sex = #&#123;sex&#125;, address = #&#123;address&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id删除用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称模糊查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where username like #&#123;username&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总用户数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select count(*) from user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一对一">一对一</h3><p>一个账户只属于一个用户</p><p>UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 查询用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p>AccountMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询账户和账户的所属用户信息</span></span><br><span class="line"><span class="comment"> * 使用 Account 实体类中封装对 User 实体类的引用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account"</span>)</span><br><span class="line"><span class="meta">@Results</span>(id = <span class="string">"accountUser"</span>,</span><br><span class="line">        value = &#123;<span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"uid"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column = <span class="string">"money"</span>, property = <span class="string">"money"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"user"</span>,</span><br><span class="line">                        one = <span class="meta">@One</span>(select = <span class="string">"top.hardape.mapper.UserMapperfindById"</span>))&#125;)</span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAllUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="一对多">一对多</h3><p>一个用户可以拥有多个账户</p><p>AccountMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 用户 id 查询账户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from account where uid = #&#123;uid&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br></pre></td></tr></table></figure><p>UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户，包括用户所拥有的账户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="meta">@Results</span>(id = <span class="string">"userAccount"</span>,</span><br><span class="line">        value = &#123;<span class="meta">@Result</span>(id = <span class="keyword">true</span>, column = <span class="string">"id"</span>, property = <span class="string">"id"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"username"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"sex"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"address"</span>),</span><br><span class="line">                <span class="meta">@Result</span>(column = <span class="string">"id"</span>, property = <span class="string">"accounts"</span>,</span><br><span class="line">                        many = <span class="meta">@Many</span>(select = <span class="string">"top.hardape.mapper.AccountMapper.findByUid"</span>,</span><br><span class="line">                                fetchType = FetchType.LAZY))&#125;)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllAccounts</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="基于注解的二级缓存">基于注解的二级缓存</h2><ol><li><p>第一步：让Mybatis框架支持二级缓存（在Mybatis主配置文件的<code>&lt;settings&gt;</code>标签配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 开启Mybatis对二级缓存的支持 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为<code>cacheEnabled</code>的取值默认就为<code>true</code>，所以这一步可以省略不配置。</p></li><li><p>第二步：让当前的持久层mapper接口支持二级缓存（在mapper接口上使用<code>@CacheNamespace</code>注解配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@CacheNamespace(blocking=true)</span><br></pre></td></tr></table></figure></li></ol><h2 id=""></h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>08-Mybatis缓存</title>
    <link href="https://www.hardape.top/article/9570c967.html"/>
    <id>https://www.hardape.top/article/9570c967.html</id>
    <published>2020-06-24T14:29:56.000Z</published>
    <updated>2020-06-24T15:47:19.422Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="概述">概述</h2><ul><li>缓存是存在于内存中的临时数据</li><li>适用缓存的情况<ul><li>经常查询并且不经常改变的数据。</li><li>数据的正确与否对最终结果影响不大。</li></ul></li><li>不适用缓存的情况<ul><li>经常改变的数据</li><li>数据的正确与否对最终结果影响很大的，如：商品的库存，银行的汇率，股市的牌价等。</li></ul></li><li>像大多数持久化框架一样，Mybatis也提供了缓存策略，通过缓存策略来减少数据库的查询次数，从而提高执行效率。</li><li>在 Mybatis 中缓存分为<strong>一级缓存</strong>和<strong>二级缓存</strong></li></ul><h2 id="Mybatis一级缓存">Mybatis一级缓存</h2><h3 id="概述-v2">概述</h3><p>Mybatis 中的一级缓存指的是<code>SqlSession</code>对象的缓存。</p><h3 id="说明">说明</h3><ul><li>当执行查询之后，查询的结果会同时存入到<code>SqlSession</code>对象的一块区域中，即为一级缓存，该区域的结构是一个<code>Map</code>键值对结构。当我们再次查询同样的数据时，Mybatis 会先去 <code>SqlSession</code>中查询是否有，有的话直接拿来用。</li><li>当<code>SqlSession</code>对象消失，即调用<code>SqlSession</code>的<code>close()</code>方法时，Mybatis 的一级缓存也就消失了。</li><li>当调用<code>SqlSession</code>的修改、添加、删除、<code>commit()</code>时，会清空 SqlSession 中的一级缓存，这样做的目的是为让缓存中存储的是最新的信息，避免脏读。</li><li><code>SqlSession</code>的<code>clearCache()</code>方法也可以清空一级缓存</li></ul><h2 id="Mybatis二级缓存">Mybatis二级缓存</h2><h3 id="概述-v3">概述</h3><p>Mybatis 中的二级缓存指的是<code>SqlSessionFactory</code>对象的缓存。</p><h3 id="说明-v2">说明</h3><ul><li>同一个<code>SqlSessionFactory</code>对象创建的多个<code>SqlSession</code>对象是共享同一个二级缓存的。</li></ul><h3 id="二级缓存使用步骤">二级缓存使用步骤</h3><ol><li><p>第一步：让Mybatis框架支持二级缓存（在Mybatis主配置文件的<code>&lt;settings&gt;</code>标签配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 开启Mybatis对二级缓存的支持 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为<code>cacheEnabled</code>的取值默认就为<code>true</code>，所以这一步可以省略不配置。</p></li><li><p>第二步：让当前的映射文件支持二级缓存（在映射配置文件中使用<code>&lt;cache&gt;</code>标签配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.hardape.mapper.UserMapper"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 开启当前映射文件对二级缓存的支持 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第三步：让当前的操作支持二级缓存（在<code>&lt;select&gt;</code>标签上使用<code>userCache</code>属性配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span> </span><br><span class="line">    select * from user where id = #&#123;id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果每次查询都需要最新的数据sql，要设置成<code>useCache=false</code>，禁用二级缓存。</p></li></ol><h3 id="注意">注意</h3><ul><li>当使用二级缓存时，所缓存的类一定要实现<code>java.io.Serializable</code>接口，即使用序列化方式来保存对象。</li><li>二级缓存中存放的内容是数据，而不是对象，故由同一个<code>SqlSessionFactory</code>对象产生的不同的<code>SqlSession</code>执行的查询结果不是同一个对象。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>07-Mybatis延迟加载</title>
    <link href="https://www.hardape.top/article/4938489e.html"/>
    <id>https://www.hardape.top/article/4938489e.html</id>
    <published>2020-06-24T14:29:28.000Z</published>
    <updated>2020-06-24T15:46:12.626Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="概述">概述</h2><h3 id="问题">问题</h3><ul><li>在一对多查询中，当有一个用户，它有100个账户时<ul><li>在查询用户时，要不要把关联的账户查出来？</li><li>在查询账户时，要不要包关联的用户查出来？</li></ul></li><li>在查询用户时，用户下的账户信息应该是，什么时候使用，什么时候查询。</li><li>在查询账户时，账户的所属用户信息应该是随着账户查询时一起查询出来，这样对使用者更友好。</li></ul><h3 id="延迟加载">延迟加载</h3><ul><li><strong>延迟加载</strong>：在真正使用数据是参发起查询，不用的时候不查询，也称为<strong>按需加载</strong>、<strong>懒加载</strong></li><li><strong>优点</strong>：先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能。</li></ul><h3 id="立即加载">立即加载</h3><p><strong>立即加载</strong>：不管用不用，只要一调用方法，马上发起查询。</p><h3 id="加载方式的选择">加载方式的选择</h3><ul><li>一对多，多对多：通常情况下采用<strong>延迟加载</strong></li><li>多对一，一对一：通常情况下采用<strong>立即加载</strong></li></ul><h2 id="延迟加载的配置">延迟加载的配置</h2><ul><li><p>延迟加载需在Mybatis主配置文件中的<code>&lt;settings&gt;</code>标签下配置，官网文档说明如下</p><table><thead><tr><th>name属性</th><th>说明</th><th>value取值</th><th>默认值</th></tr></thead><tbody><tr><td><code>lazyLoadingEnabled</code></td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。</td><td>true | false</td><td>false</td></tr><tr><td><code>aggressiveLazyLoading</code></td><td>开启时，任一方法的调用都会加载该对象的所有延迟加载属性。</td><td>true | false</td><td>false （&lt;=3.4.1  true）</td></tr></tbody></table></li><li><p>具体配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意<code>settings</code>标签在主配置文件中的书写位置。</p></li></ul><h2 id="assocation实现延迟加载">assocation实现延迟加载</h2><h3 id="使用">使用</h3><ul><li><code>association</code>中关联表时使用<code>select</code>属性和<code>column</code>属性可实现延迟加载</li><li>属性说明<ul><li><code>select</code>属性：通过哪个查询语句查出这个对象的信息（包名+类名+方法名）</li><li><code>column</code>属性：把当前表的哪个列的值作为参数传递给另一个查询语句</li></ul></li><li>此时的关联查询称为<strong>关联的嵌套 select 查询</strong>，即通过<code>column</code>属性值作为参数传入<code>select</code>属性值中映射的<code>select</code>标签对应的SQL语句，执行结果返回并封装到<code>association</code>标签的<code>javaType</code>属性对应的类型中。</li><li>如果此时在主配置文件中的<code>settings</code>标签中配置了懒加载，未使用关联表查询的封装数据时，就不会执行关联表响应的SQL语句。</li></ul><h3 id="实例">实例</h3><h4 id="需求">需求</h4><p>查询账户（<code>Account</code>）信息并且关联查询用户（<code>User</code>）信息。当需要查询用户信息时再查询用户信息。</p><h4 id="用户Mapper接口">用户Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户映射配置文件">用户映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="账户Mapper接口">账户Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有账户信息，同时查询拥有该账户的所有用户信息</span></span><br><span class="line"><span class="comment">     * 使用 Account 实体类中封装对 User 实体类的引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="账户映射配置文件">账户映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">"top.hardape.mapper.UserMapper.findById"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">    select * from account</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类单元测试">测试类单元测试</h4><p>只查账户信息不查用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        accountMapper = session.getMapper(AccountMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAccountFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = accountMapper.findAll();</span><br><span class="line"><span class="comment">//        for (Account account : accounts) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(account);</span></span><br><span class="line"><span class="comment">//            System.out.println(account.getUser());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Log4j结果">Log4j结果</h4><p>未配置延迟加载时，会执行所有SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from account</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">====&gt;  Preparing: select * from user where id = ?</span><br><span class="line">====&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;====      Total: 1</span><br><span class="line">====&gt;  Preparing: select * from user where id = ?</span><br><span class="line">====&gt; Parameters: 2(Integer)</span><br><span class="line">&lt;====      Total: 1</span><br><span class="line">====&gt;  Preparing: select * from user where id = ?</span><br><span class="line">====&gt; Parameters: 3(Integer)</span><br><span class="line">&lt;====      Total: 1</span><br><span class="line">&lt;==      Total: 5</span><br></pre></td></tr></table></figure><p>配置延迟加载时，只会执行查询账户SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from account</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==      Total: 5</span><br></pre></td></tr></table></figure><h2 id="collection实现延迟加载">collection实现延迟加载</h2><h3 id="使用-v2">使用</h3><ul><li><code>collection</code>中关联表时使用<code>select</code>属性和<code>column</code>属性可实现延迟加载</li><li>属性说明<ul><li><code>select</code>属性：通过哪个查询语句查出这个集合中对象的信息（包名+类名+方法名）</li><li><code>column</code>属性：把当前表的哪个列的值作为参数传递给另一个查询语句</li></ul></li><li>此时的关联查询称为<strong>关联的嵌套 select 查询</strong>，即通过<code>column</code>属性值作为参数传入<code>select</code>属性值中映射的<code>select</code>标签对应的SQL语句，执行结果返回并封装到<code>association</code>标签的<code>ofType</code>属性对应的集合类型中。</li><li>如果此时在主配置文件中的<code>settings</code>标签中配置了懒加载，未使用关联表查询的封装数据时，就不会执行关联表响应的SQL语句。</li></ul><h3 id="实例-v2">实例</h3><h4 id="需求-v2">需求</h4><p>查询用户（<code>User</code>）信息并且关联查询账户（<code>Account</code>）信息。当需要查询账户信息时再查询账户信息。</p><h4 id="账户Mapper接口-v2">账户Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="账户映射配置文件-v2">账户映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUid"</span> <span class="attr">resultType</span>=<span class="string">"account"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select * from account where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="用户Mapper接口-v2">用户Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户，同时包括该用户所拥有的所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户映射配置文件-v2">用户映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">ofType</span>=<span class="string">"Account"</span> <span class="attr">select</span>=<span class="string">"top.hardape.mapper.AccountMapper.findByUid"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类单元测试-v2">测试类单元测试</h4><p>只查用户信息不查账户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        userMapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.findAll();</span><br><span class="line"><span class="comment">//        for (User user : users) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(user);</span></span><br><span class="line"><span class="comment">//            for (Account account : user.getAccounts()) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(account);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Log4j结果-v2">Log4j结果</h4><p>未配置延迟加载时，会执行所有SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from user</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">====&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">====&gt; Parameters: 1(Integer)</span><br><span class="line">&lt;====      Total: 2</span><br><span class="line">====&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">====&gt; Parameters: 2(Integer)</span><br><span class="line">&lt;====      Total: 1</span><br><span class="line">====&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">====&gt; Parameters: 3(Integer)</span><br><span class="line">&lt;====      Total: 2</span><br><span class="line">====&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">====&gt; Parameters: 4(Integer)</span><br><span class="line">&lt;====      Total: 0</span><br><span class="line">====&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">====&gt; Parameters: 5(Integer)</span><br><span class="line">&lt;====      Total: 0</span><br><span class="line">====&gt;  Preparing: select * from account where uid = ?</span><br><span class="line">====&gt; Parameters: 6(Integer)</span><br><span class="line">&lt;====      Total: 0</span><br><span class="line">&lt;==      Total: 6</span><br></pre></td></tr></table></figure><p>配置延迟加载时，只会执行查询用户SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from user</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==      Total: 6</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>06-Mybatis多表查询</title>
    <link href="https://www.hardape.top/article/56ce47de.html"/>
    <id>https://www.hardape.top/article/56ce47de.html</id>
    <published>2020-06-24T14:25:33.000Z</published>
    <updated>2020-06-24T15:41:27.687Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="表间关系">表间关系</h2><h3 id="关系分类">关系分类</h3><ul><li>一对多</li><li>多对一</li><li>一对一</li><li>多对多</li></ul><h3 id="关系举例">关系举例</h3><ul><li>用户和订单为一对多<ul><li>一个用户可以下多个订单</li></ul></li><li>订单和用户为多对一<ul><li>多个订单属于同一个用户</li></ul></li><li>人和身份证号为一对一<ul><li>一个人只能有一个身份证号</li><li>一个身份证号只能属于一个人</li></ul></li><li>老师和学生为多对多<ul><li>一个学生可以被多个老师教授</li><li>一个老师可以教授多个学生</li></ul></li></ul><h3 id="注意">注意</h3><p><strong>在Mybatis中把多对一看成一对一</strong>，如订单和用户的关系中，以订单的角度出发，每一个订单都只属于一个用户。</p><h2 id="一对一-多对一">一对一(多对一)</h2><h3 id="概述">概述</h3><ul><li>在Mybatis中一对一（多对一）是通过<code>association</code>标签实现的</li><li>一对一关系映射：从表实体包含一个主表实体的引用</li></ul><h3 id="实例">实例</h3><p>用户（<code>User</code>）和账户（<code>Account</code>）</p><ul><li>多个账户可以属于同一个用户（多对一）</li><li>一个账户只能属于一个用户（在Mybatis中看作一对一）</li></ul><h3 id="步骤">步骤</h3><ul><li><p>建立两张表：用户表和账户表</p><ul><li>让账户表和用户表之间具备多对一的关系</li><li>需要在账户表中添加外键</li></ul></li><li><p>建立两个实体类：用户实体类和账户实体类，让用户和账户的实体类能体现出一对多的关系</p><ul><li>第一种方式：另外定义一个包装类，包含用户和账户的信息</li><li>第二种方式：在账户实体类中定义对用户实体类对象的引用</li></ul></li><li><p>建立账户的映射配置文件</p></li></ul><h3 id="要求">要求</h3><p>当查询账户时，可以同时得到账户的所属用户信息（用户姓名和地址）</p><h3 id="建表-mysql">建表(mysql)</h3><p>用户表<code>user</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名称'</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生日'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>账户表<code>account</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`account`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'编号'</span>,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户编号'</span>,</span><br><span class="line">  <span class="string">`money`</span> <span class="keyword">double</span> <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'金额'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_Reference_8`</span> (<span class="string">`UID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_8`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`uid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>数据库ER图</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200617164642623.png" alt="image-20200617164642623"></p><p>表中测试数据如下</p><ul><li><p><code>User</code>表</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200617220727227.png" alt="image-20200617220727227"></p></li><li><p><code>Account</code>表</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200617220832036.png" alt="image-20200617220832036"></p></li></ul><h3 id="实体类">实体类</h3><p>用户实体类<code>User</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类 —— 用户User</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>账户实体类<code>Account</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类 —— 账户Account</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uid="</span> + uid +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式一">方式一</h3><h4 id="概述-v2">概述</h4><p>定义一个包装类<code>AccountUser</code>，其中要包含账户信息和用户信息，可以通过继承<code>Account</code>类并包含用户信息，将两表查询的结果封装到<code>AccountUser</code>类中。</p><h4 id="SQL语句">SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*,u.username,u.address <span class="keyword">from</span> <span class="keyword">account</span> a,<span class="keyword">user</span> u <span class="keyword">where</span> u.id = a.uid</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200617221214393.png" alt="image-20200617221214393"></p><h4 id="包装类">包装类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">" AccountUser&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="账户的Mapper接口">账户的Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询账户和账户的所属用户信息（用户姓名和地址）</span></span><br><span class="line"><span class="comment">     * 使用 AccountUser封装 Account 和 User信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;AccountUser&gt; <span class="title">findAllAccountUser</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="账户的映射配置文件">账户的映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllAccountUser"</span> <span class="attr">resultType</span>=<span class="string">"AccountUser"</span>&gt;</span></span><br><span class="line">    select a.*,u.username,u.address from account a,user u where u.id = a.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：上述类型有使用<code>package</code>注册别名</p><h3 id="方式二">方式二</h3><h4 id="概述-v3">概述</h4><p>在<code>Account</code>实体类中定义一个<code>User</code>类对象的引用，来代表该账户是属于哪一个用户的。</p><h4 id="SQL语句-v2">SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.id <span class="keyword">as</span> aid,a.uid,a.money,u.* <span class="keyword">from</span> <span class="keyword">account</span> a,<span class="keyword">user</span> u <span class="keyword">where</span> u.id = a.uid</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200617230437277.png" alt="image-20200617230437277"></p><h4 id="修改账户类">修改账户类</h4><p>在<code>Account</code>类中加入<code>User</code>类的对象作为<code>Account</code>类的一个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类 —— 账户Account</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uid="</span> + uid +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="账户的Mapper接口-v2">账户的Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询账户和账户的所属用户信息（用户姓名和地址）</span></span><br><span class="line"><span class="comment">     * 使用 Account 实体类中封装对 User 实体类的引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="账户的映射配置文件-v2">账户的映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"accountMap"</span> <span class="attr">type</span>=<span class="string">"account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"aid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一对一的关系映射，配置封装user的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"accountMap"</span>&gt;</span></span><br><span class="line">    select a.id as aid,a.uid,a.money,u.* from account a,user u where u.id = a.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：上述类型有使用<code>package</code>注册别名</p><h3 id="association标签">association标签</h3><h4 id="概述-v4">概述</h4><ul><li><code>association</code>标签是<code>resultMap</code>标签的子标签，用于在一个实体对象中装配另一个实体对象</li><li>把<code>association</code>标签当做小的<code>resultMap</code>标签看待</li></ul><h4 id="属性">属性</h4><ul><li><code>property</code>属性：装配的实体类的对象属性名</li><li><code>javaType</code>属性：装配的实体类的类名或别名</li><li><code>column</code>属性：关联实体类的列名</li></ul><h4 id="子标签">子标签</h4><p>子标签的属性和用法和<code>resultMap</code>子标签<code>id</code>和<code>result</code>一致</p><h2 id="一对多">一对多</h2><h3 id="概述-v5">概述</h3><ul><li>在Mybatis中一对多是通过<code>collection</code>标签实现的</li><li>一对多关系映射：主表实体应该包含从表实体的集合引用</li></ul><h3 id="实例-v2">实例</h3><p>用户（<code>User</code>）和账户（<code>Account</code>）</p><ul><li>一个用户可以有多个账户</li></ul><h3 id="步骤-v2">步骤</h3><ul><li><p>建立两张表：用户表和账户表</p><ul><li>让账户表和用户表之间具备多对一的关系</li><li>需要在账户表中添加外键</li></ul></li><li><p>建立两个实体类：用户实体类和账户实体类，让用户和账户的实体类能体现出一对多的关系</p><ul><li>在用户实体类中定义对账户实体类对象集合的引用</li></ul></li><li><p>建立用户的映射配置文件</p></li></ul><h3 id="要求-v2">要求</h3><p>当查询用户时，可以同时得到该用户的所有账户的信息</p><h3 id="建表-mysql-v2">建表(mysql)</h3><p>同一对一的建表一致</p><h3 id="实体类-v2">实体类</h3><p>同一对一的实体类一致</p><h3 id="SQL语句-v3">SQL语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.*, a.id <span class="keyword">as</span> aid, a.uid, a.money </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span> u <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">account</span> a </span><br><span class="line"><span class="keyword">on</span> u.id = a.uid</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200617234359412.png" alt="image-20200617234359412"></p><h3 id="修改用户类">修改用户类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">getAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccounts</span><span class="params">(List&lt;Account&gt; accounts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accounts = accounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户的Mapper接口">用户的Mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户，包括用户所用户的账户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户的映射配置文件">用户的映射配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.hardape.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"accounts"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">ofType</span>=<span class="string">"Account"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"aid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">column</span>=<span class="string">"uid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"money"</span> <span class="attr">column</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select u.*, a.id as aid, a.uid, a.money from user u left join account a on u.id = a.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：上述类型有使用<code>package</code>注册别名</p><h3 id="collection标签">collection标签</h3><h4 id="概述-v6">概述</h4><ul><li><code>collection</code>标签是<code>resultMap</code>标签的子标签，用于在一个实体对象中装配另一个实体对象的集合</li><li>把<code>collection</code>标签当做小的<code>resultMap</code>标签看待</li></ul><h4 id="属性-v2">属性</h4><ul><li><code>property</code>属性：装配的实体类集合的对象属性名</li><li><code>ofType</code>属性：装配的实体类集合的元素类型，即实体类的类名或别名</li><li><code>column</code>属性：关联实体类集合的列名</li></ul><h4 id="子标签-v2">子标签</h4><p>子标签的属性和用法和<code>resultMap</code>子标签<code>id</code>和<code>result</code>一致</p><h2 id="多对多">多对多</h2><h3 id="概述-v7">概述</h3><p>在Mybatis中多对多关系可以看成是双向的一对多关系</p><h3 id="实例-v3">实例</h3><p>用户（<code>User</code>）和角色（<code>Role</code>）</p><ul><li>一个用户可以有多个角色</li><li>一个角色可以赋予多个用户</li></ul><h3 id="步骤-v3">步骤</h3><ul><li><p>建立两张表：用户表和角色表</p><ul><li>让账户表和用户表之间具备多对多的关系</li><li>需要使用中间表，中间表中包含各自的主键，在中间表中是外键</li></ul></li><li><p>建立两个实体类：用户实体类和角色实体类，让用户和账户的实体类能体现出多对多的关系</p><ul><li>两个实体类各自包含对方一个集合引用</li></ul></li><li><p>建立用户和角色的映射配置文件</p></li></ul><h3 id="要求-v3">要求</h3><ul><li>当查询用户时，可以同时得到用户所包含的所有角色信息</li><li>当查询角色时，可以同时得到所有为该角色的用户信息</li></ul><h3 id="建表-mysql-v3">建表(mysql)</h3><p>用户表<code>User</code>见一对一</p><p>角色表<code>Role</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`role`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'编号'</span>,</span><br><span class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span>,</span><br><span class="line">  <span class="string">`role_desc`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色描述'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>中间表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_role`</span> (</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户编号'</span>,</span><br><span class="line">  <span class="string">`rid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'角色编号'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`uid`</span>,<span class="string">`rid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`FK_Reference_10`</span> (<span class="string">`rid`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_10`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`rid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`role`</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`FK_Reference_9`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`uid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`user`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>数据库ER图</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200618082523159.png" alt="image-20200618082523159"></p><p>表中测试数据如下</p><ul><li><p><code>user</code>表</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200617220727227.png" alt="image-20200617220727227"></p></li><li><p><code>role</code>表</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200618082602266.png" alt="image-20200618082602266"></p></li><li><p><code>user_role</code>表</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200618082616975.png" alt="image-20200618082616975"></p></li></ul><h3 id="实体类-v3">实体类</h3><p>用户实体类<code>User</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类 —— 用户User</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>角色实体类<code>Role</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色实体类 —— Role</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleDesc</span><span class="params">(String roleDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleDesc = roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Role&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", roleName='"</span> + roleName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", roleDesc='"</span> + roleDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询用户">查询用户</h3><h4 id="概述-v8">概述</h4><p>在<code>User</code>实体类中定义一个<code>Role</code>类对象集合的引用，来代表该用户所拥有的所有角色。</p><h4 id="SQL语句-v4">SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.*,r.id <span class="keyword">as</span> rid,r.role_name,r.role_desc <span class="keyword">from</span> <span class="keyword">user</span> u</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> user_role ur</span><br><span class="line"> <span class="keyword">on</span> u.id = ur.uid</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">role</span> r</span><br><span class="line"> <span class="keyword">on</span> ur.rid = r.id</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200618114441023.png" alt="image-20200618114441023"></p><h4 id="修改用户类-v2">修改用户类</h4><p>在<code>User</code>类中加入<code>Role</code>类的对象集合作为<code>User</code>类的一个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类 —— 用户User</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles; <span class="comment">// 拥有角色</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoles</span><span class="params">(List&lt;Role&gt; roles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户的Mapper接口-v2">用户的Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户，包括用户所拥有的角色信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllRoles</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户的映射配置文件-v2">用户的映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userRoleMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roles"</span> <span class="attr">ofType</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"rid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span> <span class="attr">column</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllRoles"</span> <span class="attr">resultMap</span>=<span class="string">"userRoleMap"</span>&gt;</span></span><br><span class="line">    select u.*,r.id as rid,r.role_name,r.role_desc from user u</span><br><span class="line">    left join user_role ur</span><br><span class="line">    on u.id = ur.uid</span><br><span class="line">    left join role r</span><br><span class="line">    on ur.rid = r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：上述类型有使用<code>package</code>注册别名</p><h3 id="查询角色">查询角色</h3><h4 id="概述-v9">概述</h4><p>在<code>Role</code>实体类中定义一个<code>User</code>类对象集合的引用，来代表拥有该角色的所有用户。</p><h4 id="SQL语句-v5">SQL语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> r.id <span class="keyword">as</span> rid,r.role_name,r.role_desc,u.* <span class="keyword">from</span> <span class="keyword">role</span> r</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> user_role ur</span><br><span class="line"> <span class="keyword">on</span> r.id = ur.rid</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> u</span><br><span class="line"> <span class="keyword">on</span> ur.uid = u.id</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200618114753520.png" alt="image-20200618114753520"></p><h4 id="修改角色类">修改角色类</h4><p>在<code>User</code>类中加入<code>Role</code>类的对象集合作为<code>Role</code>类的一个属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色实体类 —— Role</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users; <span class="comment">// 拥有该角色的所有用户</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsers</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.users = users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleDesc</span><span class="params">(String roleDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleDesc = roleDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Role&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", roleName='"</span> + roleName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", roleDesc='"</span> + roleDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="角色的Mapper接口">角色的Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有角色，包括拥有该角色的所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户的映射配置文件-v3">用户的映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleUserMap"</span> <span class="attr">type</span>=<span class="string">"role"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_name"</span> <span class="attr">property</span>=<span class="string">"roleName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_desc"</span> <span class="attr">property</span>=<span class="string">"roleDesc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">ofType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAllUsers"</span> <span class="attr">resultMap</span>=<span class="string">"roleUserMap"</span>&gt;</span></span><br><span class="line">    select r.id as rid,r.role_name,r.role_desc,u.* from role r</span><br><span class="line">    left join user_role ur</span><br><span class="line">    on r.id = ur.rid</span><br><span class="line">    left join user u</span><br><span class="line">    on ur.uid = u.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：上述类型有使用<code>package</code>注册别名</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>05-Mybatis的动态SQL</title>
    <link href="https://www.hardape.top/article/1ea53933.html"/>
    <id>https://www.hardape.top/article/1ea53933.html</id>
    <published>2020-06-24T14:23:37.000Z</published>
    <updated>2020-06-24T15:36:45.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="概述">概述</h2><p>当业务逻辑复杂时，SQL是动态变化的，此时普通的SQL语句无法满足需求，需要根据不同的条件执行不同的SQL命令，即使用动态SQL。</p><h2 id="if-标签">if 标签</h2><h3 id="使用">使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"OGNL表达式"</span>&gt;</span></span><br><span class="line">    (动态)sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当满足<code>test</code>属性中的条件时，执行sql语句</p><h3 id="实例">实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 根据用户姓名或地址模糊查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null and username !=''"</span>&gt;</span></span><br><span class="line">        and username like #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address!=null and address !=''"</span>&gt;</span></span><br><span class="line">        and address like #&#123;address&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>user</code>为实体类<code>top.hardape.domain.User</code>的别名</p><h3 id="注意">注意</h3><ul><li><code>&lt;if&gt;</code>标签的<code>test</code>属性中写的是OGNL表达式，不要添加任何特殊符号(如#{}或${})，且连接符需使用sql语句中的连接符，如<code>and</code>、<code>or</code>等。</li><li>注意<code>where 1 = 1</code>的作用</li></ul><h2 id="where-标签">where 标签</h2><h3 id="使用-v2">使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">   (动态)sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例-v2">实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户姓名或地址模糊查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByNameOrAddr"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line">            and username like #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null and address != ''"</span>&gt;</span></span><br><span class="line">            and address like #&#123;address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>user</code>为实体类<code>top.hardape.domain.User</code>的别名</p><h3 id="注意-v2">注意</h3><ul><li>当<code>&lt;where&gt;</code>标签中的内容开头为<code>and</code>时，则会自动去掉此<code>and</code></li><li>如果<code>&lt;where&gt;</code>标签中在动态生成之后有内容会生成where关键字，如果没有内容不会生成where关键字</li></ul><h2 id="foreach-标签">foreach 标签</h2><h3 id="使用-v3">使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"要遍历的集合名"</span> <span class="attr">item</span>=<span class="string">"迭代变量名"</span> <span class="attr">open</span>=<span class="string">"循环后内容前添加的内容"</span> <span class="attr">close</span>=<span class="string">"循环后内容后添加的内容"</span> <span class="attr">separator</span>=<span class="string">"每次循环内容的分隔符"</span>&gt;</span></span><br><span class="line">    (动态)sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例-v3">实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据指定的id范围查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIds"</span> <span class="attr">parameterType</span>=<span class="string">"IdsVo"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids != null and ids.size() != 0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"id in("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span> &gt;</span></span><br><span class="line">                #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>其中<code>user</code>为实体类<code>top.hardape.domain.User</code>的别名</p></li><li><p>其中<code>idsVo</code>为包装类<code>top.hardape.domain.IdsVo</code>的别名，其中封装了存储id的List集合如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdsVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ids;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIds</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ids = ids;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注意-v3">注意</h3><ul><li>可以在<code>&lt;foreach&gt;</code>标签中的sql语句中使用<code>#{迭代变量名}</code>获取迭代变量的内容</li><li><code>collection</code>属性不要添加任何特殊符号(如#{}或${})</li></ul><h2 id="可重用的SQL片段">可重用的SQL片段</h2><p>在Mybatis映射配置文件中可以使用<code>&lt;sql&gt;</code>标签将重复的sql语句提出来，使用时用<code>&lt;include&gt;</code>标签引用，最终达到sql重用的目的</p><h3 id="sql-标签">sql 标签</h3><h4 id="使用-v4">使用</h4><p><code>&lt;sql&gt;</code>标签在映射配置文件中<code>&lt;mapper&gt;</code>标签下配置，用于定义可重用的SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"定义的SQL片段id"</span>&gt;</span></span><br><span class="line">    (动态)sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实例-v4">实例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sqlColumns"</span>&gt;</span></span><br><span class="line">    id,username,birthday,sex,address</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="include-标签">include 标签</h3><h4 id="使用-v5">使用</h4><p><code>&lt;include&gt;</code>标签在元素配置文件中的需要用到sql语句的标签（<code>&lt;select&gt;</code>、<code>&lt;delete&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;insert&gt;</code>、<code>&lt;sql&gt;</code>）下配置，用于引用可重用的SQL片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"引用的SQL片段id"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实例-v5">实例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用SQL片段查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"sqlColumns"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>user</code>为实体类<code>top.hardape.domain.User</code>的别名</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>04-Mybatis连接池和事务控制</title>
    <link href="https://www.hardape.top/article/cf60a17a.html"/>
    <id>https://www.hardape.top/article/cf60a17a.html</id>
    <published>2020-06-24T14:22:01.000Z</published>
    <updated>2020-06-24T15:34:21.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="Mybatis连接池">Mybatis连接池</h2><h3 id="连接池">连接池</h3><ul><li>连接池就是用于存储连接的一个容器。</li><li>容器其实就是一个集合对象，该集合必须是线程安全的，不能两个线程拿到同一个连接。</li><li>该集合还必须实现队列的特性：先进先出</li><li>在实际开发中一般都会使用连接池，因为它可以减少获取连接的时间。</li></ul><h3 id="Mybatis连接池配置">Mybatis连接池配置</h3><h4 id="概述">概述</h4><p>在Mybatis中连接池的配置是在主配置文件的<code>dataSouce</code>标签中，<code>type</code>属性就是表示采用何种连接池方式，mybatis连接池提供了3种方式的配置：</p><ul><li><code>type=&quot;POOLED&quot;</code>：采用传统的<code>javax.sql.DataSource</code>规范中的连接池，Mybatis中有针对规范的实现，它是从池中获取一个连接来用。</li><li><code>type=&quot;UNPOOLED&quot;</code>：采用传统的获取连接的方式。虽然也实现<code>javax.sql.DataSource</code>接口，但是并没有使用池的思想，即每次创建一个新的连接来用。</li><li><code>type=&quot;JNDI&quot;</code>：采用服务器提供的 JNDI 技术实现，来获取<code>DataSource</code>对象，不同的服务器所能拿到的<code>DataSource</code>是不同的。<ul><li>注意：如果不是web或者maven的war工程，是不能使用的。</li><li>tomcat 服务器中的连接池是<code>dbcp</code>连接池</li></ul></li></ul><h4 id="JNDI配置">JNDI配置</h4><p><code>JNDI：Java Naming and Directory Interface</code>，Java命名和目录接口，是SUN公司推出的一套规范，属于JavaEE技术之一，目的是模仿windows系统的注册表在服务器中注册数据源。</p><p>原理如下：</p><ul><li>使用<code>Map</code>结构存储数据，<code>key</code>存放的是路径+名称（<code>directory</code> + <code>name</code>），<code>value</code>存放的是一个<code>Object</code></li><li>其中<code>directory</code>是固定的，<code>name</code>可以是自己指定的，在<code>value</code>中要存放声明对象是可以指定的，指定的方式是通过配置文件的方式。</li></ul><p>配置步骤如下：</p><ul><li><p>在web项目的<code>webapp</code>文件下创建<code>META-INF</code>目录</p></li><li><p>在<code>META-INF</code>目录中建立一个名为<code>context.xml</code>的配置文件，文件配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"jdbc/mybatis_test"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxActive</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxWait</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxIdle</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"123456"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_test"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>name</code>：数据源的名称，可以随意指定</li><li><code>type</code>：数据源类型</li><li><code>auth</code>：数据源提供者，<code>Container</code>表示容器</li><li><code>maxActive</code>：最大活动连接数</li><li><code>maxWait</code>：最大等待时间</li><li><code>maxIdle</code>：最大空闲连接数</li><li><code>username</code>：用户名</li><li><code>password</code>：密码</li><li><code>driverClassName</code>：驱动类</li><li><code>url</code>：连接url字符串</li></ul></li><li><p>在Mybatis主配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JNDI"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"data_source"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/mybatis_test"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意，测试类必须通过web服务器（如<code>tomcat</code>）才能正常使用，如将测试类代码放入jsp中。</p></li></ul><h4 id="POOLED配置">POOLED配置</h4><p>在Mybatis主配置文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_test"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="POOLED原理">POOLED原理</h4><p>Mybatis中的连接池技术采用的是自己的连接池技术，原理如下</p><ol><li>如果池中存在空闲连接，直接从池中拿出连接使用。</li><li>如果池中没有空闲连接，判断池中的活动连接数是否小于池中最大可容纳的连接数。</li><li>如果小于，则新创建一个连接放入池中并使用</li><li>如果不小于，即池中连接已满，则找出池中最先入池的连接（Oldest）返回获取。</li></ol><h3 id="Mybatis连接池分类">Mybatis连接池分类</h3><ul><li><p>Mybatis将数据源分为三类</p><ul><li><code>UNPOOLED</code>：不使用连接池的数据源</li><li><code>POOLED</code>：使用链接池的数据源</li><li><code>JNDI</code>：使用 JDN I实现的数据源</li></ul></li><li><p>在Mybatis中和数据源<code>dataSource</code>相关的包：</p><ul><li>📁 org.apache.ibatis.datasource</li><li>📁 org.apache.ibatis.datasource.jndi</li><li>📁 org.apache.ibatis.datasource.pooled</li><li>📁 org.apache.ibatis.datasource.unpooled</li></ul></li><li><p>在这些包下Mybatis分别定义了实现<code>javax.sql.DataSource</code>接口的<code>UnpooledDataSource</code>，<code>PooledDataSource</code>类来表示<code>UNPOOLED</code>，<code>POOLED</code>类型的数据源。</p></li><li><p>Mybatis数据源UML图</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200616192310593.png" alt="image-20200616192310593"></p><p>可以看出，<code>PooledDataSource</code>和<code>UnpooledDataSource</code>都实现了<code>javax.sql.DataSource</code>接口，并且<code>PooledDataSource</code>持有一个<code>UnnpooledDataSource</code>的引用，当<code>PooledDataSource</code>需要创建<code>java.sql.Connection</code>实例对象时，还是通过<code>UnpooledDataSource</code>来创建，<code>PooledDataSource</code>只是提供一种缓存连接池机制。</p></li><li><p>Mybatis在初始化时，会根据<code>&lt;dataSrouce&gt;</code>标签中的<code>type</code>属性来创建响应类型的数据源<code>DataSource</code>：</p><ul><li><code>type=&quot;POOLED&quot;</code>：创建<code>PooledDataSource</code>实例</li><li><code>type=&quot;UNPOOLED&quot;</code>：创建<code>UnpooledDataSource</code>实例</li><li><code>type=&quot;JNDI&quot;</code>：从 JNDI 服务上查找<code>DataSource</code>实例，然后返回使用</li></ul></li></ul><h3 id="Mybatis数据源存取">Mybatis数据源存取</h3><ul><li>Mybatis是通过<strong>工厂模式</strong>来创建数据源<code>DataSource</code>对象的，Mybatis定义了抽象的工厂接口<code>org.apache.ibatis.datasource.DataSourceFactory</code>，通过其<code>getDataSource()</code>方法返回数据源<code>DataSource</code>。</li><li>Mybatis创建了<code>DataSource</code>实例后，会将其放到<code>Configuration</code> 对象内的<code>Environment</code>对象中，供以后使用。</li></ul><h3 id="Mybatis连接获取">Mybatis连接获取</h3><ul><li>当我们需要创建<code>SqlSession</code>对象并需要执行SQL语句是，这时Mybatis才会去调用<code>dataSource</code>对象来创建<code>java.sql.Connection</code>对象。也就是说，<code>java.sql.Connection</code>对象的创建一直延迟到执行SQL语句的时候。</li><li>数据库连接是宝贵的资源，只有在要用到的时候，才会获取并打开连接，当用完后就立即将数据库连接归还到连接池中。</li></ul><h2 id="Mybatis事务控制">Mybatis事务控制</h2><h3 id="手动提交和回滚">手动提交和回滚</h3><p>Mybatis是通过<code>SqlSession</code>对象的<code>commit()</code>方法和<code>rollback()</code>方法实现事务的提交和回滚</p><h3 id="自动提交">自动提交</h3><ul><li>在Mybatis默认不自动提交</li><li>在Mybatis中可以通过<code>SqlSessionFactory</code>的<code>openSession(true)</code>来设置事务自动提交。</li><li>设置自动提交在开发中并不常用，设置为自动提交方式为false再根据情况决定是否进行提交的更常用。</li></ul><h3 id="本质">本质</h3><p>Mybatis中事务的提交方式的本质</p><ul><li>手动提交和回滚：调用JDBC中<code>Connection</code>的<code>commit()</code>和<code>rollback()</code>方法来实现</li><li>自动提交：调用JDBC中<code>Connection</code>的<code>setAutoCommit(true)</code>方法来实现</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>03-Mybatis基于XML的单表CRUD</title>
    <link href="https://www.hardape.top/article/723fdccd.html"/>
    <id>https://www.hardape.top/article/723fdccd.html</id>
    <published>2020-06-24T14:15:32.000Z</published>
    <updated>2020-06-24T15:30:19.169Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="基于代理Mapper的CRUD">基于代理Mapper的CRUD</h2><h3 id="根据ID查询">根据ID查询</h3><h4 id="持久层接口添加方法">持久层接口添加方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据用户ID查询</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射配置文件添加配置">映射配置文件添加配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据ID查询用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">     select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>parameterType</code>属性：用于指定传入参数的类型</li><li><code>resultType</code>属性：用于执行结果集的类型。</li><li>sql语句中使用<code>#{}</code>字符：<ul><li>代表占位符，相当于JDBC中的<code>?</code>，都是用于执行语句时替换实际的数据</li><li>具体的数据是由<code>#{}</code>里面的内容决定的。</li><li>由于数据类型是基本类型，所以<code>#{}</code>中的内容此处可以随意写</li></ul></li></ul><h4 id="在测试类中使用单元测试">在测试类中使用单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 在测试方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 在测试方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIdTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = mapper.findById(<span class="number">3</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="保存操作">保存操作</h3><h4 id="持久层接口添加方法-v2">持久层接口添加方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 保存用户信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> user 要保存的用户</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射配置文件添加配置-v2">映射配置文件添加配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插入新的用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"top.hardape.domain.User"</span> &gt;</span></span><br><span class="line">    insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>parameterType</code>属性：代表参数的类型，由于此时传入的是一个自定义类，所以类型要写全限定类名。</li><li><code>#{}</code>中内容的写法：由于此时的参数是一个User对象，此处要写User对象中的属性名。它用的是<code>OGNL</code>表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 在测试方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 在测试方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 事务提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"新人"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"遥远的地方"</span>);</span><br><span class="line">        System.out.println(<span class="string">"保存之前:"</span> + user);</span><br><span class="line">        <span class="keyword">int</span> result = mapper.saveUser(user);</span><br><span class="line">        System.out.println(<span class="string">"保存之后:"</span> + user);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：实现增删改时要控制事务的提交，即使用<code>session.commit()</code>来实现事务提交，否则数据会自动回滚。</p><h4 id="扩展-获取新增用户的id">扩展-获取新增用户的id</h4><p>新增用户后，同时还要返回当前新增用户的的id值，由于id是由数据库的自动增长来实现的，所以就相当于在新增后将自动增长<code>auto_increment</code>的值返回，封装到插入方法的参数<code>User</code>上，在<code>MySql</code>中使用<code>last_insert_id()</code>实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插入新的用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"top.hardape.domain.User"</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置保存时获取插入的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">        select last_insert_id()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>keyProperty</code>：实体类的属性名</li><li><code>keyColumn</code>：数据库表的列名</li><li><code>resultType</code>：返回值类型</li><li><code>order</code>：在何时执行<ul><li><code>BEFORE</code>：在插入之前执行</li><li><code>AFTER</code>：在插入之后执行</li></ul></li></ul><h3 id="用户更新">用户更新</h3><h4 id="持久层接口添加方法-v3">持久层接口添加方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 更新用户</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> user 新用户信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射配置文件添加配置-v3">映射配置文件添加配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125;, birthday = #&#123;birthday&#125;, sex = #&#123;sex&#125;, address = #&#123;address&#125;</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在测试类中使用单元测试-v2">在测试类中使用单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 在测试方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 在测试方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 事务提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据id查询 User </span></span><br><span class="line">        User user = mapper.findById(<span class="number">1</span>); </span><br><span class="line">        <span class="comment">//2.更新操作 </span></span><br><span class="line">        user.setAddress(<span class="string">"浙江"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = mapper.updateUser(user);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户删除">用户删除</h3><h4 id="持久层接口添加方法-v4">持久层接口添加方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据用户id删除用户</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射配置文件添加配置-v4">映射配置文件添加配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户ID删除信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> &gt;</span></span><br><span class="line">    delete from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在测试类中使用单元测试-v3">在测试类中使用单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 在测试方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 在测试方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 事务提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = mapper.deleteUser(<span class="number">10</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户模糊查询">用户模糊查询</h3><h4 id="持久层接口添加方法-v5">持久层接口添加方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据名称模糊查询</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> username 用户名称</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射配置文件添加配置-v5">映射配置文件添加配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户姓名模糊查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在测试类中使用单元测试-v4">在测试类中使用单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 在测试方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 在测试方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 事务提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByNameTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = mapper.findByName(<span class="string">"%张%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>log4j在控制台输出的SQL语句如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from user where username like ?</span><br><span class="line">==&gt;  Parameters: %张%(String)</span><br></pre></td></tr></table></figure></li><li><p>可以看出，我们没有在配置文件中加入<code>%</code>来作为模糊查询的条件，而是在传入字符串实参时给定模糊查询的标识<code>%</code>，配置文件中的<code>#{username}</code>也只是一个占位符，所以SQL语句显示为<code>?</code></p></li><li><p>推荐使用此方式</p></li></ul><h4 id="模糊查询的另一种方式">模糊查询的另一种方式</h4><p>修改映射配置文件中的配置，使用<code>${}</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户姓名模糊查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where username like '%$&#123;username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改测试类中的单元测试，在传参时不需要给定模糊查询的标识<code>%</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByNameTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = mapper.findByName(<span class="string">"张"</span>);</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>log4j在控制台输入的SQL语句如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from user where username like '%张%'</span><br><span class="line">==&gt;  Parameters:</span><br></pre></td></tr></table></figure></li><li><p>可以看出，该方式是使用字符串拼接SQL语句，可能存在SQL注入的风险</p></li><li><p>不推荐使用此方式</p></li></ul><h3 id="查询使用聚合函数">查询使用聚合函数</h3><h4 id="持久层接口添加方法-v6">持久层接口添加方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询总用户数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findCount</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射配置文件添加配置-v6">映射配置文件添加配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询总用户数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCount"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select count(*) from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在测试类中使用单元测试-v5">在测试类中使用单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 在测试方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 在测试方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 事务提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findCountTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = mapper.findCount();</span><br><span class="line">        System.out.println(<span class="string">"总用户数:"</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作标签的属性">操作标签的属性</h2><h3 id="parameterType属性">parameterType属性</h3><h4 id="概述">概述</h4><ul><li><code>parameterType</code>属性用于指定传入参数的类型</li><li>该属性的取值可以是基本类型，引用类型，还可以是实体类类型，同时也可以使用实体类的包装类。</li><li>Mybatis使用<code>ognl</code>表达式解析对象字段的值，<code>#{}</code>或者<code>${}</code>括号中的值为实体类属性名称。</li></ul><h4 id="OGNL表达式">OGNL表达式</h4><p><code>OGNL</code>表达式：<code>Object Graphic Navigation Langauage</code>。即对象图导航语言，它是apache提供的一种表达式语言。</p><ul><li>它是按照一定的语法格式来获取数据的</li><li>语法格式使用<code>#{对象.属性}</code>的方式，在mybatis中可以直接写<code>#{属性}</code></li><li><code>#{user.username}</code>会先去找user对象，然后在user对象中找到username属性，并调用对应的<code>getter</code>方法（即<code>getUsername()</code>）把值取出来，但是由于在<code>parameterType</code>属性上指定了实体类名称，所有可以省略user，而直接写<code>#{username}</code></li></ul><h4 id="和">#{}和${}</h4><ul><li><code>#{}</code>表示一个占位符，可以实现<code>praparedStatement</code>向占位符中设置值。自动进行java类型和jdbc类型转换，<code>#{}</code>可以有效防止sql注入，可以接受简单类型值或pojo属性值。</li><li><code>${}</code>表示拼接sql串，<code>#{}</code>存在sql注入的风险，可以接受简单类型值或pojo属性值。</li><li>当<code>parameterType</code>中传入单个简单类型值时，<code>#{}</code>和<code>${}</code>括号内的值可以是任意标识符</li></ul><h4 id="类型说明">类型说明</h4><ul><li><p>在<code>parameterType</code>中，基本类型和内置的引用类型可以直接写类型名，也可以使用<code>包名.类名</code>的方式，因为mybatis在加载时已经把常用的数据类型注册了别名。</p></li><li><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是<strong>不区分大小写</strong>的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th style="text-align:left">别名</th><th style="text-align:left">映射的类型</th></tr></thead><tbody><tr><td style="text-align:left">_byte</td><td style="text-align:left">byte</td></tr><tr><td style="text-align:left">_long</td><td style="text-align:left">long</td></tr><tr><td style="text-align:left">_short</td><td style="text-align:left">short</td></tr><tr><td style="text-align:left">_int</td><td style="text-align:left">int</td></tr><tr><td style="text-align:left">_integer</td><td style="text-align:left">int</td></tr><tr><td style="text-align:left">_double</td><td style="text-align:left">double</td></tr><tr><td style="text-align:left">_float</td><td style="text-align:left">float</td></tr><tr><td style="text-align:left">_boolean</td><td style="text-align:left">boolean</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left">String</td></tr><tr><td style="text-align:left">byte</td><td style="text-align:left">Byte</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">Long</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">Short</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">Integer</td></tr><tr><td style="text-align:left">integer</td><td style="text-align:left">Integer</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">Double</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">Float</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">Boolean</td></tr><tr><td style="text-align:left">date</td><td style="text-align:left">Date</td></tr><tr><td style="text-align:left">decimal</td><td style="text-align:left">BigDecimal</td></tr><tr><td style="text-align:left">bigdecimal</td><td style="text-align:left">BigDecimal</td></tr><tr><td style="text-align:left">object</td><td style="text-align:left">Object</td></tr><tr><td style="text-align:left">map</td><td style="text-align:left">Map</td></tr><tr><td style="text-align:left">hashmap</td><td style="text-align:left">HashMap</td></tr><tr><td style="text-align:left">list</td><td style="text-align:left">List</td></tr><tr><td style="text-align:left">arraylist</td><td style="text-align:left">ArrayList</td></tr><tr><td style="text-align:left">collection</td><td style="text-align:left">Collection</td></tr><tr><td style="text-align:left">iterator</td><td style="text-align:left">Iterator</td></tr></tbody></table></li><li><p>对于自定义的实体类，如果没有在全局配置文件中注册实体类的别名，必须写全限定类名。</p></li></ul><h4 id="传递实体类的包装对象">传递实体类的包装对象</h4><ul><li>开发中通过实体类传递查询条件，如果查询条件是综合的查询条件，不仅包括用户查询条件还包括其他的查询条件，那么这时可以使用包装对象传递输入参数。</li><li>下面可以入门案例为例，要求根据用户名查询用户信息，查询条件放到<code>QueryVo</code>包装类的<code>user</code>属性中。</li></ul><p>编写<code>QueryVo</code>包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据QueryVo中的条件查询用户</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> queryVo</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByVo</span><span class="params">(QueryVo queryVo)</span></span>;</span><br></pre></td></tr></table></figure><p>映射配置文件添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户名称模糊查询，参数变成一个QueryVo对象了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByVo"</span> <span class="attr">parameterType</span>=<span class="string">"top.hardape.domain.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;user.username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在测试类中使用单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 在测试方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 在测试方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 事务提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByVoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryVo queryVo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"%张%"</span>);</span><br><span class="line">        queryVo.setUser(user);</span><br><span class="line">        List&lt;User&gt; users = mapper.findByVo(queryVo);</span><br><span class="line">        <span class="keyword">for</span> (User u: users) &#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resultType属性">resultType属性</h3><h4 id="概述-v2">概述</h4><ul><li><code>resultType</code>属性可以指定结果集的类型，它支持基本类型和实体类类型</li><li>它和<code>parameterType</code>一样，如果注册过类型别名的，可以直接使用别名。没有注册过的必须使用全限定类名。</li></ul><h4 id="类型说明-v2">类型说明</h4><ul><li><p>当<code>resultType</code>值为实体类名时，实体类中的属性名建议和查询语句中的列名保持一致，否则无法实现封装。</p></li><li><p>在<code>windows</code>系统中，mysql语句不区分大小写，也就是实体类的属性名和查询语句中的列名大小写可以不一致，但在<code>Linux</code>系统中mysql是严格区分大小写的，故建议严格一致</p></li><li><p>如果，实体类中的属性名建议和查询语句中的列名不一致，有两种解决方案：</p><ul><li><p>使用sql语句中的别名查询，该方式由于在sql语句的层面上解决问题，执行效率高，但书写麻烦，即开发效率低。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置查询所有操作 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span> </span><br><span class="line">    select id as userId,username as userName,birthday as userBirthday, sex as userSex,address as userAddress from user </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>resultMap</code>标签建立对应关系，并在<code>resultMap</code>属性中引用，无需改动sql语句。该方式由于需要多解析一段xml，执行效率低，但书写简便，即开发效率高。</p></li></ul></li></ul><h3 id="resultMap属性">resultMap属性</h3><p><code>resultMap</code>属性用于引用建立对应关系的<code>resultMap</code>标签</p><h2 id="resultMap标签">resultMap标签</h2><h3 id="概述-v3">概述</h3><p><code>resultMap</code>标签可以在查询的列名和实体类的属性名不一致时建立对应关系，从而实现封装。</p><h3 id="使用">使用</h3><h4 id="属性">属性</h4><ul><li><code>type</code> 属性：指定实体类的全限定类名，如果注册了别名可使用别名</li><li><code>id</code> 属性：给定一个唯一标识，用于给操作标签（如<code>select</code>）引用</li></ul><h4 id="子标签">子标签</h4><ul><li><code>id</code>标签：用于指定主键字段<ul><li><code>column</code> 属性：用于指定数据库列名</li><li><code>property</code> 属性：用于指定实体类属性名</li></ul></li><li><code>result</code> 标签：用于指定非主键字段<ul><li><code>column</code> 属性：用于指定数据库列名</li><li><code>property</code> 属性：用于指定实体类属性名</li></ul></li></ul><h4 id="定义和引用">定义和引用</h4><ul><li><code>resultMap</code>标签在映射配置文件中的<code>mapper</code>标签中定义</li><li>在操作标签（如<code>select</code>）的<code>resultMap</code>属性引用<code>resultMap</code>标签的<code>id</code>属性值即可</li></ul><h4 id="实例">实例</h4><p>查询所有用户信息，映射配置文件的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.hardape.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 建立User实体和数据库表的对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键字段的对应 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 非主键字段的对应 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"userBirthday"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"userSex"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"userAddress"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引用resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于Dao实现类的CRUD-了解">基于Dao实现类的CRUD(了解)</h2><h3 id="概述-v4">概述</h3><ul><li>使用Mybatis开发数据访问层，通常有两个方法，即原始实现Dao开发方式和Mapper接口代理开发方式。而现在主流的开发方式是接口代理开发方式，总体上更加简便。故基于Dao实现类的CRUD这部分了解即可。</li><li>核心内容为<code>SqlSession</code>对象的CRUD方法<ul><li><code>selectList</code>：查询多条记录</li><li><code>selectOne</code>：查询单条记录</li><li><code>insert</code>：插入记录</li><li><code>update</code>：更新记录</li><li><code>delete</code>：删除记录</li></ul></li></ul><h3 id="实例-v2">实例</h3><h4 id="持久层接口">持久层接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 要保存的用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 新用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询总用户数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">findCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="持久层接口实现类">持久层接口实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserMapperImpl</span><span class="params">(SqlSessionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        User user = session.selectOne(<span class="string">"top.hardape.mapper.UserMapper.findById"</span>,userId);</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="keyword">int</span> result = session.insert(<span class="string">"top.hardape.mapper.UserMapper.saveUser"</span>, user);</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="keyword">int</span> result = session.update(<span class="string">"top.hardape.mapper.UserMapper.updateUser"</span>, user);</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="keyword">int</span> result = session.update(<span class="string">"top.hardape.mapper.UserMapper.deleteUser"</span>, userId);</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        List&lt;User&gt; users = session.selectList(<span class="string">"top.hardape.mapper.UserMapper.findByName"</span>, username);</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="keyword">int</span> result = session.selectOne(<span class="string">"top.hardape.mapper.UserMapper.findCount"</span>);</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="映射配置文件">映射配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.hardape.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据ID查询用户信息 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 插入新的用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"top.hardape.domain.User"</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置保存时获取插入的id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">            select last_insert_id()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 更新用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;, birthday = #&#123;birthday&#125;, sex = #&#123;sex&#125;, address = #&#123;address&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户ID删除信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> &gt;</span></span><br><span class="line">        delete from user where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户姓名模糊查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where username like #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询总用户数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCount"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select count(*) from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类-单元测试">测试类(单元测试)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  InputStream in;</span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        mapper = <span class="keyword">new</span> UserMapperImpl(factory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByIdTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = mapper.findById(<span class="number">3</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"新人"</span>);</span><br><span class="line">        user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">        user.setSex(<span class="string">"男"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"遥远的地方"</span>);</span><br><span class="line">        System.out.println(<span class="string">"保存之前:"</span> + user);</span><br><span class="line">        <span class="keyword">int</span> result = mapper.saveUser(user);</span><br><span class="line">        System.out.println(<span class="string">"保存之后:"</span> + user);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.根据id查询 User</span></span><br><span class="line">        User user = mapper.findById(<span class="number">12</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//2.更新操作</span></span><br><span class="line">        user.setAddress(<span class="string">"浙江"</span>);</span><br><span class="line">        <span class="keyword">int</span> result = mapper.updateUser(user);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = mapper.deleteUser(<span class="number">12</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByNameTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = mapper.findByName(<span class="string">"%张%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findCountTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = mapper.findCount();</span><br><span class="line">        System.out.println(<span class="string">"总用户数:"</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis主配置文件详解">Mybatis主配置文件详解</h2><h3 id="配置内容和顺序">配置内容和顺序</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">configuration(根标签)</span><br><span class="line">    properties(属性)</span><br><span class="line">        property</span><br><span class="line">    settings(全局配置参数)</span><br><span class="line">        setting</span><br><span class="line">    typeAliases(类型别名)</span><br><span class="line">        typeAliase</span><br><span class="line">        package</span><br><span class="line">    typeHandlers(类型处理器)</span><br><span class="line">    objectFactory(对象工厂)</span><br><span class="line">    plugins(插件)</span><br><span class="line">    environments(环境集合属性对象)</span><br><span class="line">        environments(环境子属性对象)</span><br><span class="line">            transactionManager(事务管理)</span><br><span class="line">            dataSource(数据源)</span><br><span class="line">    mappers(映射器)</span><br><span class="line">        mapper</span><br><span class="line">        package</span><br></pre></td></tr></table></figure><h3 id="properties标签">properties标签</h3><h4 id="概述-v5">概述</h4><ul><li><code>properties</code>标签用于属性的的配置，这些属性可以在外部进行配置，并可以进行动态替换，设置好的属性可以在整个配置文件中通过<code>${}</code>用来替换需要动态配置的属性值</li><li>既可以在典型的 Java 属性文件（<code>.properties</code>）中配置这些属性，也可以在 <code>properties </code>元素的子元素<code>property</code>中设置</li></ul><h4 id="属性和子标签">属性和子标签</h4><ul><li>属性<ul><li><code>resource</code>属性：用于指定<code>properties</code>配置文件的位置，要求配置文件必须在类路径下</li><li><code>url</code>属性：用于指定<code>properties</code>配置文件的URL，即统一资源定位符（包括 <code>file:///</code> 形式的 URL）</li></ul></li><li>子标签<code>property</code><ul><li><code>name</code>属性：配置的属性名</li><li><code>value</code>属性：配置的属性值</li></ul></li></ul><h4 id="配置">配置</h4><ul><li><p>在 <code>properties </code>元素的子元素<code>property</code>中设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_test"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>或者在classpath下定义<code>JdbcConfig.properties</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_test</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>在 <code>properties </code>元素的<code>resource</code>属性指定配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"JdbcConfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用统一限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=<span class="string">"file:///D:/JdbcConfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="使用-v2">使用</h4><p>在数据源标签<code>dataSource</code>使用<code>${}</code>设置动态配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="typeAliases标签">typeAliases标签</h3><h4 id="概述-v6">概述</h4><ul><li><code>typeAliases</code>用于给数据类型注册别名，即可为 Java 类型设置一个缩写名字</li><li>在该项目下的映射配置文件中需要配置类名的地方（<code>parameterType</code>、<code>resultType</code>等）都可以替换为注册的别名</li><li>当指定了别名后就<strong>不区分大小写</strong></li></ul><h4 id="子标签-v2">子标签</h4><ul><li><code>typeAlias</code>标签：用于单个别名定义<ul><li><code>type</code>属性：要注册别名java类型的全限定类名</li><li><code>name</code>属性：设置的别名</li></ul></li><li><code>package</code>标签：批量别名定义，扫描整个包下的类，别名为类名（大小写不敏感）<ul><li><code>name</code>属性：指定的包名</li></ul></li></ul><h4 id="实例-v3">实例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 单个别名定义 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"top.hardape.domain.User"</span>/&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.hardape.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mappers标签">Mappers标签</h3><h4 id="概述-v7">概述</h4><p><code>Mappers</code>标签用于</p><ul><li>配置相对于类路径下的映射配置文件资源路径</li><li>或注解所在的mapper接口的全限定类名</li></ul><h4 id="子标签-v3">子标签</h4><ul><li><code>mapper</code>标签：用于配置映射资源<ul><li><code>resource</code>属性：配置相对于类路径下的映射配置文件资源路径（xml文件）</li><li><code>class</code>属性：配置映射器接口实现类的完全限定类名（注解）</li><li><code>url</code>属性：配置统一限定资源定位符（xml文件）</li></ul></li><li><code>package</code>标签：将包内的映射器接口实现全部注册为映射器（xml文件或注解）<ul><li><code>name</code>属性：配置的包名</li></ul></li></ul><h4 id="实例-v4">实例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"top/hardape/mapper/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"top/hardape/mapper/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"top/hardape/mapper/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用统一限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///D:/mapper/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///D:/mapper/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///D:/mapper/PostMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span></span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"top.hardape.mapper.AuthorMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"top.hardape.mapper.BlogMapper"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"top.hardape.mapper.PostMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"top.hardape.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>02-自定义Mybatis框架</title>
    <link href="https://www.hardape.top/article/345f744d.html"/>
    <id>https://www.hardape.top/article/345f744d.html</id>
    <published>2020-06-24T14:05:17.000Z</published>
    <updated>2020-06-24T15:06:36.212Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="概述">概述</h2><p>通过构建自定义的简易 Mybatis 框架，有助于强化设计模式、放射、注解、解析xml的使用，同时对mybatis的原理有了基本的认知，虽然自定义的Mybatis框架和真正的 Mybatis 框架相比显得很渺小。</p><h2 id="分析">分析</h2><h3 id="信息封装">信息封装</h3><p>需要将读取配置文件的信息封装起来管理，主要信息有两个：<strong>映射信息</strong>和<strong>数据库连接信息</strong></p><h4 id="映射信息">映射信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.hardape.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>包含了两个部分：<strong>执行的SQL语句</strong>（<code>select * from user</code>）和<strong>封装结果实体类的全限定类名</strong>（<code>top.hardape.domain.User</code>），把这两个信息组合起来定义成一个对象<code>Mapper</code></li><li>要想唯一定位这两个信息，需找到mapper接口的全限定类名即<code>mapper</code>标签的<code>namespace</code>属性，和接口的方法名即<code>select</code>标签的<code>id</code>属性。</li><li>故使用<code>Map</code>集合来存储映射信息，<code>Map</code>的键为接口全限定名+方法名（<code>top.hardape.mapper.UserMapper.findAll</code>），值为对象<code>Mapper</code>。</li></ul><h4 id="数据库连接信息">数据库连接信息</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_test"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>将四个连接信息和映射信息封装成一个对象<code>Configuration</code></p><h3 id="流程分析">流程分析</h3><p>mybatis在使用代理mapper的方式实现查询时时做了两件事：<strong>创建代理对象</strong>和在<strong>代理对象中调用<code>selectList</code></strong></p><h4 id="创建代理对象">创建代理对象</h4><ul><li>根据mapper接口的字节码创建mapper的代理对象</li><li>使用JDK动态代理</li></ul><h4 id="selectList流程">selectList流程</h4><ul><li>读取配置文件：用到的技术就是解析XML的技术，此处用到的是<code>dom4j</code>解析<code>xml</code></li><li>根据配置文件的信息创建<code>Connection</code>对象，注册驱动，获取连接</li><li>获取预处理对象PreparedStatement，此时需要SQL语句</li><li>执行查询</li><li>遍历结果集用于封装List集合，通过反射获取集合泛型的具体类型</li></ul><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/%E8%87%AA%E5%AE%9A%E4%B9%89mybatis%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="自定义mybatis开发流程图"></p><h2 id="实现">实现</h2><h3 id="前期准备">前期准备</h3><p>引入相关jar包或坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解析xml的dom4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dom4j的依赖包jaxen --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现代码">实现代码</h3><h4 id="读取配置文件">读取配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用类加载器读取配置文件的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resources</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，获取一个字节输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Resources<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">getResourceAsStream</span>(<span class="title">filePath</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信息封装-v2">信息封装</h4><p><code>Mapper</code>封装映射信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于封装执行的SQL语句和结果类型的全限定类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String queryString; <span class="comment">// SQL语句</span></span><br><span class="line">    <span class="keyword">private</span> String resultType;  <span class="comment">// 实体类的全限定类名</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQueryString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queryString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueryString</span><span class="params">(String queryString)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queryString = queryString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultType</span><span class="params">(String resultType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resultType = resultType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>]Configuration</code>封装数据库连接信息和映射信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义mybatis的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Mapper&gt; <span class="title">getMappers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mappers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMappers</span><span class="params">(Map&lt;String, Mapper&gt; mappers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappers.putAll(mappers); <span class="comment">// 此时需要使用追加的方式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriver</span><span class="params">(String driver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="底层执行器">底层执行器</h4><p>负责执行SQL语句，并且封装结果集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.config.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责执行SQL语句，并且封装结果集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(Mapper mapper, Connection conn)</span> </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.取出mapper中的数据</span></span><br><span class="line">            String queryString = mapper.getQueryString();<span class="comment">//select * from user</span></span><br><span class="line">            String resultType = mapper.getResultType();<span class="comment">//com.itheima.domain.User</span></span><br><span class="line">            Class domainClass = Class.forName(resultType);</span><br><span class="line">            <span class="comment">//2.获取PreparedStatement对象</span></span><br><span class="line">            pstm = conn.prepareStatement(queryString);</span><br><span class="line">            <span class="comment">//3.执行SQL语句，获取结果集</span></span><br><span class="line">            rs = pstm.executeQuery();</span><br><span class="line">            <span class="comment">//4.封装结果集</span></span><br><span class="line">            List&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;E&gt;();<span class="comment">//定义返回值</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">                <span class="comment">//实例化要封装的实体类对象</span></span><br><span class="line">                E obj = (E)domainClass.newInstance();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//取出结果集的元信息：ResultSetMetaData</span></span><br><span class="line">                ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">                <span class="comment">//取出总列数</span></span><br><span class="line">                <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line">                <span class="comment">//遍历总列数</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">//获取每列的名称，列名的序号是从1开始的</span></span><br><span class="line">                    String columnName = rsmd.getColumnName(i);</span><br><span class="line">                    <span class="comment">//根据得到列名，获取每列的值</span></span><br><span class="line">                    Object columnValue = rs.getObject(columnName);</span><br><span class="line">                    <span class="comment">//给obj赋值：使用Java内省机制（借助PropertyDescriptor实现属性的封装）</span></span><br><span class="line">                    PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(columnName,domainClass);<span class="comment">//要求：实体类的属性和数据库表的列名保持一种</span></span><br><span class="line">                    <span class="comment">//获取它的写入方法</span></span><br><span class="line">                    Method writeMethod = pd.getWriteMethod();</span><br><span class="line">                    <span class="comment">//把获取的列的值，给对象赋值</span></span><br><span class="line">                    writeMethod.invoke(obj,columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//把赋好值的对象加入到集合中</span></span><br><span class="line">                list.add(obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            release(pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(PreparedStatement pstm,ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pstm != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pstm.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDK代理">JDK代理</h4><p>InvocationHandler实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.sqlsession.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.config.Mapper;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.utils.Executor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Mapper&gt; mappers;</span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperProxy</span><span class="params">(Map&lt;String, Mapper&gt; mappers, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mappers = mappers;</span><br><span class="line">        <span class="keyword">this</span>.conn = conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于对方法进行增强的，我们的增强其实就是调用selectList方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 获取方法名</span></span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="comment">// 获取方法所在类的名称</span></span><br><span class="line">        String className = method.getDeclaringClass().getName();</span><br><span class="line">        <span class="comment">// 组合key</span></span><br><span class="line">        String key = className + <span class="string">"."</span> + methodName;</span><br><span class="line">        <span class="comment">// 获取mappers中的Mapper对象</span></span><br><span class="line">        Mapper mapper = mappers.get(key);</span><br><span class="line">        <span class="keyword">if</span>(mapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"传入的参数有误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行所有</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Executor().selectList(mapper,conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取连接">获取连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.config.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于获取一个连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cfg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(cfg.getDriver());</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(cfg.getUrl(), cfg.getUsername(), cfg.getPassword());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SqlSession">SqlSession</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Mybatis中和数据库交互的核心类</span></span><br><span class="line"><span class="comment"> * 它里面可以创建mapper接口的代理对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数创建一个代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapperClass mapper接口的字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; mapperClass)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.sqlsession.defaults;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.sqlsession.SqlSession;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.sqlsession.proxy.MapperProxy;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.utils.DataSourceUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSession接口的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg;</span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultSqlSession</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cfg = cfg;</span><br><span class="line">        conn = DataSourceUtil.getConnection(cfg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapperClass mapper接口的字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; mapperClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperClass.getClassLoader(),<span class="keyword">new</span> Class[]&#123;mapperClass&#125;,<span class="keyword">new</span> MapperProxy(cfg.getMappers(),conn));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SqlSessionFactory">SqlSessionFactory</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.sqlsession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建SqlSession的工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于打开一个新的SqlSession对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.sqlsession.defaults;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.sqlsession.SqlSession;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.sqlsession.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSessionFactory的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultSqlSessionFactory</span><span class="params">(Configuration cfg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cfg = cfg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建一个新的操作数据库对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(cfg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="select注解">select注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.anntations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询的注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Select &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置SQL语句的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解析配置文件和注解">解析配置文件和注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Attribute;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.anntations.Select;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.config.Mapper;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用于解析配置文件和注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLConfigBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析主配置文件，把里面的内容填充到DefaultSqlSession所需要的地方</span></span><br><span class="line"><span class="comment">     * 使用的技术：</span></span><br><span class="line"><span class="comment">     *      dom4j+xpath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Configuration <span class="title">loadConfiguration</span><span class="params">(InputStream config)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//定义封装连接信息的配置对象（mybatis的配置对象）</span></span><br><span class="line">            Configuration cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取SAXReader对象</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            <span class="comment">//2.根据字节输入流获取Document对象</span></span><br><span class="line">            Document document = reader.read(config);</span><br><span class="line">            <span class="comment">//3.获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//4.使用xpath中选择指定节点的方式，获取所有property节点</span></span><br><span class="line">            List&lt;Element&gt; propertyElements = root.selectNodes(<span class="string">"//property"</span>);</span><br><span class="line">            <span class="comment">//5.遍历节点</span></span><br><span class="line">            <span class="keyword">for</span>(Element propertyElement : propertyElements)&#123;</span><br><span class="line">                <span class="comment">//判断节点是连接数据库的哪部分信息</span></span><br><span class="line">                <span class="comment">//取出name属性的值</span></span><br><span class="line">                String name = propertyElement.attributeValue(<span class="string">"name"</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"driver"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//表示驱动</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String driver = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setDriver(driver);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"url"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//表示连接字符串</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String url = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setUrl(url);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"username"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//表示用户名</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String username = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setUsername(username);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"password"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//表示密码</span></span><br><span class="line">                    <span class="comment">//获取property标签value属性的值</span></span><br><span class="line">                    String password = propertyElement.attributeValue(<span class="string">"value"</span>);</span><br><span class="line">                    cfg.setPassword(password);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//取出mappers中的所有mapper标签，判断他们使用了resource还是class属性</span></span><br><span class="line">            List&lt;Element&gt; mapperElements = root.selectNodes(<span class="string">"//mappers/mapper"</span>);</span><br><span class="line">            <span class="comment">//遍历集合</span></span><br><span class="line">            <span class="keyword">for</span>(Element mapperElement : mapperElements)&#123;</span><br><span class="line">                <span class="comment">//判断mapperElement使用的是哪个属性</span></span><br><span class="line">                Attribute attribute = mapperElement.attribute(<span class="string">"resource"</span>);</span><br><span class="line">                <span class="keyword">if</span>(attribute != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"使用的是XML"</span>);</span><br><span class="line">                    <span class="comment">//表示有resource属性，用的是XML</span></span><br><span class="line">                    <span class="comment">//取出属性的值</span></span><br><span class="line">                    String mapperPath = attribute.getValue();<span class="comment">//获取属性的值"com/itheima/dao/IUserDao.xml"</span></span><br><span class="line">                    <span class="comment">//把映射配置文件的内容获取出来，封装成一个map</span></span><br><span class="line">                    Map&lt;String, Mapper&gt; mappers = loadMapperConfiguration(mapperPath);</span><br><span class="line">                    <span class="comment">//给configuration中的mappers赋值</span></span><br><span class="line">                    cfg.setMappers(mappers);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"使用的是注解"</span>);</span><br><span class="line">                    <span class="comment">//表示没有resource属性，用的是注解</span></span><br><span class="line">                    <span class="comment">//获取class属性的值</span></span><br><span class="line">                    String daoClassPath = mapperElement.attributeValue(<span class="string">"class"</span>);</span><br><span class="line">                    <span class="comment">//根据daoClassPath获取封装的必要信息</span></span><br><span class="line">                    Map&lt;String,Mapper&gt; mappers = loadMapperAnnotation(daoClassPath);</span><br><span class="line">                    <span class="comment">//给configuration中的mappers赋值</span></span><br><span class="line">                    cfg.setMappers(mappers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//返回Configuration</span></span><br><span class="line">            <span class="keyword">return</span> cfg;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                config.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，解析XML，并且封装到Map中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapperPath    映射配置文件的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  map中包含了获取的唯一标识（key是由dao的全限定类名和方法名组成）</span></span><br><span class="line"><span class="comment">     *          以及执行所需的必要信息（value是一个Mapper对象，里面存放的是执行的SQL语句和要封装的实体类全限定类名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Mapper&gt; <span class="title">loadMapperConfiguration</span><span class="params">(String mapperPath)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//定义返回值对象</span></span><br><span class="line">            Map&lt;String,Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String,Mapper&gt;();</span><br><span class="line">            <span class="comment">//1.根据路径获取字节输入流</span></span><br><span class="line">            in = Resources.getResourceAsStream(mapperPath);</span><br><span class="line">            <span class="comment">//2.根据字节输入流获取Document对象</span></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(in);</span><br><span class="line">            <span class="comment">//3.获取根节点</span></span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            <span class="comment">//4.获取根节点的namespace属性取值</span></span><br><span class="line">            String namespace = root.attributeValue(<span class="string">"namespace"</span>);<span class="comment">//是组成map中key的部分</span></span><br><span class="line">            <span class="comment">//5.获取所有的select节点</span></span><br><span class="line">            List&lt;Element&gt; selectElements = root.selectNodes(<span class="string">"//select"</span>);</span><br><span class="line">            <span class="comment">//6.遍历select节点集合</span></span><br><span class="line">            <span class="keyword">for</span>(Element selectElement : selectElements)&#123;</span><br><span class="line">                <span class="comment">//取出id属性的值      组成map中key的部分</span></span><br><span class="line">                String id = selectElement.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">                <span class="comment">//取出resultType属性的值  组成map中value的部分</span></span><br><span class="line">                String resultType = selectElement.attributeValue(<span class="string">"resultType"</span>);</span><br><span class="line">                <span class="comment">//取出文本内容            组成map中value的部分</span></span><br><span class="line">                String queryString = selectElement.getText();</span><br><span class="line">                <span class="comment">//创建Key</span></span><br><span class="line">                String key = namespace+<span class="string">"."</span>+id;</span><br><span class="line">                <span class="comment">//创建Value</span></span><br><span class="line">                Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                mapper.setQueryString(queryString);</span><br><span class="line">                mapper.setResultType(resultType);</span><br><span class="line">                <span class="comment">//把key和value存入mappers中</span></span><br><span class="line">                mappers.put(key,mapper);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mappers;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据传入的参数，得到dao中所有被select注解标注的方法。</span></span><br><span class="line"><span class="comment">     * 根据方法名称和类名，以及方法上注解value属性的值，组成Mapper的必要信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> daoClassPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Mapper&gt; <span class="title">loadMapperAnnotation</span><span class="params">(String daoClassPath)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//定义返回值对象</span></span><br><span class="line">        Map&lt;String,Mapper&gt; mappers = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.得到dao接口的字节码对象</span></span><br><span class="line">        Class daoClass = Class.forName(daoClassPath);</span><br><span class="line">        <span class="comment">//2.得到dao接口中的方法数组</span></span><br><span class="line">        Method[] methods = daoClass.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历Method数组</span></span><br><span class="line">        <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">            <span class="comment">//取出每一个方法，判断是否有select注解</span></span><br><span class="line">            <span class="keyword">boolean</span> isAnnotated = method.isAnnotationPresent(Select<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span>(isAnnotated)&#123;</span><br><span class="line">                <span class="comment">//创建Mapper对象</span></span><br><span class="line">                Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                <span class="comment">//取出注解的value属性值</span></span><br><span class="line">                Select selectAnno = method.getAnnotation(Select<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                String queryString = selectAnno.value();</span><br><span class="line">                mapper.setQueryString(queryString);</span><br><span class="line">                <span class="comment">//获取当前方法的返回值，还要求必须带有泛型信息</span></span><br><span class="line">                Type type = method.getGenericReturnType();<span class="comment">//List&lt;User&gt;</span></span><br><span class="line">                <span class="comment">//判断type是不是参数化的类型</span></span><br><span class="line">                <span class="keyword">if</span>(type <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                    <span class="comment">//强转</span></span><br><span class="line">                    ParameterizedType ptype = (ParameterizedType)type;</span><br><span class="line">                    <span class="comment">//得到参数化类型中的实际类型参数</span></span><br><span class="line">                    Type[] types = ptype.getActualTypeArguments();</span><br><span class="line">                    <span class="comment">//取出第一个</span></span><br><span class="line">                    Class domainClass = (Class)types[<span class="number">0</span>];</span><br><span class="line">                    <span class="comment">//获取domainClass的类名</span></span><br><span class="line">                    String resultType = domainClass.getName();</span><br><span class="line">                    <span class="comment">//给Mapper赋值</span></span><br><span class="line">                    mapper.setResultType(resultType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//组装key的信息</span></span><br><span class="line">                <span class="comment">//获取方法的名称</span></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                String className = method.getDeclaringClass().getName();</span><br><span class="line">                String key = className+<span class="string">"."</span>+methodName;</span><br><span class="line">                <span class="comment">//给map赋值</span></span><br><span class="line">                mappers.put(key,mapper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mappers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SqlSessionFactoryBuilder">SqlSessionFactoryBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mybatis.sqlsession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.sqlsession.defaults.DefaultSqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mybatis.utils.XMLConfigBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建一个SqlSessionFactory对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数的字节输入流来构建一个SqlSessionFactory工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream config)</span> </span>&#123;</span><br><span class="line">        Configuration cfg = XMLConfigBuilder.loadConfiguration(config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(cfg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Mybatis使用">自定义Mybatis使用</h3><p>自定义Mybatis的使用步骤和<a href="https://hardape.top/article/ddd11538.html#%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener">入门案例</a>基本一致，注意在配置文件中不要引入mybatis的dtd约束</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>01-Mybatis入门</title>
    <link href="https://www.hardape.top/article/ddd11538.html"/>
    <id>https://www.hardape.top/article/ddd11538.html</id>
    <published>2020-06-24T14:02:22.000Z</published>
    <updated>2020-06-24T15:03:56.367Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="框架概述">框架概述</h2><h3 id="定义">定义</h3><ul><li><strong>框架，Framework</strong>是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。</li><li>简而言之，框架其实就是某种应用的半成品，就是一组组件，供应用开发者完成自己的系统。而且，框架一般是成熟的，不断升级的软件。</li><li>框架一般处在底层应用平台（如J2EE）和高层业务逻辑之间的中间层。</li><li>框架是软件开发中的一套解决方案，不同的框架解决的是不同的问题，框架封装了很多细节，使开发者可以使用极简的方式实现功能，大大提高开发效率。</li></ul><h3 id="框架要解决的问题">框架要解决的问题</h3><p>框架要解决的最重要的一个问题是<strong>技术整合</strong>的问题。在 J2EE 的框架中，有着各种各样的技术，不同的软件企业需要从 J2EE 中选择不同的技术，这就使得软件企业最终的应用依赖于这些技术，技术自身的复杂性和技术的风险性将会直接对应用造成冲击。而应用时软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设计和具体的实现技术<strong>解耦</strong>。这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。</p><h3 id="软件开发的分层">软件开发的分层</h3><ul><li>框架的重要性在于它实现了部分功能，并且能够很好地将底层应用平台和高层业务逻辑进行了缓和。为了实现软件工程中的**“高内聚、低耦合”**，把问题划分开来各个解决，易于控制，易于延展，易于分配资源。常见的<code>MVC软件设计思想</code>就是很好的分层思想。</li><li>通过分层更好地实现了各个部分的职责，在每一层将再细化出不同的框架，分别解决各层关注的问题。</li><li>三层架构<ul><li>表现层：用于展示数据</li><li>业务层：处理业务需求</li><li>持久层：和数据库交互</li></ul></li></ul><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/mvc-model.png" alt=""></p><h3 id="分层开发下的常见框架">分层开发下的常见框架</h3><ul><li><p>解决数据的持久化问题的框架</p><ul><li><strong>MyBatis</strong></li><li>作为持久层的框架，还有一个封装程度更高的框架就是<code>Hibernate</code>，但这个框架因为各种原因目前在国内的流行程度下降太多，现在公司开发也越来越少使用。</li><li>目前使用<code>Spring Data</code>来实现数据持久化也是一种趋势</li></ul></li><li><p>解决WEB层问题的MVC框架</p><ul><li><strong>Spring MVC</strong></li></ul></li><li><p>解决技术整合问题的框架</p><ul><li><strong>Spring</strong></li></ul></li></ul><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/ssm.jpg" alt=""></p><h2 id="持久层技术解决方案">持久层技术解决方案</h2><ul><li><code>JDBC</code>技术<ul><li>Connection</li><li>PreparedStatement</li><li>ResultSet</li></ul></li><li>Spring的<code>JdbcTemplate</code><ul><li>Spring 中对 Jdbc 的简单封装</li></ul></li><li>Apache的<code>DBUtils</code><ul><li>它和Spring的 JdbcTemplate 很像，也是对 Jdbc 的简单封装</li></ul></li><li>以上这些都不是框架<ul><li>JDBC是规范</li><li>Spring的 JdbcTemplate 和Apache的 DBUtils 都只是工具类</li></ul></li></ul><h2 id="Mybatis与JDBC比较">Mybatis与JDBC比较</h2><h3 id="JDBC">JDBC</h3><ul><li>数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能。</li><li>Sql语句写在java代码中不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码</li><li>向sql语句传参麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数对应。</li><li>对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历。</li></ul><h3 id="Mybatis">Mybatis</h3><ul><li>在主配置文件中配置数据库连接池，使用链接池管理数据库连接。</li><li>将Sql语句配置在映射配置文件中与java代码分离</li><li>自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型</li><li>自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型。</li></ul><h2 id="Mybatis入门">Mybatis入门</h2><h3 id="概述">概述</h3><ul><li><p><code>MyBatis</code>是开源免费框架,原名叫<code>iBatis</code>,2010在<code>google code</code>,2013迁移到<code>github</code></p></li><li><p><code>MyBatis</code>是一个优秀的基于java的持久层框架，它内部封装了<code>JDBC</code>，使开发者只需要关注<code>sql</code>语句本身，而不需要花费精力处理加载驱动、创建连接、创建Statement等繁杂的过程。</p></li><li><p><code>MyBatis</code>通过<code>xml</code>或<code>注解</code>的方式将要执行的各种Statement配置起来，并通过java对象和Statement中sql的动态参数进行映射生成最终执行的sql语句，最后由<code>mybatis</code>框架执行sql并将结果映射为java对象并返回。</p></li><li><p><code>MyBatis</code>采用<code>ORM</code>思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了 jdbc api底层访问细节，使我们不用与jdbc底层打交道，就可以完成对数据库的持久化操作。</p></li><li><p><strong>ORM</strong>：<strong>Object Relational Mapping</strong>，即对象关系映射，简单的说，就是把数据库表和实体类及实体类的属性对应起来，让开发者操作实体类就实现操作数据库表。</p></li></ul><h3 id="使用">使用</h3><h4 id="官网">官网</h4><p><a href="https://mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis官网</a></p><h4 id="安装">安装</h4><p>要使用 <code>MyBatis</code>， 只需将 <a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">mybatis-x.x.x.jar</a> 文件置于类路径（<code>classpath</code>）中即可。</p><p>如果使用 <code>Maven </code>来构建项目，则需将下面的依赖代码置于 <code>pom.xml</code> 文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="环境搭建步骤">环境搭建步骤</h4><ol><li>导入jar包或导入Maven坐标</li><li>创建实体类和mapper持久层接口</li><li>创建Mybatis的主配置文件</li><li>创建映射配置文件</li></ol><h3 id="入门案例">入门案例</h3><p>通过一个查询用户信息的案例快速入门MyBatis。</p><h4 id="数据库">数据库</h4><p>数据库采用mysql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名称'</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生日'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">default</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'地址'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`username`</span>,<span class="string">`birthday`</span>,<span class="string">`sex`</span>,<span class="string">`address`</span>) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'张三'</span>,<span class="string">'1999-02-27'</span>,<span class="string">'男'</span>,<span class="string">'北京'</span>),(<span class="number">2</span>,<span class="string">'李四'</span>,<span class="string">'1997-03-02'</span>,<span class="string">'男'</span>,<span class="string">'上海'</span>),(<span class="number">3</span>,<span class="string">'王五'</span>,<span class="string">'1998-03-04'</span>,<span class="string">'女'</span>,<span class="string">'广州'</span>),(<span class="number">4</span>,<span class="string">'赵六'</span>,<span class="string">'1995-03-04 12:04:06'</span>,<span class="string">'男'</span>,<span class="string">'厦门'</span>),(<span class="number">5</span>,<span class="string">'孙七'</span>,<span class="string">'1999-03-07'</span>,<span class="string">'男'</span>,<span class="string">'北京'</span>),(<span class="number">6</span>,<span class="string">'周八'</span>,<span class="string">'2000-03-08'</span>,<span class="string">'女'</span>,<span class="string">'哈尔滨'</span>);</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200529184610730.png" alt=""></p><h4 id="安装mybatis">安装mybatis</h4><ul><li><p>导入相关<code>jar</code>包</p><p><img src= /img/loading.gif data-src="C:%5CUsers%5Cxin%5CDesktop%5Cmybatis-jar.png" alt="mybatis-jar"></p></li><li><p>如果使用<code>Maven</code>来构建项目，需要导入相关依赖坐标（packaging采用jar）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis坐标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql数据连接坐标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit单元测试坐标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志坐标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="实体类">实体类</h4><p>实体类的属性名和数据库表中的列名相同，且需实现<code>Serializable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体类User</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String username, Date birthday, String sex, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建持久层接口">创建持久层接口</h4><p><code>UserMapper.java</code>即用户持久层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回所有用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建全局配置文件">创建全局配置文件</h4><p>MyBatis全局配置文件，又称为主配置文件或核心配置文件，主要用于配置MyBatis的环境和指定映射配置文件的位置，无文件名要求（xml文件），这里使用<code>SqlMapConfig.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置mybatis环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型,这里使用原生JDBC事务 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源(连接池) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接池数据库的4个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_test"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定 mybatis 映射配置的位置，映射配置文件指的是每个mapper接口独立的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"top/hardape/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建映射配置文件">创建映射配置文件</h4><p><code>UserMapper.xml</code>即映射配置文件，<strong>位置需同Mapper持久层接口的包结构相同，文件名需同Mapper持久层接口名相同</strong>，用于编写需要执行的<code>sql</code>命令。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace属性的值是mapper接口的全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.hardape.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      配置查询所有操作 </span></span><br><span class="line"><span class="comment">       id: 在mapper接口中定义的方法名</span></span><br><span class="line"><span class="comment">       resultType: 方法的返回值类型</span></span><br><span class="line"><span class="comment">       注意:</span></span><br><span class="line"><span class="comment">            如果方法返回值为List集合，在resultType中写List集合中的泛型即User</span></span><br><span class="line"><span class="comment">            的全限定类名，因为MyBatis对JDBC进行封装是一行一行读取数据。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"top.hardape.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注意">注意</h4><ol><li>在<code>MyBatis</code>中把持久层的操作接口名称和映射文件叫做：<code>Mapper</code></li><li><code>MyBatis</code>的映射配置文件位置必须和<code>Mapper</code>接口的包结构相同</li><li>映射配置文件的<code>mapper</code>标签的<code>namespace</code>属性的取值必须是<code>Mapper</code>接口的全限定类名</li><li>映射配置文件的操作配置（如<code>select</code>）中的<code>id</code>属性取值必须是<code>Mapper</code>接口的方法名</li><li>当遵从了2、3、4点后，就无须再写<code>Mapper</code>接口的实现类。</li></ol><h4 id="测试类">测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件</span></span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 2. 创建SqlSessionFactory的构建者对象</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">// 3. 使用构建者创建工厂对象SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = builder.build(is);</span><br><span class="line">        <span class="comment">// 4. 使用SqlSessionFactory生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 5. 使用SqlSession创建Mapper接口的代理对象</span></span><br><span class="line">        UserMapper userMapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 6. 使用代理对象执行查询所有方法</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>读取配置文件不能使用绝对路径和相对路径，绝对路径是基于本台电脑的磁盘，相对路径在web项目部署时<code>src</code>目录会消失，故都不可取，两个方案<ul><li>使用类加载器，它只能读取类路径的配置文件</li><li>使用<code>ServletContext</code>对象的<code>getRealPath</code></li></ul></li><li>创建工厂mybatis使用了<code>构建者模式</code>，把对象的创建细节隐藏，使使用者直接调用方法即可拿到对象。</li><li>生产<code>SqlSession</code>使用了<code>工厂模式</code>，降低了类之间的依赖关系（解耦）</li><li>创建<code>mapper</code>接口实现类使用了<code>代理模式</code>，使得在不修改源码的基础上可以对已有方法增强</li><li>mybatis使用多种设计模式似乎使代码更加复杂，但是同时使得代码更加灵活，每多加一个类和方法都能使我们选择更灵活的配置，选择性更多，如<code>build</code>和<code>openSession</code>方法都有多种重载形式，但在实际开发中与其他框架结合后会更加简便，真正做到mybatis使开发者只需要关注<code>sql</code>语句本身。</li></ul><h4 id="基于注解的入门案例">基于注解的入门案例</h4><ol><li><p>把映射配置文件即<code>UserMapper.xml</code>移除，在持久层接口中使用注解<code>@Select</code>并指定SQL语句代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 所有用户的信息集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需要在全局配置文件<code>SqlMapConfig.xml</code>中的<code>mapper</code>配置时，使用<code>class</code>属性指定<code>mapper</code>接口的全限定类名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"top.hardape.mapper.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="注意-v2">注意</h4><p>在实际开发中，都是越简便越好，所以都是采用不写mapper即 dao 实现类的方式，不管使用 xml 还是注解配置。但是 Mybatis 是支持写 mapper 实现类的。</p><h4 id="写实现类的入门案例-了解">写实现类的入门案例(了解)</h4><p>通过mapper实现类来读取映射配置文件中的sql语句</p><ol><li><p>mapper实现类<code>UserMapperImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.mapper.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> top.hardape.domain.User;</span><br><span class="line"><span class="keyword">import</span> top.hardape.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserMapperImpl</span><span class="params">(SqlSessionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 使用工厂创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 2. 使用session执行查询所有方法</span></span><br><span class="line">        List&lt;User&gt; users = session.selectList(<span class="string">"top.hardape.mapper.UserMapper.findAll"</span>);</span><br><span class="line">        session.close();</span><br><span class="line">        <span class="comment">// 3. 返回查询结果</span></span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类使用mapper实现类的方法来实现查询数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory factory = builder.build(in);</span><br><span class="line">        UserMapperImpl mapper = <span class="keyword">new</span> UserMapperImpl(factory);</span><br><span class="line">        List&lt;User&gt; users = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以发现，通过写mapper实现类也能实现同样功能，但没有必要，这无疑会增加我们的开发负担，通过以上代码可以知道：需要<code>mapper</code>标签的<code>namespace</code>属性和操作标签（如<code>select</code>）的<code>id</code>属性两者才能定位到sql语句。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Mybatis" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://www.hardape.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>02-Spring IoC入门</title>
    <link href="https://www.hardape.top/article/3c844c48.html"/>
    <id>https://www.hardape.top/article/3c844c48.html</id>
    <published>2020-06-19T14:12:12.000Z</published>
    <updated>2020-06-19T14:29:57.843Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="程序的耦合和内聚">程序的耦合和内聚</h2><h3 id="程序的耦合">程序的耦合</h3><h4 id="概述">概述</h4><ul><li>耦合性（<code>Coupling</code>），也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传递的数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差。耦合性存在于各个领域，而非软件设计中独有的，但是我们只讨论软件工程中的耦合。</li><li>在软件工程中，耦合指的就是对象之间的依赖性。对象之间的耦合性越高，维护成本越高。因此对象的设计应使类和构件之间的耦合最小。软件设计中通常用耦合度和内聚度作为衡量模块独立程序的标准。<strong>划分模块的一个准则就是高内聚低耦合（High cohesion and low coupling）</strong></li><li>简单来说，程序的耦合是指程序之间的依赖关系，主要包括类之间的依赖和方法之间的依赖。</li></ul><h4 id="分类">分类</h4><ul><li><strong>内容耦合</strong>：当一个模块直接修改或操作另一个模块的数据时，或一个模块不通过正常入口而转入另一个模块时，这样的耦合被称为内容耦合。内容耦合是最高程度的耦合，应该避免使用。</li><li><strong>公共耦合</strong>：两个或两个以上的二模块共同引用一个全局数据项，这种耦合被称为公共耦合。在具有大量公共耦合的结构中，确定究竟是那个模块给全局变量赋了一个特定的值是十分困难的。</li><li><strong>外部耦合</strong>：一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全部变量的信息，称之为外部耦合。</li><li><strong>控制耦合</strong>：一个模块通过接口向另一个模块传递一个控制信号，接收信号的模块根据信号值而进行适当的动作，这种耦合被称为控制耦合。</li><li><strong>标记耦合</strong>：若一个模块 A 通过接口向两个模块 B 和 C 传递一个公共参数，那么称模块的 B 和 C 之间存在一个标记耦合。</li><li><strong>数据耦合</strong>：模块之间通过参数来传递数据，那么被称为数据耦合。数据耦合是最低的一种耦合形式，系统中一般都存在这种类型的耦合，因为为了完成一些有意义的功能，往往需要将某些模块的输出数据作为另一些模块的输入数据。</li><li><strong>非直接耦合</strong>：两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制的调用来实现的。</li></ul><h4 id="总结">总结</h4><ul><li>耦合是影响软件复杂程度和设计质量的一个重要因素，在设计上应采取以下原则：<strong>如果模块间必须存在耦合，尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，尽量避免使用内容耦合</strong>。</li><li>在实际开发中，应该做到<strong>编译期不依赖，运行时才依赖</strong>。</li></ul><h3 id="程序的内聚">程序的内聚</h3><ul><li>内聚标志一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展。内聚是从功能角度度量模块内的联系，一个好的内聚模块应当恰好做一件事，它描述的是模块内的功能联系。</li><li>程序讲究的是低耦合，高内聚，就是同一个模块内的各个元素之间要高度紧密，但是各个模块之间的相互依存却不要那么紧密。</li></ul><h3 id="解耦的思路">解耦的思路</h3><ol><li>第一步，使用反射来创建对象，而避免使用new关键字</li><li>第二步，通过读取配置文件来获取要创建的对象全限定类名</li></ol><h3 id="工厂模式解耦">工厂模式解耦</h3><ul><li>在实际开发中可以把对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。</li><li>这个读取配置文件，创建和获取对象的类就是工厂。</li><li>该工厂称为<strong>创建Bean对象的工厂</strong></li><li><strong>Bean</strong>：在计算机英语中，有可重用组件的含义</li><li><strong>JavaBean</strong>：指的是用 Java 语言编写的可重用组件，JavaBean不等于实体类，实体类只是 Java 可重用组件<code>JavaBean</code>的一部分</li></ul><h3 id="解耦实例">解耦实例</h3><h4 id="说明">说明</h4><ol><li>需要一个配置文件来配置我们的service和dao，配置的内容：<code>唯一标识=全限定类名</code></li><li>通过读取配置文件的内容，通过工厂方式创建对象</li><li>在工厂中定义一个Map容器存放创建出来的对象。</li><li>配置文件可以是xml也可以是properties，简单起见，此处使用properties</li><li>此处使用创建单例对象</li></ol><h4 id="代码">代码</h4><p><code>bean.properties</code>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userDao</span>=<span class="string">top.hardape.dao.impl.UserDaoImpl</span></span><br><span class="line"><span class="attr">userService</span>=<span class="string">top.hardape.service.impl.UserServiceImpl</span></span><br></pre></td></tr></table></figure><p><code>BeanFactory</code>实现解耦的工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂模式实现解耦</span></span><br><span class="line"><span class="comment"> * 1.  需要一个配置文件来配置我们的service和dao，配置的内容：唯一标识=全限定类名</span></span><br><span class="line"><span class="comment"> * 2.  通过读取配置文件的内容，方式创建对象</span></span><br><span class="line"><span class="comment"> * 3.  配置文件可以是xml也可以是properties，简单起见，此处使用properties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line">    <span class="comment">// 定义一个Map,用于存储要创建的对象。我们把它称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化对象</span></span><br><span class="line">        props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 实例化容器</span></span><br><span class="line">        beans = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取properties文件的流对象</span></span><br><span class="line">        InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Enumeration&lt;Object&gt; keys = props.keys();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">            String key = keys.nextElement().toString();</span><br><span class="line">            String beanPath = props.getProperty(key);</span><br><span class="line">            Object bean = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 根据反射创建对象</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bean = Class.forName(beanPath).newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            beans.put(key,bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Bean 的名称获取 bean对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserDao</code>接口模拟持久层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟插入一条用户数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserDaoImpl</code>类模拟持久层接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"插入了一条新用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserService</code>接口模拟业务层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户登录的业务功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserServiceImpl</code>类模拟业务层接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> top.hardape.dao.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> top.hardape.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> top.hardape.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = (UserDao) BeanFactory.getBean(<span class="string">"userDao"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.insertUser();</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Client</code>类模拟表现层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> top.hardape.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟表现层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        UserService us = new UserServiceImpl();</span></span><br><span class="line"><span class="comment">//        us.userLogin();</span></span><br><span class="line"></span><br><span class="line">        UserService us1 = (UserService) BeanFactory.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        UserService us2 = (UserService) BeanFactory.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        System.out.println(us1);</span><br><span class="line">        us1.userLogin();</span><br><span class="line">        System.out.println(us2);</span><br><span class="line">        us1.userLogin();</span><br><span class="line">        System.out.println(us1 == us2);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            结果如下:</span></span><br><span class="line"><span class="comment">                top.hardape.service.impl.UserServiceImpl@4411d970</span></span><br><span class="line"><span class="comment">                插入了一条新用户数据</span></span><br><span class="line"><span class="comment">                登录成功</span></span><br><span class="line"><span class="comment">                top.hardape.service.impl.UserServiceImpl@4411d970</span></span><br><span class="line"><span class="comment">                插入了一条新用户数据</span></span><br><span class="line"><span class="comment">                登录成功</span></span><br><span class="line"><span class="comment">                true</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果删除业务层或持久层的相关实现类，在编译时并不会出错，只会报运行时异常。</p><h2 id="IoC的概念和作用">IoC的概念和作用</h2><h3 id="概念">概念</h3><ul><li><code>IoC (Inverse Of Control,即反转控制)</code>是指把创建对象的权利交给 Spring 框架，IoC是 Spring 框架的核心之一。</li><li>Spring的核心就是提供了一个<code>IoC容器</code>，它可以管理所有轻量级的 JavaBean 组件，提供的底层服务包括组件的生命周期管理、配置和组装服务、AOP支持，以及建立在AOP基础上的声明式事务服务等。</li><li><code>IoC</code>包括<code>DI (Dependency Injection,即依赖注入)</code>和<code>DL (Dependency Lookup,即依赖查找)</code></li></ul><h3 id="作用">作用</h3><p><code>IoC</code>可以削减计算机程序的耦合性。</p><h2 id="Spring-IoC的基本使用">Spring IoC的基本使用</h2><h3 id="IoC相关jar包">IoC相关jar包</h3><ul><li>🗃 commons-logging-x.x.x.jar</li><li>🗃 spring-beans-x.x.x.RELEASE.jar</li><li>🗃 spring-context-x.x.x.RELEASE.jar</li><li>🗃 spring-core-x.x.x.RELEASE.jar</li><li>🗃 spring-expression-x.x.x.RELEASE.jar</li></ul><h3 id="IoC的Maven依赖">IoC的Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IoC配置文件约束">IoC配置文件约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;...&quot; class&#x3D;&quot;...&quot;&gt;  </span><br><span class="line">        &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;...&quot; class&#x3D;&quot;...&quot;&gt;</span><br><span class="line">        &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- more bean definitions go here --&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><h3 id="IoC环境搭建步骤">IoC环境搭建步骤</h3><ol><li>将相关 jar 包拷贝到工程的lib目录中，如果是maven工程需在<code>pom.xml</code>中添加依赖</li><li>在类的根路径向创建一个任意名称的 xml 文件，不能是中文。</li><li>给配置文件导入约束</li><li>让 Spring 管理资源，在配置文件中使用<code>bean</code>标签配置对象</li></ol><h3 id="Spring-IoC容器">Spring IoC容器</h3><h4 id="结构图">结构图</h4><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/spring-IoC-factory.png" alt="spring-IoC-factory"></p><ul><li><code>BeanFactory</code>：Spring 容器顶层接口</li><li><code>ApplicationContext</code>：IoC 配置接口，常用实现类如下<ul><li><code>ClassPathXmlApplicationContext</code>：基于XML配置（类路径加载）</li><li><code>FileSystemXmlApplicationCOntext</code>：基于XML配置（磁盘路径加载）</li><li><code>AnnotationConfigApplicationContext</code>：基于注解配置</li></ul></li></ul><h4 id="BeanFactory和ApplicationContext">BeanFactory和ApplicationContext</h4><ul><li><code>BeanFactory</code>是 Spring 容器的顶层接口，<code>ApplicationContext</code>是它的子接口</li><li><code>ApplicationContext</code>：它在构建核心容器时，创建对象采取的策略是采用立即加载的方式，也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。(单例对象适用)</li><li><code>BeanFactory</code>：它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式，也就是说，声明时候根据bean的id获取对象，什么时候才真正创建对象。（多例对象适用）</li><li>由于Spring可以根据配置上的不同来改变构建核心容器的策略和时机，而<code>BeanFactory</code>底层接口的功能并不完善，故在开发中通常都使用<code>ApplicationContext</code>接口来定义容器对象。</li></ul><h4 id="ApplicationContext常用实现类">ApplicationContext常用实现类</h4><ul><li><code>ClassPathXmlApplicationContext</code>：它是从类的根路径下加载配置文件（<strong>推荐</strong>）</li><li><code>FileStystemXmlApplicationContext</code>：它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置（必须有访问权限）</li><li><code>AnnotationConfigApplicationContext</code>：读取注解配置容器对象</li></ul><h3 id="常用方法">常用方法</h3><ul><li><code>Object getBean(String name)</code>：<code>BeanFactory</code>的方法，返回一个创建的对象，<code>name</code>为 bean 标签配置的id属性，需要类型强转。</li><li><code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType)</code>：<code>BeanFactory</code>的方法，返回一个创建的对象，<code>name</code>为 bean 标签配置的id属性，<code>requiredType</code>为对象类型的字节码，不需要类型强转。</li><li><code>void close()</code>：<code>AbstractApplicationContext</code>的方法，用于关闭容器。</li></ul><h3 id="实例">实例</h3><p>以用户的业务层和持久层的依赖关系为例子：</p><p>持久层接口<code>UserDao</code>和实现类<code>UserDaoImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟插入一条用户数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"插入了一条新用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层接口<code>UserService</code>和实现类<code>UserSerivceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户登录的业务功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring IoC 配置文件<code>bean.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置Service --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;top.hardape.service.impl.UserServiceImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置Dao --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;top.hardape.dao.impl.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用ApplicationContext接口，就是在获取spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">// 根据bean的id获取对象，第一种方式，需要强转</span></span><br><span class="line">        UserDao userDao = (UserDao) ac.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        <span class="comment">// 根据bean的id获取对象，第二种方式，不需要强转</span></span><br><span class="line">        UserService userService = ac.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(userDao);</span><br><span class="line">        userDao.insertUser();</span><br><span class="line">        System.out.println(userService);</span><br><span class="line">        userService.userLogin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">top.hardape.dao.impl.UserDaoImpl@573906eb</span><br><span class="line">插入了一条新用户数据</span><br><span class="line">top.hardape.service.impl.UserServiceImpl@479ceda0</span><br><span class="line">登录成功</span><br></pre></td></tr></table></figure><h2 id="Spring-IoC对bean的管理">Spring IoC对bean的管理</h2><h3 id="创建Bean的三种方式">创建Bean的三种方式</h3><h4 id="使用默认无参构造函数">使用默认无参构造函数</h4><p>在Spring配置文件中使用<code>bean</code>标签，配以<code>id</code>和<code>class</code>属性之后，且没有其他属性和标签时，采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"top.hardape.service.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>id</code>属性：给对象在容器中提供一个唯一标识，用于从Spring容器获取对象。</li><li><code>class</code>属性：指定要创建对象的全限定类名。用于反射创建对象，默认情况下调用无参构造函数。</li></ul><h4 id="使用静态工厂创建对象">使用静态工厂创建对象</h4><p>使用静态工厂类中的静态方法创建对象，并存入 Spring 容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"top.hardape.factory.StaticFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>id</code>属性：指定 bean 的 id，用于从Spring容器中获取对象。</li><li><code>class</code>属性：指定静态工厂的全限定类名</li><li><code>factory-method</code>属性：指定静态工厂类中生成对象的静态方法</li></ul><h4 id="使用实例工厂创建对象">使用实例工厂创建对象</h4><p>先把工厂的创建交给 Spring 来管理，再使用工厂的 bean 类调用里面的方法来创建对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"top.hardape.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>factory-bean</code>属性：用于指定实例工厂 bean 的 id</li><li><code>factory-method</code>属性：用于指定实例工厂中创建对象的方法。</li></ul><h3 id="bean对象的作用范围">bean对象的作用范围</h3><p>bean 标签的<code>scope</code>属性：指定对象的作用范围，取值如下：</p><ul><li><code>singleton</code>：单例的（默认值）。即一个容器只有一个对象的实例。</li><li><code>prototype</code>：多例的。即每次访问对象时，都会重新创建对象实例。</li><li><code>request</code>：作用于web应用的请求范围，即在Web 项目中，Spring 创建一个 Bean 的对象，将对象存入到 <code>request </code>域中</li><li><code>session</code>：作用于web应用的会话范围，即在Web 项目中， Spring 创建一个 Bean 的对象，将对象存入到 <code>session </code>域中。</li><li><code>global-session</code>：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是<code>session</code>，即在Web 项目中，应用在<code>Portlet</code>环境，如果没有<code>Portlet</code>环境那么相当于<code>session</code></li></ul><h3 id="bean对象的生命周期">bean对象的生命周期</h3><h4 id="单例对象">单例对象</h4><ul><li>对象出生：当应用加载，创建容器时，对象被创建。</li><li>对象活着：只要容器在，对象一直存在。</li><li>对象死亡：当销毁容器时，对象被销毁。</li></ul><p>总结：单例对象的声明周期和容器相同</p><h4 id="多例对象">多例对象</h4><ul><li>对象出生：当使用对象时，创建新的对象实例。</li><li>对象活着：只要对象在使用中，对象一直存在。</li><li>对象死亡：当对象长时间不用，且没有别的对象引用时，被 Java 的垃圾回收器回收了。</li></ul><h4 id="bean中的属性">bean中的属性</h4><ul><li><code>init-method</code>：指定类中的初始化方法名称.</li><li><code>destroy-method</code>：指定类中销毁方法名称。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Spring" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.hardape.top/tags/Spring/"/>
    
      <category term="IoC" scheme="https://www.hardape.top/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>01-Spring概述</title>
    <link href="https://www.hardape.top/article/92d33832.html"/>
    <id>https://www.hardape.top/article/92d33832.html</id>
    <published>2020-06-19T14:01:37.000Z</published>
    <updated>2020-06-24T14:03:46.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="定义">定义</h2><p><strong>Spring</strong>是分层的 Java SE/EE 应用 <code>full-stack,即全栈</code>轻量级开源框架，以 <code>IoC (Inverse Of Contorl,即反转控制)</code>和<code>AOP (Aspect Oriented Programming,即面向切面编程)</code>为内核，提供了展现层 Spring MVC 和 持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开框架。</p><h2 id="发展历程">发展历程</h2><ul><li><p>1997 年，IBM 提出了 EJB （Enterprise Java Beans，即企业Java Beans）的思想</p></li><li><p>1998 年，SUM 制定开发标准规范 EJB 1.0</p></li><li><p>1999 年，EJB 1.1 发布</p></li><li><p>2001 年，EJB 2.0 发布</p></li><li><p>2003 年，EJB 2.1 发布</p></li><li><p>2006 年，EJB 3.0 发布</p></li><li><p><code>Rod Johnson</code> （ Spring 之父）</p><ul><li><p>Expert One-to-One J2EE Design and Development （2002）</p><p>阐述了 J2EE 使用 EJB 开发设计的优点及解决方案</p></li><li><p>Expert One-to-One J2EE Development without EJB（2004）</p><p>阐述了 J2EE 开发不使用 EJB 的解决方案（Spring 雏形）</p></li></ul></li><li><p>2017 年 9 月发布了 Spring 5.0 通用版（GA）</p></li></ul><h2 id="优势">优势</h2><ul><li><p><strong>方便解耦，简化开发</strong></p><p>通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的多度程序耦合。用户也不必再为单例模式类、属性文件解析等很底层的需求编写代码，可以更专注于上层的应用。</p></li><li><p><strong>AOP编程的支持</strong></p><p>通过 Spring 的 AOP 功能，方便进行面向切面的编程。许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。</p></li><li><p><strong>声明式事务的支持</strong></p><p>可以将开发者从单调烦闷的事务管理代码中解脱出来，通过声明方式灵活地进行事务的管理，提高开发效率和质量。</p></li><li><p><strong>方便程序的调试</strong></p><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p></li><li><p><strong>方便集成各种优秀框架</strong></p><p>Spring 可以降低各种框架的使用难度，提供了各种优秀框架（ Structs、Hibernate、Hessian、Quartz 等）的直接支持。</p></li><li><p><strong>降低 Java EE API 的使用难度</strong></p><p>Spring 对 JavaEE API（如 JDBC、JavaMail、远程调用）进行了薄薄的封装，使这些 API 的使用难度大大降低。</p></li><li><p><strong>Spring 源码是经典学习范例</strong></p><p>Spring 的源代码设计精妙、结构清晰，处处体现着对 Java 设计模式灵活运用以及对 Java 技术的高超造诣，它的源代码无疑是 Java 技术的最佳实践的范例。</p></li></ul><h2 id="体系结构">体系结构</h2><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/spring-overview.png" alt="spring-overview"></p><h2 id="Spring下载">Spring下载</h2><ul><li><a href="https://spring.io/" target="_blank" rel="noopener">Spring 官网</a></li><li><a href="https://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">Spring 下载地址</a></li><li><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">Spring框架文档-version-5.2.7</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Spring" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.hardape.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>GoF设计模式-代理模式</title>
    <link href="https://www.hardape.top/article/1606b015.html"/>
    <id>https://www.hardape.top/article/1606b015.html</id>
    <published>2020-06-11T06:49:31.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a><h2 id="概述">概述</h2><ul><li><strong>代理模式（Proxy Pattern）</strong>，为其他对象提供一种代理以控制对这个对象的访问。</li><li>代理模式其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</li><li>被代理的对象可以是<strong>远程对象</strong>、<strong>创建开销大的对象</strong>或<strong>需要安全控制的对象</strong></li><li>代理模式可以详细控制访问**某个对象（某类）**的方法，在调用这个方法前做前置处理，调用这个方法后做后置处理，从而实现将统一流程代码放到代理类中处理。（即：AOP的微观实现）</li><li>代理模式是AOP（Aspect Oriented Programming面向切面编程）的核心实现机制。</li></ul><h2 id="应用场景">应用场景</h2><ul><li>安全代理：屏蔽对真实角色的直接访问。</li><li>远程代理：通过代理类处理远程方法调用（RMI，即Remote Method Invoke）</li><li>虚拟代理：先加载轻量级的代理对象，真正需要时再加载开销很大的真实对象，如浏览器页面中的图片的延时加载就是使用虚拟代理的。</li><li>智能指引：当调用真实的对象时，代理处理另外一些事情。</li></ul><h2 id="核心角色">核心角色</h2><h3 id="抽象角色">抽象角色</h3><p>定义代理角色和真实角色的公共对外方法</p><h3 id="真实角色">真实角色</h3><ul><li>即目标对象，实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</li><li><strong>关注真正的业务逻辑</strong>。</li></ul><h3 id="代理角色">代理角色</h3><ul><li>即代理对象，实现抽象角色或为真实角色的子类，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加字节的操作。</li><li><strong>将统一的流程控制放到代理角色中处理</strong>。</li></ul><h2 id="分类">分类</h2><ul><li><strong>静态代理</strong>：静态定义代理类</li><li><strong>动态代理</strong>：动态生成代理类<ul><li>JDK自带的动态代理，即<strong>JDK代理</strong></li><li>javaassist字节码操作库实现</li><li><strong>CgLib代理</strong></li><li>ASM（底层使用指令，可维护性较差）</li></ul></li></ul><h2 id="静态代理">静态代理</h2><h3 id="概述-v2">概述</h3><p><strong>静态代理，即Static Proxy</strong>，由开发者定义代理类，在使用时，被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同的父类。</p><h3 id="场景">场景</h3><p>使用<code>追求女神</code>的场景实现静态代理</p><ul><li><strong>追求者</strong>张三想要追求女神，认识女神的闺蜜<strong>代理工具人</strong>，但不认识女神，张三就通过女神的闺蜜<strong>送礼物</strong>给女神。</li><li>角色分析<ul><li>抽象角色——送礼物接口，<code>GiveGift</code>。</li><li>真实角色——追求者张三，<code>Pursuer</code>。</li><li>代理角色——工具人闺蜜，<code>ToolPerson</code></li></ul></li></ul><h3 id="UML类图">UML类图</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200610211725636.png" alt="image-20200610211725636"></p><h3 id="实例">实例</h3><p>抽象角色<code>GiveGift</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GiveGift</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 送鲜花</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色``Pursuer`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pursuer</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pursuer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送女神一束鲜花"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理角色<code>ToolPerson</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToolPerson</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Pursuer pursuer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToolPerson</span><span class="params">(Pursuer pursuer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pursuer = pursuer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收"</span> + pursuer.getName() + <span class="string">"的代理"</span>);</span><br><span class="line">        pursuer.giveFlowers();</span><br><span class="line">        System.out.println(<span class="string">"女神把花退回来了。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建目标对象(被代理对象)</span></span><br><span class="line">        Pursuer pursuer = <span class="keyword">new</span> Pursuer(<span class="string">"张三"</span>);</span><br><span class="line">        <span class="comment">// 创建代理对象，同时将被代理对象传递给代理对象</span></span><br><span class="line">        ToolPerson toolPerson = <span class="keyword">new</span> ToolPerson(pursuer);</span><br><span class="line"><span class="comment">// 通过代理对象，调用到被代理对象的方法</span></span><br><span class="line">        toolPerson.giveFlowers(); <span class="comment">// 接收张三的代理  送女神一束鲜花  女神把花退回来了。。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点">优缺点</h3><ul><li>优点：在不修改目标对象即真实角色的功能的前提下，能通过代理对象对目标功能进行扩展。</li><li>缺点：由于代理对象需要与目标对象实现共同的接口，所以一旦接口增加方法，目标对象与代理对象都要维护。</li></ul><h2 id="JDK代理">JDK代理</h2><h3 id="概述-v3">概述</h3><ul><li>代理对象不需要实现接口，但是目标对象要实现接口，否则不能用动态代理。</li><li>代理对象的生成，是利用JDK的API动态地在内存中构建代理对象。</li></ul><h3 id="优点">优点</h3><p>抽象角色(接口)中声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，可以更加灵活和统一地处理众多的方法。</p><h3 id="使用">使用</h3><h4 id="Proxy">Proxy</h4><ul><li><code>java.lang.reflect.Proxy</code>：提供了创建动态代理类和实例的静态方法，它也是由这些方法创建的所有动态代理类的超类。</li><li>JDK实现代理只需要实现<code>Proxy</code>的<code>newProxyInstance</code>静态方法</li><li><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code>：返回指定接口的代理类的实例，该接口将方法调用分派给指定的调用处理程序。<ul><li><code>ClassLoader loader</code>：指定当前目标对象使用的类加载器，获取加载器的方法固定。</li><li><code>Class&lt;?&gt;[] interfaces</code>：目标对象实现的接口类型，使用泛型的方式确认类型</li><li><code>InvocationHandler h</code>：事件处理器，执行目标对象的方法时，会触发事件处理器的<code>invoke</code>方法，会把当前执行的目标对象方法作为参数传入，可使用<code>Lambda表达式</code></li></ul></li></ul><h4 id="InvocationHandler">InvocationHandler</h4><ul><li><code>java.lang.reflect.InvocationHandler</code>：是代理实例的调用处理程序实现的处理器，每次通过<code>Proxy</code>生成代理类对象时都要指定对应的处理器对象，通过<code>invoke</code>方法实现对真实角色的代理访问。</li><li><code>Object invoke(Object proxy, Method method, Object[] args)</code>：在代理实例上处理方法调用并返回结果<ul><li><code>Object proxy</code>：在其上调用方法的代理实例</li><li><code>Method method</code>：对应于在代理实例上调用的接口方法的<code>Method</code>实例</li><li><code>Object[] args</code>：包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为 <code>null</code>，基本数据类会被转换为对应的包装类。</li></ul></li></ul><h3 id="场景-v2">场景</h3><p>使用<code>追求女神</code>的场景实现JDK代理</p><ul><li><strong>追求者</strong>张三想要追求女神，认识女神的闺蜜<strong>代理工具人</strong>，但不认识女神，张三就通过女神的闺蜜<strong>送礼物</strong>给女神。</li><li>角色分析<ul><li>抽象角色——送礼物接口，<code>GiveGift</code>。</li><li>真实角色——追求者张三，<code>Pursuer</code>。</li><li>代理角色——由代理工厂生成代理对象，<code>ProxyFactory.getProxyInstance()</code></li></ul></li></ul><h3 id="UML类图-v2">UML类图</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200611131457135.png" alt="image-20200611131457135">’</p><h3 id="实例-v2">实例</h3><p>抽象角色<code>GiveGift</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GiveGift</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 送鲜花</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色<code>Pursuer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pursuer</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pursuer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送女神一束鲜花"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象工厂<code>ProxyFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">// 保护一个目标对象，target</span></span><br><span class="line"><span class="keyword">private</span> Pursuer target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Pursuer target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"开始"</span> + target.getName() + <span class="string">"的代理"</span>);</span><br><span class="line"><span class="comment">// 方式机制调用目标对象的方法</span></span><br><span class="line">        Object returnVal = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"女神把花退回来了。。。"</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类<code>Test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建目标对象</span></span><br><span class="line">Pursuer pursuer = <span class="keyword">new</span> Pursuer(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line">GiveGift proxy =  (GiveGift) <span class="keyword">new</span> ProxyFactory(pursuer).getProxyInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy：class com.sun.proxy.$Proxy0,即内存中动态生成了代理对象</span></span><br><span class="line">System.out.println(<span class="string">"proxy："</span> + proxy.getClass());</span><br><span class="line">proxy.giveFlowers();<span class="comment">// 接收张三的代理  送女神一束鲜花  女神把花退回来了。。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cglib代理">Cglib代理</h2><h3 id="概述-v4">概述</h3><ul><li>静态代理和JDK代理都要求目标对象实现一个接口，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可以<strong>使用目标对象子类来实现代理</strong>，这就是<strong>Cglib代理</strong></li><li>Cglib代理也叫做<strong>子类代理</strong>，它是在内存中构建一个子类对象从而实现对象目标对象功能扩展。</li><li>Cglib是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口，它广泛地被许多APO框架使用，例如Spring AOP，实现方法拦截。</li><li>在AOP编程中如何选择代理模式<ul><li>目标对象需要实现接口，用JDK代理</li><li>目标对象不需要实现接口，用Cglib代理</li></ul></li><li>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类，即依赖ASM，使用字节码技术生成代理类，比使用Java反射效率要高。</li></ul><h3 id="依赖">依赖</h3><ul><li><p>Cglib代理依赖第三方包<code>cglib.jar</code>，<a href="https://github.com/cglib/cglib" target="_blank" rel="noopener">gitub仓库地址</a>和<a href="https://github.com/cglib/cglib/releases" target="_blank" rel="noopener">下载地址</a></p><ul><li>cglib-xxx.jar包没有集成ASM，故需要另外在项目中引入ASM包</li><li>cglib-nodep-xxx.jar以集成ASM，故可以直接使用</li></ul></li><li><p><a href="https://asm.ow2.io/" target="_blank" rel="noopener">ASM官方网站</a></p></li><li><p><strong>注意</strong>：cglib包和asm包版本不匹配问题</p><ul><li><p>cglib版本为 3.0 或 3.1 ，org.objectweb.asm版本为3.1.0时，版本冲突，报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IncompatibleClassChangeError: class net.sf.cglib.core.DebuggingClassWriter has interface org.objectweb.asm.ClassVisitor as super class</span><br></pre></td></tr></table></figure></li><li><p>使用 cglib 2.2 或使用较新版本的 asm包 可解决此问题。</p></li></ul></li></ul><h3 id="使用-v2">使用</h3><ul><li>通过<code>Enhacer</code>对象来获取目标对象的代理对象</li><li>通过实现<code>MethodInterceptor</code>拦截器接口并重写<code>intercept</code>类来实现对目标对象的代理访问。</li><li><code>Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</code>：在代理实例上处理方法调用并返回结果<ul><li><code>Object proxy</code>：在其上调用方法的代理实例</li><li><code>Method method</code>：对应于在代理实例上调用的接口方法的<code>Method</code>实例</li><li><code>Object[] args</code>：包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为 <code>null</code>，基本数据类会被转换为对应的包装类。</li><li><code>MethodProxy methodProxy</code>：代理方法</li></ul></li></ul><h3 id="注意">注意</h3><ul><li>在内存中动态创建子类，注意代理的类不能使用<code>final</code>修饰，否则报错<code>java.lang.IllegalArgumentException</code></li><li>目标对象的方法如果被<code>final</code>或<code>static</code>修饰，那么就不会被拦截，即不会执行目标对象额外的业务方法。</li></ul><h3 id="场景-v3">场景</h3><p>使用<code>追求女神</code>的场景实现JDK代理</p><ul><li><strong>追求者</strong>张三想要追求女神，认识女神的闺蜜<strong>代理工具人</strong>，但不认识女神，张三就通过女神的闺蜜<strong>送礼物</strong>给女神。</li><li>角色分析<ul><li>抽象角色——由Cglib在内存中生成</li><li>真实角色——追求者张三，<code>Pursuer</code>。</li><li>代理角色——由代理工厂生成代理对象，<code>ProxyFactory.getProxyInstance()</code></li></ul></li></ul><h3 id="URL类图">URL类图</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200611141002996.png" alt="image-20200611141002996"></p><h3 id="实例-v3">实例</h3><p>真实角色<code>Pursuer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pursuer</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pursuer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送女神一束鲜花"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象工厂<code>ProxyFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line"><span class="keyword">private</span> Pursuer target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Pursuer target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建一个工具类</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">// 2.设置父类</span></span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line"><span class="comment">// 3.设置回调方法</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 4.创建子类对象，即代理对象</span></span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始"</span> + target.getName() + <span class="string">"的代理"</span>);</span><br><span class="line">        Object returnVal = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"女神把花退回来了。。。"</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建目标对象</span></span><br><span class="line">Pursuer pursuer = <span class="keyword">new</span> Pursuer(<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line">Pursuer proxy = (Pursuer) <span class="keyword">new</span> ProxyFactory(pursuer).getProxyInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代理方法</span></span><br><span class="line">proxy.giveFlowers(); <span class="comment">// 接收张三的代理  送女神一束鲜花  女神把花退回来了。。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果可能会出现以下警告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by net.sf.cglib.core.ReflectUtils$1 (file:/D:/Study/Code/Java/JavaSE_Code_Eclipse/22_GoF/lib/cglib-3.3.0.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of net.sf.cglib.core.ReflectUtils$1</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br></pre></td></tr></table></figure><p>该警告是因为jdk版本太高，将项目JDK降低到1.8或以下版本即可，也可以不处理，不影响正常运行。</p><blockquote><p>参考资料：</p><ol><li><a href="https://book.douban.com/subject/2334288/" target="_blank" rel="noopener">大话设计模式-程杰</a></li><li><a href="https://www.bilibili.com/video/BV1G4411c7N4" target="_blank" rel="noopener">尚硅谷Java设计模式，韩顺平图解java设计模式</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="GoF设计模式" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/GoF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Porxy" scheme="https://www.hardape.top/tags/Porxy/"/>
    
      <category term="GoF" scheme="https://www.hardape.top/tags/GoF/"/>
    
  </entry>
  
  <entry>
    <title>02-Java语法基础</title>
    <link href="https://www.hardape.top/article/8242523.html"/>
    <id>https://www.hardape.top/article/8242523.html</id>
    <published>2020-05-24T02:09:45.000Z</published>
    <updated>2020-06-11T09:21:48.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1HJ411n7Cc" target="_blank" rel="noopener">2020-最新全套黑马57期-IDEA版</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="注释">注释</h2><h3 id="注释概述">注释概述</h3><ul><li>注释是在程序<strong>指定位置</strong>添加的<strong>说明性信息</strong></li><li>注释不参与程序运行，仅起到<strong>说明作用</strong></li></ul><h3 id="注释分类">注释分类</h3><p>注释一般分为<strong>单行注释</strong>、<strong>多行注释</strong>、<strong>文档注释</strong></p><h4 id="单行注释">单行注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释信息</span></span><br></pre></td></tr></table></figure><h4 id="多行注释">多行注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释信息 */</span></span><br></pre></td></tr></table></figure><h4 id="文档注释">文档注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 注释信息 */</span></span><br></pre></td></tr></table></figure><h2 id="关键字">关键字</h2><h3 id="关键字概述">关键字概述</h3><p>关键字就是被Java语言赋予了<strong>特定含义的单词</strong>。</p><h3 id="关键字特点">关键字特点</h3><ul><li>关键字的字母<strong>全部小写</strong></li><li>常用的代码编辑器，针对关键字有特殊的颜色标记。</li></ul><h2 id="标识符">标识符</h2><h3 id="标识符概述">标识符概述</h3><p>标识符就是给类、方法、变量等命名的符号。</p><h3 id="标识符定义规则">标识符定义规则</h3><ul><li>由**数字、字母、下划线(_)、美元符($)**组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h3 id="常见命名约定">常见命名约定</h3><h4 id="小驼峰命名法">小驼峰命名法</h4><ul><li>定义<strong>变量</strong>、<strong>方法</strong>时使用</li><li>标识符是一个单词时，首字母小写，如<code>name</code></li><li>标识符有多个单词组成时，第一个单词首字母小写，其他单词首字母大写，如<code>firstName</code></li></ul><h4 id="大驼峰命名法">大驼峰命名法</h4><ul><li>定义<strong>类</strong>时使用</li><li>标识符是一个单词时，首字母大写，如<code>Student</code></li><li>标识符有多个单词组成时，每个单词首字母大写，如<code>GoodStudent</code></li></ul><h2 id="常量">常量</h2><h3 id="常量概述">常量概述</h3><p>常量是指在程序运行过程中，其值不可以发生改变的值</p><h3 id="常量分类">常量分类</h3><table><thead><tr><th>常量类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>字符常量</td><td>用单引号<code>''</code>括起来的单个字符</td><td><code>‘</code>、<code>0</code>、<code>我</code></td></tr><tr><td>字符串常量</td><td>用双引号<code>&quot;&quot;</code>括起来的内容</td><td><code>&quot;Hello World&quot;</code>，<code>&quot;辛猿毅码&quot;</code></td></tr><tr><td>整数常量</td><td>不带小数的数字</td><td><code>333</code>，<code>-1</code></td></tr><tr><td>小数常量</td><td>带小数的数字</td><td><code>13.14</code>，<code>-5.21</code></td></tr><tr><td>布尔常量</td><td>布尔值，表示真假</td><td>只有两个值：<code>true</code>和<code>false</code></td></tr><tr><td>空常量</td><td>一个特殊的值，控制</td><td>值为：<code>null</code></td></tr></tbody></table><ul><li>空常量是不能直接输出的，即<code>System.out.println(null)</code>会报错</li></ul><h2 id="数据类型">数据类型</h2><h3 id="计算机存储单元">计算机存储单元</h3><ul><li>计算机存储设备的最小信息单元为<strong>位(bit)</strong>，又称为<strong>比特位</strong>，通常使用**“b”**表示</li><li>计算机最小的存储单元为<strong>字节(byte)</strong>，通常使用**“B”**表示</li><li>1 B = 8 bit</li><li>1 KB = 1024 B</li><li>1 MB = 1024 KB</li><li>1 GB = 1024 MB</li><li>1 TB = 1024 GB</li><li>1 PB = 1024 TB</li><li>1 EB = 1024 PB</li><li>1 ZB = 1024 EB</li><li>…</li></ul><h3 id="数据类型分类">数据类型分类</h3><p>Java语言是<strong>强类型语言</strong>，对于每一种数据都给出了明确的数据类型，不同的<strong>数据类型</strong>也分配了不同的<strong>内存空间</strong>，所有它们表示的<strong>数据大小</strong>也不同。</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/java-datatype.png" alt="java-datatype"></p><h3 id="数据类型内存占用和取值范围">数据类型内存占用和取值范围</h3><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td><code>byte</code></td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td><code>short</code></td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td><code>int</code></td><td>4个字节</td><td>-2<sup>31</sup>~2<sup>31</sup>-1</td></tr><tr><td>长整型</td><td><code>long</code></td><td>8个字节</td><td>-2<sup>63</sup>~2<sup>63</sup>-1</td></tr><tr><td>单精度浮点型</td><td><code>float</code></td><td>4个字节</td><td>负数：-3.402823E+38<sub>-1.401298E-45&lt;br&gt;正数：1.401298E-45</sub>3.402823E+38</td></tr><tr><td>双精度浮点型</td><td><code>double</code></td><td>8个字节</td><td>负数：-1.797693E+308<sub>-4.9E-324&lt;br/&gt;正数：4.9E-324</sub>1.797693E+308</td></tr><tr><td>字符型</td><td><code>char</code></td><td>2个字节</td><td>0~65535</td></tr><tr><td>布尔型</td><td><code>boolean</code></td><td>未精确定义</td><td><code>true</code>、<code>false</code></td></tr></tbody></table><ul><li>E+38表示乘以10<sup>38</sup>，E-45表示乘以10<sup>-45</sup>。</li><li>字符串不是基本类型，而是引用类型。</li><li>浮点型可能只是一个近似值，并非精确的值。</li><li>数据范围与字节数不一定相关，例如<code>float</code>数据范围比<code>long</code>更加广泛，但是<code>float</code>是4字节，<code>long</code>是8字节。</li><li>浮点型中默认类型是<code>double</code>，如果一定要使用<code>float</code>类型，需要加上一个后缀<code>f</code>或者<code>F</code>，推荐使用大写字母。</li><li>整型中默认类型是<code>int</code>，如果一定要使用<code>long</code>类型，需要加上一个后缀<code>l</code>或者<code>L</code>，推荐使用大写字母。</li><li>boolean类型没有给出精确的定义，详细见文章<a href="https://blog.csdn.net/qq_35181209/article/details/77016508" target="_blank" rel="noopener">Java中boolean类型占用多少个字节</a></li></ul><h2 id="变量">变量</h2><h3 id="变量概述">变量概述</h3><ul><li>变量是指在程序运行中，其值可以发生改变的量。</li><li>从本质上讲，变量是内存中的一小块区域。</li><li>变量由<strong>数据类型</strong>、<strong>变量名</strong>、<strong>变量值</strong>三部分组成。</li></ul><h3 id="变量的定义">变量的定义</h3><ul><li><p>变量的定义包含变量的<strong>声明</strong>和<strong>赋值</strong>，即将一个数据值赋给声明的变量。</p></li><li><p>语法</p><ul><li><p>先声明变量，后赋值</p><p><code>数据类型 变量名;</code><br><code>变量名 = 数据值;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>同时声明和赋值变量</p><p><code>数据类型 变量名 = 变量值;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>右侧变量值的范围不能超过左侧数据类型的范围</p></li><li><p>右侧变量值可以是已定义变量的变量名，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = num1; <span class="comment">// num2的值为10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="变量的使用">变量的使用</h3><p>变量的使用：<strong>取值</strong>和<strong>修改值</strong></p><h4 id="变量取值">变量取值</h4><p>语法为：<code>变量值</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num</span><br></pre></td></tr></table></figure><h4 id="变量修改值">变量修改值</h4><p>语法为：<code>变量名 =  变量值;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="变量使用的注意事项">变量使用的注意事项</h3><ul><li><p>变量名不能重复。</p></li><li><p>变量未赋值，不能使用。</p></li><li><p><code>long</code>类型变量定义时，默认将变量值认为是<code>int</code>类型，后面需加<code>l</code>或者<code>L</code>表示<code>long</code>类型，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">1000000L</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>float</code>类型变量定义时，默认将变量值认为是<code>double</code>类型，后面需加<code>f</code>或<code>F</code>表示<code>float</code>类型，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> b = <span class="number">3.14F</span>;</span><br></pre></td></tr></table></figure></li><li><p>变量使用不能超过作用域的范围。</p></li><li><p><strong>作用域</strong>：从定义变量的一行开始，一直到直接所属的大括号结束为止。</p></li><li><p>可以通过一个语句来创建多个变量，通过<code>,</code>隔开，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10, b &#x3D; 20, c &#x3D; 30;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据类型转换">数据类型转换</h2><p>类型转换分为<strong>自动类型转换</strong>和<strong>强制类型转换</strong></p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200512192612625.png" alt="image-20200512192612625" style="zoom:50%;" /><h3 id="自动类型转换">自动类型转换</h3><ul><li><p><strong>自动类型转换</strong>，也称为<strong>隐式转换</strong>，指把一个表示数据<strong>范围小</strong>的数值或者变量赋值给另一个表示数据<strong>范围大</strong>的变量，例如<code>double d = 10</code>。</p></li><li><p><strong>特点</strong>：转换自动完成，不需要进行特殊处理。</p></li></ul><h3 id="强制类型装换">强制类型装换</h3><ul><li><p><strong>强制类型转换</strong>，也称为<strong>显式转换</strong>，指把一个表示数据<strong>范围大</strong>的数值或者变量赋值给另一个表示数据<strong>范围小</strong>的变量，可能存在精度损失、数据溢出。</p></li><li><p><strong>特点</strong>：代码需要进行特殊的格式处理，不能自动完成。</p></li><li><p>语法：<code>目标数据类型 变量名 = (目标数据类型)值或者变量</code>，例如：<code>int k = (int)88.88;</code></p></li><li><p>由于计算机对字符的存储是使用某种编码规则对应的数字来存储的，而在Java语言中，使用Unicode编码来存储字符，故当将<code>char</code>强制转换为数值类型时，会转换为字符对应的Unicode编码，详见<a href="https://blog.csdn.net/u010297957/article/details/48495791" target="_blank" rel="noopener">Java中char和String 的深入理解 - 字符编码1</a>。</p></li><li><p>数字和字符的对照关系表（编码表）</p><ul><li>ASCII码表：American Standard Code for Information Interchange，即美国信息交换标准代码。</li><li>Unicode码表：万国表，开头0~127部分和ASCII完全一致，但是从128开始包含更多字符。</li></ul></li><li><p>常用数字字符对应关系：48 - ‘0’，65 - ‘A’，97 - ‘a’</p></li><li><p><code>boolean</code>类型不能发生数据类型转换</p></li><li><p>对于<code>byte/short/char</code>三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐含地补上<code>(byte)/(short)/(char)</code>进行强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="number">65</span>;<span class="comment">// 此时不需要显式使用(char)进行强制类型转换</span></span><br><span class="line">System.out.println(ch);<span class="comment">// 结果为A</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="运算符">运算符</h2><h3 id="运算符和表达式">运算符和表达式</h3><ul><li>运算符：对常量或者变量进行操作的<strong>符号</strong></li><li>表达式：用运算符把常量或者变量连接起来<strong>符合java语法的式子</strong>就可以称为表达式，不同运算符连接的表达式体现的是不同类型的表达式。</li></ul><h3 id="算术运算符">算术运算符</h3><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td></tr><tr><td><code>-</code></td><td>减</td></tr><tr><td><code>*</code></td><td>乘</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>%</code></td><td>取模/余</td></tr></tbody></table><ul><li><p><code>/</code>取的是<strong>商</strong>，<code>%</code>取的是<strong>余数</strong>，<code>%</code>的结果符号和左操作数相同</p></li><li><p>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算</p></li><li><p>算术表达式中的类型会<strong>自动进行提升</strong>，故此时可能需要进行<strong>强制类型装换</strong>，提升规则如下</p><ul><li><code>byte</code>类型，<code>short</code>类型和<code>char</code>类型将被提升到<code>int</code>类型</li><li>有不同类型自动提升到表达式中<strong>最高等级操作数同样的类型</strong></li><li>等级顺序：<code>byte,short,char</code> =&gt; <code>int</code> =&gt; <code>long</code> =&gt; <code>float</code> =&gt; <code>double</code></li></ul></li><li><p>在<code>+</code>操作中，如果出现了字符串，这个<code>+</code>就是<strong>字符串连接符</strong>，否则就是算术运算符。当连续进行<code>+</code>操作时，从左到右逐个执行。</p></li><li><p>在给变量进行赋值的时候，如果右侧的表达式当中<strong>全都是常量</strong>，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果，而不会进行类型提升，这种情况称为<strong>编译器的常量优化</strong>，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译之后得到的.class字节码文件中相当于直接就是 short result = 13;</span></span><br><span class="line"><span class="keyword">short</span> result = <span class="number">5</span> + <span class="number">8</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值运算符">赋值运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>=</code></td><td>赋值</td><td><code>a = 10</code>，将10赋值给变量<code>a</code></td></tr><tr><td><code>+=</code></td><td>加后赋值</td><td><code>a += b</code>，将<code>a+b</code>的值赋给<code>a</code></td></tr><tr><td><code>-=</code></td><td>减后赋值</td><td><code>a -= b</code>，将<code>a-b</code>的值赋给<code>a</code></td></tr><tr><td><code>*=</code></td><td>乘后赋值</td><td><code>a *= b</code>，将<code>a*b</code>的值赋给<code>a</code></td></tr><tr><td><code>/=</code></td><td>除后赋值</td><td><code>a /= b</code>，将<code>a/b</code>的值赋给<code>a</code></td></tr><tr><td><code>%=</code></td><td>取余后赋值</td><td><code>a %= b</code>，将<code>a%b</code>的值赋给<code>a</code></td></tr></tbody></table><ul><li><p><code>=</code>称为<strong>基本赋值运算符</strong>，其他的赋值运算符称作<strong>扩展/复合赋值运算符</strong></p></li><li><p>扩展赋值运算符<strong>隐含了强制类型转换</strong>，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展赋值运算符隐含了强制类型转换</span></span><br><span class="line"><span class="keyword">short</span> a = <span class="number">10</span>;</span><br><span class="line">a += <span class="number">20</span>;   <span class="comment">// 等价于 a = (short)(a + 20);</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自增自减运算符">自增自减运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>++</code></td><td>自增</td><td>变量的值加1</td></tr><tr><td><code>--</code></td><td>自减</td><td>变量的值减1</td></tr></tbody></table><ul><li><p><code>++</code>和<code>--</code>既可以放在变量的后面，也可以放在变量的前面，如<code>i++</code>和<code>++ i</code></p></li><li><p>单独使用时，<code>++</code>和<code>--</code>无论是放在变量的前面还是后面，结果一致。</p></li><li><p><strong>参与操作时，如果放在变量的后面，先拿变量参与操作，后拿变量做自增/减；</strong></p><p><strong>参与操作时，如果放在变量的前面，先拿变量做自增/减，后拿变量参与操作。</strong></p></li><li><p>只有变量才能使用自增/减运算符。常量不可发生改变，所以不能使用。</p></li></ul><h3 id="关系-比较运算符">关系/比较运算符</h3><table><thead><tr><th>符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><code>==</code></td><td style="text-align:left"><code>a == b</code>，判断a和b的值是否相等</td></tr><tr><td><code>!=</code></td><td style="text-align:left"><code>a != b</code>，判断a和b的值是否不相等</td></tr><tr><td><code>&gt;</code></td><td style="text-align:left"><code>a &gt; b</code>，判断a是否大于b</td></tr><tr><td><code>&gt;=</code></td><td style="text-align:left"><code>a &gt;= b</code>，判断a是否大于等于b</td></tr><tr><td><code>&lt;</code></td><td style="text-align:left"><code>a &lt; b</code>，判断a是否小于b</td></tr><tr><td><code>&lt;=</code></td><td style="text-align:left"><code>a &lt;= b</code>，判断a是否小于等于b</td></tr></tbody></table><ul><li>上述关系运算符判断的结果皆为<code>boolean</code>类型，成立为<code>true</code>，不成立为<code>false</code></li><li>千万不要把<code>==</code>误写为<code>=</code></li><li>如果进行多次判断，不能连着写，如数学中的写法 1 &lt; x &lt; 3 在程序中是<strong>不允许的</strong></li></ul><h3 id="逻辑运算符">逻辑运算符</h3><p>逻辑运算符是用来<strong>连接关系表达式</strong>的运算符，当然，逻辑运算符也可以直接<strong>连接布尔类型的常量或者变量</strong>。</p><h4 id="基本逻辑运算符">基本逻辑运算符</h4><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>逻辑与</td><td><code>a &amp; b</code>，<code>a</code>和<code>b</code>都是<code>true</code>，结果为<code>true</code>，否则为<code>false</code></td></tr><tr><td><code>|</code></td><td>逻辑或</td><td><code>a | b</code>，<code>a</code>和<code>b</code>都是<code>false</code>，结果为<code>false</code>，否则为<code>true</code></td></tr><tr><td><code>^</code></td><td>逻辑异或</td><td><code>a ^ b</code>，<code>a</code>和<code>b</code>结果不同为<code>true</code>，相同为<code>false</code></td></tr><tr><td><code>!</code></td><td>逻辑非</td><td><code>!a</code>，结果和<code>a</code>的结果相反</td></tr></tbody></table><h4 id="短路逻辑运算符">短路逻辑运算符</h4><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>短路与</td><td>作用和<code>&amp;</code>相同，但是有短路效果，如果左边为<code>false</code>，则右边不执行</td></tr><tr><td><code>||</code></td><td>短路或</td><td>作用和<code>&amp;</code>相同，但是有短路效果，如果左边为<code>true</code>，则右边不执行</td></tr></tbody></table><ul><li>短路逻辑运算符比基本的逻辑运算符效率要高，故经常使用短路运算符</li><li>与和或逻辑运算符如果有多个关系表达式，可连续写，如<code>x &gt; -3 &amp;&amp; x &lt; 5 &amp;&amp; x != 0</code></li></ul><h4 id="记忆口诀">记忆口诀</h4><ul><li><code>&amp;</code>或<code>&amp;&amp;</code>：有<code>false</code>则<code>false</code></li><li><code>|</code>或<code>||</code>：有<code>true</code>则<code>true</code></li><li><code>^</code>：相同为<code>false</code>，不同为<code>true</code></li></ul><h3 id="三元运算符">三元运算符</h3><ul><li><p>运算符分类</p><ul><li><strong>一元运算符</strong>：值需要一个数据就可以进行操作的运算符（单操作数），例如取反<code>!</code>、自增<code>++</code>、自减<code>--</code></li><li><strong>二元运算符</strong>：需要两个数据才可以进行操作的运算符（双操作数），例如加<code>+</code>，赋值<code>=</code></li><li><strong>三元运算符</strong>：需要三个数据才可以进行操作的运算符</li></ul></li><li><p>语法：<code>关系表达式 ? 表达式1 : 表达式2</code></p></li><li><p>范例：<code>a &gt; b ? a : b</code></p></li><li><p>计算规则</p><ul><li>首先计算关系表达式的值</li><li>如果值为<code>true</code>，表达式1的值为运算结果</li><li>如果值为<code>false</code>，表达式2的值为运算结果</li></ul></li><li><p>必须同时保证<code>表达式1</code>和<code>表达式2</code>都符合左侧数据类型的要求。</p></li><li><p>三元运算符的结果必须被使用。</p></li></ul><h2 id="流程控制">流程控制</h2><h3 id="概述">概述</h3><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的，即程序的流程对运行结果有直接的影响。我们可以通过控制语句的执行顺序来实现对程序流程的控制从而实现功能。</p><h3 id="分类">分类</h3><ul><li>顺序结构</li><li>分支结构（<code>if</code>，<code>switch</code>）</li><li>循环结构（<code>for</code>，<code>while</code>，<code>do...while</code>）</li></ul><h2 id="顺序结构">顺序结构</h2><p>顺序结构是程序中最简单、最基本的流程控制，没有特定的语法结构，按照代码的先后顺序依次执行。</p><h2 id="分支结构">分支结构</h2><h3 id="if语句">if语句</h3><h4 id="if单分支">if单分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式的值；</li><li>如果关系表达式的值为<code>true</code>就执行语句体；</li><li>如果关系表达式的值为<code>false</code>就不执行语句体；</li></ol><h4 id="if…else双分支">if…else双分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式的值；</li><li>如果关系表达式的值为<code>true</code>就执行语句体1；</li><li>如果关系表达式的值为<code>false</code>就执行语句体2；</li></ol><h4 id="if…else-if…else多分支">if…else if…else多分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式1的值；</li><li>如果值为<code>true</code>就执行语句体1，如果值为<code>false</code>就计算关系表达式2的值；</li><li>如果值为<code>true</code>就执行语句体2，如果值为<code>false</code>就计算关系表达式3的值；</li><li>以此类推…</li><li>如果没有任何关系表达式的值为<code>true</code>，就执行语句体n+1</li></ol><h3 id="switch语句">switch语句</h3><p>swtich语句是多分支结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>：</span><br><span class="line">        语句体<span class="number">1</span>；</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        语句体<span class="number">2</span>；</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法说明：</p><ul><li>表达式：取值的数据类型为<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>，JDK5以后可以是枚举，JDK7以后可以是<code>String</code>.</li><li><code>case</code>：后面跟的是要和表达式进行比较的值。</li><li><code>break</code>：表示中断，结束的意思，用来结束<code>switch</code>语句</li><li><code>default</code>：表示所有情况都不匹配时，就执行该处的内容，和<code>if</code>多分支语句中的<code>else</code>相似，<code>defalut</code>中的<code>break</code>可省略，但为保证结构清晰不建议省略。</li></ul><p>执行流程：</p><ol><li>首先计算关系表达式的值；</li><li>依次和<code>case</code>后面的值进行比较，如果有对应的值，就会执行相应的语句，在执行过程中，遇到<code>break</code>就会结束；</li><li>如果所有的<code>case</code>后面的值和表达式的值都不匹配，就会执行<code>default</code>中的语句体。</li></ol><p>注意：</p><ul><li><p>多个<code>case</code>后面的数值不可以重复</p></li><li><p><strong>case穿透</strong>：在<code>switch</code>语句中，如果<code>case</code>控制的语句体后面不写<code>break</code>，将出现<strong>case穿透</strong>现象，在不判断下一个case的情况下，向下执行，直到遇到<code>break</code>或者整体<code>switch</code>语句结束。</p></li></ul><h2 id="循环结构">循环结构</h2><h3 id="循环概述">循环概述</h3><p>循环语句可以在满足条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为<strong>循环体</strong>，但反复执行循环体时，需要在何时的时候结束循环，否则循环将一直执行下去，形成死循环。</p><h3 id="循环结构的组成">循环结构的组成</h3><ul><li>初始化语句：用于表示循环开启时的起始状态</li><li>条件判断语句：用于表示判断是否循环执行的条件</li><li>循环体语句：用于表示循环反复执行的内容</li><li>条件控制/步进语句：用于表示循环执行中每次变化的内容</li></ul><h3 id="for循环语句">for循环语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 条件判断语句; 条件控制语句) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>执行初始化语句</li><li>执行条件判断语句，如果是<code>false</code>，循环结束；如果是<code>true</code>，继续执行</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>回到2继续</li></ol><h3 id="案例-水仙花数">案例-水仙花数</h3><ul><li>水仙花数：水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</li><li>需求：在控制台输出所有的水仙花数</li><li>任意数字上的指定位上的数值求法：先使用整除操作将要求的数字移动到个位上，再使用取余操作取出个位上的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求所有的水仙花数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NarNum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ones  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tens  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hundreds = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">            ones = i % <span class="number">10</span>;  <span class="comment">// 个位</span></span><br><span class="line">            tens = i / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">// 十位</span></span><br><span class="line">            hundreds = i / <span class="number">100</span>;  <span class="comment">// 百位</span></span><br><span class="line">            <span class="keyword">if</span>(ones * ones * ones + tens * tens * tens + hundreds * hundreds * hundreds == i) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while循环语句">while循环语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准语法</span></span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 扩展语法</span></span><br><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>while</code>循环的执行流程和<code>for</code>循环流程一致。</li></ul><h3 id="do…while循环语句">do…while循环语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准语法</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件判断语句);</span><br><span class="line"><span class="comment">// 扩展语法</span></span><br><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件判断语句);</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行条件判断语句，如果是<code>false</code>，循环结束；如果是<code>true</code>，继续执行</li><li>回到2继续</li></ol><h3 id="三种循环的区别">三种循环的区别</h3><ul><li><code>for</code>循环和<code>while</code>循环先判断条件是否成立，然后决定是否执行循环体（<strong>先判断后执行</strong>）</li><li><code>do...while</code>循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（<strong>先执行后判断</strong>），即<code>do..while</code>循环会执行至少一次。</li><li><code>for</code>循环的变量若在小括号中定义，只有在循环内部可以使用；而<code>while</code>和<code>do...while</code>循环初始化语句在循环外，循环后还能继续使用。</li><li><strong>建议</strong>：循环次数确定的场景多用<code>for</code>循环，否则多用<code>while</code>循环</li></ul><h3 id="跳转控制语句">跳转控制语句</h3><ul><li><code>continue</code>：用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行。</li><li><code>break</code>：<ul><li>用在<code>switch</code>语句中，一旦执行，整个<code>switch</code>语句立刻结束。</li><li>用在循环中，基于条件控制，终止循环体内容的执行，即结束当前的整个循环。</li></ul></li></ul><h3 id="死循环">死循环</h3><ul><li><p>语法</p><ul><li><p><code>for</code>死循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>while</code>死循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>do...while</code>死循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><code>while</code>的死循环格式是最常使用的。</li><li>死循环可以通过 【<code>if</code>条件判断语句+<code>break</code>】跳出循环。</li></ul><h3 id="嵌套循环">嵌套循环</h3><ul><li><strong>嵌套循环</strong>是指一个循环体是另一个循环。比如<code>for</code>循环里面还有一个<code>for</code>循环就是嵌套循环。</li><li>总共的循环次数 = 外循环次数 × 内循环次数</li></ul><h2 id="Java的内存划分">Java的内存划分</h2><ul><li><p>Java程序在运行时，需要在内存中分配空间。为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p></li><li><p>JVM的内存划分</p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给CPU使用，与开发无关</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用</td></tr><tr><td>方法区</td><td>存储可以运行的<code>class</code>文件</td></tr><tr><td>推内存</td><td>存储对象或者数组，<code>new</code>来创建的都存储在堆内存</td></tr><tr><td>栈内存</td><td>存放方法中的局部变量，方法运行时使用的内存。</td></tr></tbody></table></li><li><p><strong>栈（Stack）</strong>：存放的都是方法中的局部变量。<strong>方法的运行一定要在栈当中</strong>。</p><ul><li>局部变量：方法的参数，或者是方法{}内部的变量</li><li>一旦超出作用域，栈中的变量立刻从栈内存当中消失</li></ul></li><li><p><strong>堆（Heap）</strong>：凡是<code>new</code>出来的东西，都在堆内存中。</p><ul><li>堆内存里面的东西都有一个地址值：16进制</li><li>堆内存中的数据都有默认值。规则<ul><li>整型：默认为<code>0</code></li><li>浮点型：默认为<code>0.0</code></li><li>字符型：默认为<code>'\u0000'</code></li><li>布尔型：默认为<code>false</code></li><li>引用类型：默认为<code>null</code></li></ul></li><li>使用完毕，会在垃圾回收器空闲时被回收</li></ul></li><li><p><strong>方法区（Method Area）</strong>：存储<code>.class</code>相关信息，包含方法的信息。</p></li><li><p><strong>本地方法栈（Native Method Stack）</strong>：与操作系统相关</p></li><li><p><strong>寄存器（pc Register）</strong>：与CPU相关</p></li></ul><h2 id="方法">方法</h2><h3 id="方法概述">方法概述</h3><ul><li><strong>方法(method)<strong>就是将具有独立功能的</strong>代码块</strong>组织成为一个整体，使其具有特殊功能的<strong>代码集</strong>。</li><li>方法必须先创建才可以使用，该过程称为<strong>方法定义</strong>。</li><li>方法定义后并不是能直接运行的。需要手动使用后才执行，该过程称为<strong>方法调用</strong>。</li><li>当需要方法的时候，就可以去调用，这样既实现了代码的复用性，也解决了代码冗余的现象。</li></ul><h3 id="方法的定义">方法的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (参数列表) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    [<span class="keyword">return</span> 结果;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>修饰符</strong>：现阶段的固定写法为<code>public static</code></li><li><strong>返回值类型</strong>：表示方法运行结果的数据类型，方法执行后将结果返回到调用者，当无返回值时，返回值类型为<code>void</code></li><li><strong>方法名</strong>：命名规则和变量一样，小驼峰</li><li><strong>参数列表</strong>：方法在执行过程中需要的未知数据，调用者调用方法时传递，格式：<code>参数类型 参数名, 参数类型 参数名,...</code>，定义时的参数称为<strong>形参</strong>。</li><li><strong>return</strong>：有两个作用<ul><li>第一个作用：停止当前方法</li><li>第二个作用：将方法执行后的结果，即<strong>方法的返回值</strong>带给调用者</li><li>注意：<code>return</code>后面的数据结果的数据类型必须和方法名前的返回值类型保持对应。</li><li>一个方法中可以有多个<code>return</code>语句</li></ul></li><li>方法必须定义在一个<strong>类中方法外</strong>，不能定义在另一个方法的里面， 即方法不能嵌套定义。</li><li><code>void</code>表示无返回值，可以省略<code>return</code>，也可以单独写<code>return;</code>后面不加数据仅表示方法的结束。</li><li>任何数据类型都能作为方法的参数类型和返回值类型</li></ul><h3 id="方法的调用">方法的调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名(参数列表)</span><br></pre></td></tr></table></figure><ul><li><strong>参数列表</strong>：方法在调用过程中传入的真实数据，格式：<code>变量名/常量值, 变量名/常量值, ...</code>，调用时的参数称为<strong>实参</strong>。</li><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配。</li></ul><h3 id="形参和实参">形参和实参</h3><ul><li><strong>形参</strong>：形式参数，方法定义中的参数</li><li><strong>实参</strong>：实际参数，方法调用中的参数</li><li><strong>对于基本数据类型的参数，传递的是数据值</strong>，故形参的改变，不影响实参的值。</li><li><strong>对应引用类型的参数，传递的是地址值</strong>，故形参的改变，会影响实参的值。</li></ul><h3 id="方法重载">方法重载</h3><ul><li>方法重载(overload)指同一个类中定义不同参数列表的多个同名方法之间的关系，满足下列条件的多个方法相互构成重载<ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数列表不相同，指的是<strong>类型不同</strong>或者<strong>数量不同</strong>或者<strong>多个类型顺序不同</strong>。</li></ul></li><li>重载仅针对同一个类中方法的名称与参数进行识别，与修饰符、返回值、参数名无关</li><li>在调用输出语句的时候，<code>println</code>方法其实就是进行了多种数据类型的重载。</li></ul><h2 id="数组">数组</h2><h3 id="数组概述">数组概述</h3><ul><li>数组(array)是一种用于存储<strong>多个相同类型数据</strong>的存储模型</li><li>数组是一种引用数据类型。</li><li>数组的长度在程序运行期间不可改变。</li></ul><h3 id="数组的定义">数组的定义</h3><ul><li><p>格式一：<code>数据类型[] 变量名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;  <span class="comment">// 定义了一个int类型的数组，数组名是arr</span></span><br></pre></td></tr></table></figure></li><li><p>格式二：<code>数据类型 变量名[]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[];<span class="comment">// 定义了一个int类型的变量，变量名是arr数组</span></span><br></pre></td></tr></table></figure></li><li><p>推荐使用格式一定义数组</p></li></ul><h3 id="数组初始化">数组初始化</h3><ul><li>Java中的数组必须先初始化才能使用。</li><li>数组初始化就是为数组中的数组元素分配内存空间，并为每个数组元素赋值。</li><li>Java中的数组初始化有两种方式：<strong>动态初始化</strong>和<strong>静态初始化</strong>。</li></ul><h4 id="动态初始化">动态初始化</h4><ul><li><p>动态初始化：初始化只<strong>指定数组长度</strong>，系统为数组分配初始值</p></li><li><p>格式：<code>数据类型[] 数组名 = new 数据类型[数组长度]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">// 定义了一个长度为3的int数组</span></span><br></pre></td></tr></table></figure></li><li><p>解析含义</p><ul><li>左侧数据类型：定义数组中保存数据的数据类型</li><li>左侧中括号：代表定义一个数组</li><li>左侧数组名：给数组取一个名字</li><li>右侧的<code>new</code>：代表创建数据的动作</li><li>右侧数据类型：必须和左侧数据类型保存一致</li><li>右侧数据长度：代表数组中可以保存的数据数量</li></ul></li><li><p>数组在动态初始化时，会为存储空间添加默认值</p><ul><li>整型：默认值<code>0</code></li><li>浮点型：默认值<code>0.0</code></li><li>布尔型：默认值<code>false</code></li><li>字符型：默认值<code>空字符('\u0000')</code></li><li>引用数据类型：默认值<code>null</code></li></ul></li></ul><h4 id="静态初始化">静态初始化</h4><ul><li><p>静态初始化：初始化时<strong>指定每个元素的初始值</strong>，由系统推算出数组长度。</p></li><li><p>标准格式：<code>数据类型[] 数组名 = new 数据类型[]{数据1, 数据2, 数据3, ...}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>简化格式：<code>数据类型[] 变量名 = {数据1, 数据2, 数据3, ...}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成大括号中的具体数值。</p></li><li><p>推荐使用简化格式来静态初始化</p></li></ul><h4 id="初始化的拆分">初始化的拆分</h4><ul><li><p>动态初始化可以拆分为两个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p>静态初始化的标准格式也可以拆分为两个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>静态初始化的简化格式<strong>不可以</strong>拆分为两个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   // 不能拆分成两个步骤：</span></span><br><span class="line"><span class="comment">   int[] arr;</span></span><br><span class="line"><span class="comment">   arr = &#123;1, 2, 3&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组元素访问">数组元素访问</h3><ul><li><p>直接打印数组名称，得到的是数组对应的<strong>内存地址哈希值</strong>，如<code>[I@58ceff1</code></p></li><li><p>数组内部保存的数据的访问形式：<code>数组名[索引]</code></p></li><li><p>索引是数组中数据的编号方式</p></li><li><p>索引从<strong>0</strong>开始，而且是连续的，逐一增加，每次加1，一直到【数组的长度-1】为止</p></li></ul><h3 id="数组内存图">数组内存图</h3><h4 id="单变量单数组内存图">单变量单数组内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ArrayOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">// 动态初始化</span></span><br><span class="line">        System.out.println(arr);  <span class="comment">// 地址值</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变数组中元素的内容</span></span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">// 10</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/oneArray-jvm-memory.png" alt="oneArray-jvm-memory-"></p><p>执行流程</p><ol><li>main方法进入栈中执行</li><li>创建数组，JVM会在栈内存中开辟空间存储局部变量<code>arr</code>，在堆内存中开辟空间，存储数组</li><li>数组在堆内存中会有自己的内存地址，以十六进制数表示</li><li>数组中有三个元素，默认值为0</li><li>JVM将堆内存中的数组的内存地址赋值给栈内存中的变量<code>arr</code></li><li>变量<code>arr</code>保存的是数组内存中的地址，因此称为引用数据类型。</li></ol><h4 id="双变量单数组存图">双变量单数组存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ArrayTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]);   <span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]);   <span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr1[<span class="number">2</span>]);   <span class="comment">// 0</span></span><br><span class="line">        arr1[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = arr1;</span><br><span class="line">        System.out.println(arr2[<span class="number">0</span>]);   <span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr2[<span class="number">1</span>]);   <span class="comment">// 10</span></span><br><span class="line">        System.out.println(arr2[<span class="number">2</span>]);   <span class="comment">// 0</span></span><br><span class="line">        arr2[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">        System.out.println(arr2[<span class="number">1</span>]);   <span class="comment">// 100</span></span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]);    <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/twoArray-jvm-memory.png" alt="oneArray-jvm-memory-"></p><h3 id="数组操作的常见问题">数组操作的常见问题</h3><ul><li><strong>数组越界</strong>：访问了数组中不存在的索引对应的元素，程序运行后会抛出数组索引越界异常，即<code>ArrayIndexOutOfBoundsException</code>。</li><li><strong>空指针异常</strong>：访问的数组已经不再指向堆内存的数据，程序运行后会抛出空指针异常，即<code>NullPointerException</code>。所有的引用类型变量，都可以赋值为一个<code>null</code>值，但是代表其中什么都没有。</li></ul><h3 id="获取数组长度">获取数组长度</h3><ul><li>格式：<code>数组名.length</code></li><li>返回类型为<code>int</code></li><li>可以推断出数组的最大索引值为<code>数组名.length - 1</code></li><li>数组一旦创建，程序运行期间，长度不可改变。</li></ul><h3 id="数组常见操作">数组常见操作</h3><h4 id="遍历数组">遍历数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取数组最值">获取数组最值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组的最大值</span></span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; max) &#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组元素反转">数组元素反转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组元素反转，其实就是对称位置的元素交换</span></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[arr.length - <span class="number">1</span> - i];</span><br><span class="line">    arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = arr.length - <span class="number">1</span>; min &lt; max; min++, max--) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[min];</span><br><span class="line">    arr[min] = arr[max];</span><br><span class="line">    arr[max] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1HJ411n7Cc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新全套黑马57期-IDEA版&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaSE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="https://www.hardape.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>01-Java入门</title>
    <link href="https://www.hardape.top/article/4af34e12.html"/>
    <id>https://www.hardape.top/article/4af34e12.html</id>
    <published>2020-05-24T02:09:12.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1HJ411n7Cc" target="_blank" rel="noopener">2020-最新全套黑马57期-IDEA版</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="Java语言发展史">Java语言发展史</h2><h3 id="Java语言">Java语言</h3><ul><li>java语言是美国Sun公司（Stanford University Network）在1995年推出的高级编程语言。</li><li>Java之父：詹姆斯·高斯林（James Gosling）</li></ul><h3 id="Java语言发展历史">Java语言发展历史</h3><ul><li>1995年推出Java语言</li><li>1996年发布Java1.0版本</li><li>1997年发布Java1.1版本</li><li>1998年发布Java1.2版本</li><li>2000年发布Java1.3版本</li><li>2002年发布Java1.4版本</li><li>2004年发布Java 5版本</li><li>2006年发布Java 6版本</li><li>2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java 7版本</li><li>2014年发布Java 8版本（公司中使用最多的版本）</li><li>2017年8月，JCP执行委员会提出将Java的发布频率改为每六个月一次，新的发布周期严格遵循时间点，将在每年的3月份和9月份发布。</li><li>2017年9月发布Java 9版本</li><li>2018年3月发布Java 10版本</li><li>2018年9月发布Java 11版本</li><li>2019年3月发布Java 12版本</li><li>2019年9月发布Java 13版本</li><li>2020年3月发布Java 14版本</li><li>…</li></ul><h2 id="Java语言跨平台原理">Java语言跨平台原理</h2><h3 id="JVM">JVM</h3><p><strong>JVM（Java Virtual Machine）</strong>：Java虚拟机，是运行Java程序的运行环境，我们编写的Java代码，都运行在JVM之上。</p><h3 id="跨平台原理">跨平台原理</h3><ul><li>在需要运行Java应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机（<strong>JVM，Java Virtual Machine</strong>）即可</li><li>注意：Java的虚拟机本身不具有跨平台功能，每个操作系统下都有不同版本的Java 虚拟机</li></ul><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200512142434494.png" alt="image-20200512142434494" style="zoom:50%;" /><h2 id="JRE和JDK">JRE和JDK</h2><h3 id="JRE">JRE</h3><ul><li><strong>JRE（Java Runtime Environment）</strong>：Java程序运行时环境，包含<code>JVM</code>和运行时所需要的<code>核心类库</code></li><li>我们想要运行一个已有的Java程序，那么只需要安装<code>JRE</code>即可，</li></ul><h3 id="JDK">JDK</h3><ul><li><strong>JDK（Java Development Kit）</strong>: Java程序开发工具包，包含<code>JRE</code>和开发人员使用的工具</li><li>其中开发工具：编译工具（<strong>javac.exe</strong>）和运行工具（<strong>java.exe</strong>）</li><li>我们想要开发一个Java程序，那么必须安装<code>JDK</code></li></ul><h3 id="JDK、JRE和JVM的关系">JDK、JRE和JVM的关系</h3><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200512143510430.png" alt="image-20200512143510430" style="zoom:50%;" /><h2 id="JDK的下载和安装">JDK的下载和安装</h2><h3 id="JDK的下载">JDK的下载</h3><p>通过<a href="http://www.oracle.com" target="_blank" rel="noopener">oracle</a>官方网站获取JDK，注意操作系统的选择</p><h3 id="JDK的安装">JDK的安装</h3><ul><li>安装路径中不要包含中文和空格。</li><li>其他下一步即可</li></ul><h3 id="JDK的安装目录">JDK的安装目录</h3><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>bin</code></strong></td><td>存放JDK的各种工具命令，<code>javac</code>和<code>java</code>就存放其中。</td></tr><tr><td><code>conf</code></td><td>存放JDK的相关配置文件</td></tr><tr><td><code>include</code></td><td>存放一些平台特定的头文件</td></tr><tr><td><code>jmods</code></td><td>存放JDK的各种模块</td></tr><tr><td><code>legal</code></td><td>存放JDK各模块的授权文档</td></tr><tr><td><code>lib</code></td><td>存放JDK工具的一些补充JAR包</td></tr></tbody></table><p>其余文件为说明性文档。</p><h2 id="第一个Java程序">第一个Java程序</h2><h3 id="Path环境变量的配置">Path环境变量的配置</h3><h4 id="为什么要配置Path环境变量">为什么要配置Path环境变量</h4><ul><li>开发Java程序，需要使用JDK提供的开发工具，而这些工具在JDK的安装目录的<code>bin</code>目录下</li><li>如果需要使用<code>javac</code>和<code>java</code>这些命令，需要在DOS窗口中的目录切换到JDK的安装目录的<code>bin</code>目录执行才能生效，而这样比较麻烦。</li><li>而DOS窗口在执行命令时，首先会到当前目录下寻找指定命令，若找不到，则会到Path环境变量中配置的目录中寻找指定命令。</li><li>所以为了在开发Java程序的时候，能够任何目录中方便地使用<code>javac</code>和<code>java</code>这些命令，我们需要配置Path环境变量。</li></ul><h4 id="如何配置Path环境变量">如何配置Path环境变量</h4><ol><li>打开 控制面板 → 系统和安全 →  系统 → 高级系统设置 → 环境变量</li><li>在系统变量中新建系统变量：变量名为<code>JAVA_HOME</code>，变量值为<code>JDK的安装目录</code></li><li>编辑系统变量中的<code>Path</code>变量，如果是win 7/8系统，在变量值框中前面输入<code>;%JAVA_HOME%\bin;</code>；如果是win 10系统，点击新建，输入<code>%JAVA_HOME%\bin</code>即可</li><li>重启DOS窗口，键入<code>java</code>有大量提示信息或键入<code>java -version</code>显示版本号即配置成功</li></ol><h3 id="HelloWorld案例">HelloWorld案例</h3><h4 id="Java程序开发运行流程">Java程序开发运行流程</h4><p>开发Java程序，需要三个步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200513145432586.png" alt="image-20200513145432586" style="zoom: 67%;" /><h4 id="HelloWorld案例的编写和执行">HelloWorld案例的编写和执行</h4><ol><li><p>新建文本文档文件，修改名称为<code>HelloWorld.java</code></p></li><li><p>用记事本打开HelloWorld.java文件，书写程序内容如下并保存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开命令提示符窗口，进入到<code>HelloWorld.java</code>所在的目录，准备进行编译和执行。</p></li><li><p><strong>编译命令</strong>：<code>javac 文件名.java</code>，即输入<code>javac HelloWorld.java</code>编译程序，此时目录中会生成编译后同名的<code>.class</code>字节码文件。</p></li><li><p><strong>执行命令</strong>：<code>java 类名</code>，即输入<code>java HelloWorld</code>执行程序，会看到输出<code>Hello World</code>，执行成功。</p></li></ol><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200512155154069.png" alt="image-20200512155154069"></p><h4 id="HelloWorld案例说明">HelloWorld案例说明</h4><ul><li><p>所有的Java程序文件都以<code>.java</code>作为文件后缀名。</p></li><li><p>每个Java语句以英文分号<code>;</code>作为结束标识。</p></li><li><p><code>public class HelloWorld</code>代表定义一个名为<code>HelloWorld</code>的公共类，类是Java中所有源代码的基本组织单位。</p></li><li><p><code>HelloWorld</code>公共类名必须和所在的<code>.java</code>文件名完全一致。</p></li><li><p><code>public static void main(String[] args)</code>表示java程序执行入口</p></li><li><p><code>System.out.println()</code> 代表打印输出语句，小括号中即为输入的内容。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1HJ411n7Cc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新全套黑马57期-IDEA版&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaSE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="https://www.hardape.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>01-Windows命令提示符(cmd)</title>
    <link href="https://www.hardape.top/article/74094e41.html"/>
    <id>https://www.hardape.top/article/74094e41.html</id>
    <published>2020-05-24T01:59:23.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a><p>命令提示符是在操作系统中，提示进行命令输入的一种工作提示符。在windows环境下，命令行程序为cmd.exe，是一个32位的命令行程序，微软Windows系统基于Windows上的命令解释程序，类似于微软的DOS操作系统。</p><h2 id="启动">启动</h2><p><code>Win + R</code>并输入<code>cmd</code>启动window系统的命令提示符</p><h2 id="常用DOS命令">常用DOS命令</h2><p><code>DOS（Disk Operating System）</code>命令是指DOS操作系统的命令，是一种面向磁盘的操作命令，主要包括目录操作类命令、磁盘操作类命令、文件操作类命令和其它命令。</p><table><thead><tr><th>常用命令</th><th>说明</th></tr></thead><tbody><tr><td><code>盘符名称: </code></td><td>切换盘符，如<code>D:</code></td></tr><tr><td><code>cd 目录</code></td><td>进入下一级目录，<code>cd</code>即 change directory</td></tr><tr><td><code>cd 目录1\目录2\...</code></td><td>进入多级目录</td></tr><tr><td><code>cd ..</code></td><td>返回上一级目录</td></tr><tr><td><code>cd \</code></td><td>返回当前盘符根路径</td></tr><tr><td><code>dir</code></td><td>查看当前路径下的内容，<code>dir</code>即 directory</td></tr><tr><td><code>cls</code></td><td>清屏，<code>cls</code> 即 clear screen</td></tr><tr><td><code>exit</code></td><td>退出命令提示符</td></tr></tbody></table><ul><li>文件(夹)名称可以通过<code>Tab</code>键补全，当输入的部分文件(夹)名称不能唯一定位一个文件(夹)时，可通过多次<code>Tab</code>键进行选择。</li><li>可以通过方向键<code>↑</code>和<code>↓</code>  切换历史命令</li><li><code>Ctrl + C</code>可以中断操作</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="cmd" scheme="https://www.hardape.top/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>01-Maven基础</title>
    <link href="https://www.hardape.top/article/d25b1825.html"/>
    <id>https://www.hardape.top/article/d25b1825.html</id>
    <published>2020-05-23T08:51:45.000Z</published>
    <updated>2020-07-04T10:01:03.048Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1HJ411n7Cc?p=896%EF%BC%8C%E5%A6%82%E6%9C%89%E4%BE%B5%E6%9D%83,%E8%AF%B7%E8%81%94%E7%B3%BB%E5%88%A0%E9%99%A4%E3%80%82%E3%80%8F" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1HJ411n7Cc?p=896，如有侵权,请联系删除。』</a></em></p></blockquote><a id="more"></a><h2 id="Maven介绍">Maven介绍</h2><h3 id="Maven的定义">Maven的定义</h3><p>官网定义</p><blockquote><p>Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information.</p></blockquote><ul><li>Maven是一个<strong>项目管理工具</strong>，它包含一个<strong>项目对象模型（POM：Project Object Model）</strong>，一组标准集合，一个项目声明周期（Project Lifecycle），一个依赖关系系统（Dependency Management System）和用来运行定义在声明周期阶段（phase）中插件（plugin）目标（goal）的逻辑。</li><li>Maven的正确发音是[ˈmeɪvn]，Maven在美国是一个口语化的词语，代表专家，内行的意思。</li></ul><h3 id="Maven的作用">Maven的作用</h3><ul><li>在Java 项目中，我们需要引用各种 jar 包，大的工程往往有几十个乃至几百个，每用到一种 jar 包，都需要手动引入工程目录，而且经常遇到玛法各种 jar 包冲突，版本冲突，如果使用 Maven ,就能使 jar 包的引入和冲突解决变得简单。</li><li>Maven能将开发者从项目构建、管理、测试等繁琐中解放出来，帮助开发者构建工具、管理jar包，编译代码。</li><li>Maven还能帮助开发者自动运行单元测试，打包，生成报表。</li><li>Maven甚至能帮助开发者部署项目，生成Web站点。</li></ul><h3 id="Maven的依赖管理">Maven的依赖管理</h3><ul><li>Maven是一个核心特性就是<strong>依赖管理</strong>，当我们涉及到多模块的项目（包含成百个模块或者子项目），管理依赖就变成一项困难的工具。Maven展示出它对处理这种情形的高度控制。</li><li>maven工程中不直接将jar包导入到工程中，而是通过在<code>pom.xml</code>文件中添加所需jar包的<strong>坐标</strong>，这样就很好地避免了jar包直接引入进来，在需要用到jar包的时候，只要查找<code>pom.xml</code>文件，再通过<code>pom.xml</code>文件中的坐标，到一个专门用于“存放Jar包的仓库”，称作<strong>maven仓库，即 repository</strong>中根据坐标从而找到这些jar包，再把这些jar包拿去执行。</li><li>为了解决上述过程使用jar包的速度慢的问题，maven中有索引的概念，通过建立索引，可以大大提高加载jar包的速度，使得maven加载jar包的方式和将jar包放置在本地工程文件中的加载方式速度基本一致。</li></ul><h3 id="Maven的一键构建">Maven的一键构建</h3><p>Maven规范化构建流程如下：</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/maven-process.png" alt="maven-construction-process"></p><p>maven将项目构建的过程进行标准化，每个阶段使用一个命令来完成，maven自身集成了 tomcat   插件</p><h2 id="Maven的使用">Maven的使用</h2><h3 id="Maven的下载和安装">Maven的下载和安装</h3><h4 id="下载">下载</h4><p><a href="https://maven.apache.org/" target="_blank" rel="noopener">Apache Maven官网</a></p><h4 id="安装">安装</h4><ul><li>解压压缩包即可</li><li>注意安装目录建议不包含中文和空格</li></ul><h3 id="Maven的环境配置">Maven的环境配置</h3><ul><li><p>前提：JDK安装并环境变量配置成功</p></li><li><p>添加环境变量名<code>MAVEN_HOME</code>，变量值即Maven的安装目录</p></li><li><p>在<code>path</code>环境变量名中添加变量值<code>%MAVEN_HOME%\bin</code></p></li><li><p>在cmd命令窗口中输入<code>mvn -v</code>目录显示maven和java的版本号即配置成功</p></li></ul><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200523155052756.png" alt="image-20200523155052756"></p><h3 id="Maven的目录">Maven的目录</h3><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>📁 bin</td><td>存放了maven的命令</td></tr><tr><td>📁 boot</td><td>存放了一些maven本身的引导程序，如类加载器等</td></tr><tr><td>📁 conf</td><td>存放了maven的一些配置文件</td></tr><tr><td>📁 lib</td><td>存放了maven本身运行所需的一些jar包</td></tr></tbody></table><h2 id="Maven仓库">Maven仓库</h2><h3 id="概述">概述</h3><p>Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库，Maven 仓库用于放置一些项目需要的构建和jar包，能帮助我们管理构件。</p><h3 id="Maven仓库的分类">Maven仓库的分类</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/maven-repository.png" alt="maven-repository"></p><h4 id="本地-local-仓库">本地(local)仓库</h4><ul><li>用来存储从从远程仓库或中央仓库下载的插件和jar包，Maven 的本地仓库，在安装 Maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建。</li><li>项目使用的一些插件和jar包，优先从本地仓库查找</li><li>默认本地仓库位置为<code>${user.dir}/.m2/repository</code>，<code>${user.dir}</code>表示windows用户目录。</li></ul><h4 id="远程-remote-仓库">远程(remote)仓库</h4><ul><li>如果本地需要插件或者jar包，本地仓库没有，优先去远程仓库下载后再使用，它是开发人员自己定制的仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件。</li><li>远程仓库通常被称作<strong>私服</strong></li><li>远程仓库可以在互联网内也可以在局域网内</li></ul><h4 id="中央-central-仓库">中央(central)仓库</h4><ul><li>中央仓库服务于整个互联网，它是由Maven团队自己维护，里面存储了非常全的jar包，它包含了世界上大部分流行的开源项目构件。</li><li>在maven软件中内置一个远程仓库地址：<a href="http://repo1.maven.org/maven2/" target="_blank" rel="noopener">http://repo1.maven.org/maven2/</a></li></ul><h3 id="仓库间的关系">仓库间的关系</h3><ul><li>当我们启动一个 maven 工程的时候， maven 工程会通过 pom 文件中 jar 包的坐标去本地仓库找对应 jar 包。</li><li>默认情况下，如果本地仓库没有对应 jar 包，maven 工程会自动去中央仓库下载 jar 包到本地仓库。</li><li>在公司中，如果本地没有对应 jar 包，会先从私服下载 jar 包。</li><li>如果私服中没有 jar 包，可以从中央仓库下载，也可以从本地上传。</li></ul><h3 id="全局setting与用户setting">全局setting与用户setting</h3><ul><li>maven仓库地址、私服等配置信息需要在<code>setting.xml</code>文件中配置，分为全局配置和用户配置。</li><li>在maven安装目录下有<code>conf\setting.xml</code>文件，此<code>setting.xml</code>文件用于maven的所有project项目，它作为maven的全局配置</li><li>如需要个性配置则需要在用户配置中设置，用户配置的<code>setting.xml</code>文件默认位置在：<code>${user.dir} /.m2/settings.xml</code>目录中,<code>${user.dir}</code> 指windows 中的用户目录。</li><li>maven会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</li></ul><h3 id="本地仓库的配置">本地仓库的配置</h3><p>在Maven软件安装目录中，可以通过在<code>conf/settting.xml</code>文件添加<code>&lt;localRepository&gt;</code>b标签配置本地仓库位置</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200523162424586.png" alt="image-20200523162424586"></p><h3 id="中央仓库的替换">中央仓库的替换</h3><ul><li><p>由于在国内访问默认的Maven仓库速度太慢，故推荐将中央仓库替换成阿里云的中央仓库</p></li><li><p>在<code>setting.xml</code>文件的<code>&lt;mirrors&gt;</code>标签中添加<code>&lt;mirror&gt;</code>配置镜像URL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;mirrors&gt;</code>可以配置多个<code>&lt;mirror&gt;</code>，每个<code>&lt;mirror&gt;</code>有<code>id</code>、<code>mirrorOf</code>、<code>name</code>、<code>url</code>属性</p><ul><li><code>id</code>：唯一标识一个mirror，查询同类仓库的顺序是按照id的字母排列顺序</li><li><code>mirrorOf</code>：党员一个镜像的替代位置，<code>central</code>就表示代替默认的中央仓库。</li><li><code>name</code>：仓库名</li><li><code>url</code>：镜像仓库地址</li></ul></li></ul><h3 id="JDK的配置">JDK的配置</h3><h4 id="全局配置">全局配置</h4><p>在maven文件夹下的<code>settings.xm</code>l中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="项目配置">项目配置</h4><p>在maven项目的pom.xml中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven工程">Maven工程</h2><h3 id="Maven工程目录结构">Maven工程目录结构</h3><table><thead><tr><th>maven工程的目录结构</th><th>说明</th></tr></thead><tbody><tr><td>📁 .settings</td><td>存放maven工具生成的文件</td></tr><tr><td>📁 src</td><td>存放源代码</td></tr><tr><td>📁 target</td><td>存放编译生成的<code>.class</code>文件</td></tr><tr><td>📄 pom.xml</td><td>mave工程的核心配置文件，如坐标信息</td></tr></tbody></table><p>作为一个maven工程，它的<code>src</code>目录和<code>pom.xml</code>是必须的</p><p><strong>src</strong>目录结构如下：</p><p>▼📂 src</p><p>​▼📂 main</p><p>​▷ 📁 java→ 【存放放入项目的源码，即<code>.java</code>文件】</p><p>​▷ 📁 resources  → 【存放项目资源文件，如<code>spring</code>,<code>hibernate</code>配置文件】</p><p>​▷ 📁 webapp → 【web工程有的目录，存放页面资源，js，css，图片等】</p><p>​▼📂 test</p><p>​▷ 📁 java→ 【存放测试的源码，如<code>JUnit</code>测试类】</p><p>​▷ 📁 resources  → 【存放测试的配置文件】</p><h3 id="Maven工程添加坐标">Maven工程添加坐标</h3><p>每个maven工程都需要定义本工程的坐标，坐标是mave对jar包的身份定义，在Maven中是通过配置<code>pom.xml</code>文件来定义工程的坐标</p><ul><li>Maven的配置文件<code>pom.xml</code>中的信息大致可以分为三类：<strong>项目自身信息</strong>、<strong>项目运行所依赖的jar包信息</strong>、<strong>项目运行环境信息</strong>（比如 jdk，tomcat信息）。</li><li>坐标信息说明<ul><li><code>groupId</code>标签：公司组织的名称</li><li><code>artifactId</code>标签：项目名</li><li><code>version</code>标签：版本号</li></ul></li></ul><h3 id="Maven工程的运行">Maven工程的运行</h3><ul><li>进入maven工程目录，cmd运行<code>mvn tomcat:run</code>命令</li><li>根据提示信息在浏览器访问</li></ul><h2 id="Maven常用命令">Maven常用命令</h2><p>我们可以在cmd中通过一系列的maven命令来对maven工程进行编译、测试、运行、打包、安装、部署。</p><h3 id="mvn-clean">mvn clean</h3><p><code>mvn clean</code>是maven工程的清理命令，会删除<code>target</code>目录及内容</p><h3 id="mvn-complie">mvn complie</h3><p><code>mvn complie</code>是maven工程的编译命令，作用是将<code>src/main/java</code>下的文件编译为class文件输出到<code>target</code>目录中的<code>classes</code>目录下</p><h3 id="mvn-test">mvn test</h3><p><code>mvn test</code>是maven工程的测试命令，将<code>src/test/java</code>下的文件编译为class文件输出到<code>target</code>目录中的<code>test-classes</code>目录下并执行其中的测试类。</p><h3 id="mvn-package">mvn package</h3><p><code>mvn package</code>是maven工程的打包命令，根据<code>pom.xml</code>文件中的<code>packaging</code>标签配置进行打包，该包会被放置在<code>target</code>目录中。</p><h3 id="mvn-install">mvn install</h3><p><code>mvn install</code>是maven工程的安装命令，会将<code>maven</code>工程打包并发布到本地仓库</p><blockquote><p>在<code>complie</code> → <code>test</code> → <code>package</code> → <code>install</code>这些命令中，当后面的命令执行时，前面的命令操作过程也都会自动执行。</p></blockquote><h2 id="Maven的生命周期">Maven的生命周期</h2><p>maven对项目构建过程分为<strong>三套相互独立</strong>的生命周期。</p><ul><li><code>Clean Lifecycle</code>：清理声明周期，在进行真正地构建之前进行一些清理工作，即<code>clean</code>命令。</li><li><code>Default Lifecycle</code>：默认声明周期，构建的核心部分，编译，测试，打包，部署等等，即<code>complile</code>，<code>test</code>，<code>package</code>，<code>install</code>，<code>deploy</code>命令。</li><li><code>Site Lifecycle</code>：站点声明周期，生成项目报告、站点，发布站点。</li></ul><h2 id="Maven的概念模型">Maven的概念模型</h2><p>Maven是一个<strong>项目管理工具</strong>，它包含一个<strong>项目对象模型（POM：Project Object Model）</strong>，一组标准集合，一个项目声明周期（Project Lifecycle），一个依赖关系系统（Dependency Management System）和用来运行定义在声明周期阶段（phase）中插件（plugin）目标（goal）的逻辑。</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/maven-concept-model.png" alt="maven-concept-model"></p><h3 id="项目对象模型（POM）">项目对象模型（POM）</h3><p>一个maven工程都有一个<code>pom.xml</code>文件，通过<code>pom.xml</code>文件定义项目自身信息、项目运行所依赖的jar包信息、项目的坐标、项目运行环境信息(如jdk,tomcat信息)等。</p><h3 id="依赖管理系统">依赖管理系统</h3><p>通过maven的依赖管理对项目所依赖的jar包进行统一管理，一个依赖的jar包信息包括公司组织的名称、项目名和版本号。</p><h3 id="项目声明周期">项目声明周期</h3><p>使用maven完成的项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven将这些过程规范为一个生命周期，如下所示是声明周期的各个阶段：</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/maven-process.png" alt="maven-construction-process"></p><p>maven通过执行一些简单命令即可实现声明周期的各个过程。</p><h3 id="标准集合">标准集合</h3><p>maven将整个项目管理过程定义一组标准，比如：通过maven构建工程有标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。</p><h3 id="插件目标">插件目标</h3><p>maven管理项目生命周期都是基于插件完成的，每一个构建项目的命令都对应了一个maven底层的一个插件(<code>plugin</code>)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1HJ411n7Cc?p=896%EF%BC%8C%E5%A6%82%E6%9C%89%E4%BE%B5%E6%9D%83,%E8%AF%B7%E8%81%94%E7%B3%BB%E5%88%A0%E9%99%A4%E3%80%82%E3%80%8F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1HJ411n7Cc?p=896，如有侵权,请联系删除。』&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="项目管理工具" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Maven" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Maven/"/>
    
    
      <category term="Maven" scheme="https://www.hardape.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>21-JS的高级进阶-ES6</title>
    <link href="https://www.hardape.top/article/16ed1219.html"/>
    <id>https://www.hardape.top/article/16ed1219.html</id>
    <published>2020-05-08T00:04:56.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1Kt411w7MP" target="_blank" rel="noopener">javaScript进阶面向对象ES6</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="ES6简介">ES6简介</h2><h3 id="什么是ES6">什么是ES6</h3><ul><li>ES的全称是ECMScript，它是由ECMA国际标准化组织制定的<strong>一项脚本语言的标准化规范</strong></li><li>ECMAScript6（简称ES6）是于2015年6月正式发布的JavaScript语言的标准，正式名为ECMAScript 2015（ES2015）。它的目标是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言</li></ul><table><thead><tr><th>年份</th><th>版本</th></tr></thead><tbody><tr><td>2015年6月</td><td>ES2015</td></tr><tr><td>2016年6月</td><td>ES2016</td></tr><tr><td>2017年6月</td><td>ES2017</td></tr><tr><td>2018年6月</td><td>ES2018</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p><strong>注意</strong>：接下来学习的ES6泛指ES2015及之后的新增特性，虽然之后的版本应当称为ES7、ES8等。</p><h3 id="为什么使用ES6">为什么使用ES6</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6的新增语法">ES6的新增语法</h2><h3 id="let">let</h3><p>let是ES6中新增的用于声明变量的关键字。</p><h4 id="let声明的变量只在所处的块级有效">let声明的变量只在所处的块级有效</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. let声明的变量具有块级作用域</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure><h4 id="let不存在变量提升">let不存在变量提升</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. let不存在变量提升</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// Cannot access 'd' before initialization</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="let声明的变量有暂时性死区特性">let声明的变量有暂时性死区特性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. let声明的变量有暂时性死区的特性</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num1); <span class="comment">//10</span></span><br><span class="line">    <span class="built_in">console</span>.log(num2); <span class="comment">//Cannot access 'num2' before initialization</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> num2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="经典面试题">经典面试题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">// 2</span></span><br><span class="line">arr[<span class="number">1</span>](); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>以上代码关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">// 0</span></span><br><span class="line">arr[<span class="number">1</span>](); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>以上代码的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的自己上一级作用域(循环产生的块级作用域)下的i值</p><h3 id="const">const</h3><p>const是ES6新增的用于声明常量的关键字，常量就是值(内存地址)不能变化的量</p><h4 id="const声明的常量具有块级作用域">const声明的常量具有块级作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. const声明的变量具有块级作用域</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><h4 id="const声明常量是必须赋值">const声明常量是必须赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h4 id="const声明的常量赋值后，值-内存地址-不能修改">const声明的常量赋值后，值(内存地址)不能修改</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. const声明的常量赋值后，内存地址不能修改</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">PI = <span class="number">100</span>; <span class="comment">//Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = [<span class="string">'blue'</span>, <span class="string">'red'</span>];</span><br><span class="line">color[<span class="number">0</span>] = <span class="string">'green'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(color);  <span class="comment">// ["green", "red"]</span></span><br><span class="line">color = [<span class="string">'yellow'</span>,<span class="string">'black'</span>];  <span class="comment">//Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="var、let、const的区别">var、let、const的区别</h3><ul><li>使用<strong>var</strong>声明的变量，其作用域为<strong>该语句所在的函数内，且存在变量提升现象</strong>。</li><li>使用<strong>let</strong>声明的变量，其作用域为<strong>该语句所在的代码块内，不存在变量提升</strong>。</li><li>使用<strong>const</strong>声明的是常量，在后面出现的代码中<strong>不能再修改该常量的值</strong>。</li><li>由于const声明的常量JS解析引擎不需要实时监控其变化，效率比var和let高，故如果存储的数据不需要变量，尽量使用<strong>const</strong>关键字，比如<strong>函数的定义</strong>，<strong>数学公式中恒定不变的值</strong>。</li></ul><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可更改</td><td>值可更改</td><td>值不可更改</td></tr></tbody></table><h3 id="解构赋值">解构赋值</h3><p>ES6中允许从数组或者对象中提取值，按照对应位置，对变量赋值。</p><h4 id="数组解构">数组解构</h4><ul><li>数组结构允许我们按照一一对应的关系从数组中提取值然后将值赋值给变量</li><li>如果解构不成功，变量的值为<code>undefined</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="对象解构">对象解构</h4><p>对象解构允许我们使用变量的名字匹配对象的属性，匹配成功将对象属性的值赋值给变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 对象解构</span></span><br><span class="line"><span class="keyword">let</span> stu = &#123; <span class="attr">sname</span>: <span class="string">'辛猿毅码'</span>, <span class="attr">sage</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="comment">// 解构的变量名和对象属性名一致</span></span><br><span class="line"><span class="keyword">var</span> &#123; sname, sage &#125; = stu;</span><br><span class="line"><span class="built_in">console</span>.log(sname); <span class="comment">// 辛猿毅码</span></span><br><span class="line"><span class="built_in">console</span>.log(sage);  <span class="comment">// 18</span></span><br><span class="line"><span class="comment">// 解构的变量名和对象属性名不一致</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">sname</span>: myName, <span class="attr">sage</span>: myAge &#125; = stu;</span><br><span class="line"><span class="built_in">console</span>.log(myName); <span class="comment">// 辛猿毅码</span></span><br><span class="line"><span class="built_in">console</span>.log(myAge); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数">箭头函数</h3><p>箭头函数是ES6中新增的定义函数的方式，是用来用来简化定义函数语法的。</p><h4 id="语法">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 函数名 = <span class="function">(<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2</span>, ...]</span>) =&gt;</span> &#123; 函数体 &#125;</span><br></pre></td></tr></table></figure><h4 id="例子">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义箭头函数</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是箭头函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用箭头函数</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h4 id="省略大括号">省略大括号</h4><p>如果箭头函数的函数体中只有一句代码，且代码的执行结构就是返回值，可以省略大括号和return</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果函数体只有一句返回值代码，可省略大括号和return</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">3</span>, <span class="number">5</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h4 id="省略小括号">省略小括号</h4><p>如果箭头函数的形参只有一个，可以省略小括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果形参只有一个，可省略小括号</span></span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">num</span> =&gt;</span> num * num;</span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">9</span>)); <span class="comment">// 81</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数中的this">箭头函数中的this</h4><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是<strong>函数定义位置的上下文this</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数中的this</span></span><br><span class="line"><span class="comment">// 1. 解析:fun返回值的箭头函数中的this指向fun函数作用域中的this，即obj</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'辛猿毅码'</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> resFun = fun.call(obj); <span class="comment">//&#123;name: "辛猿毅码"&#125;</span></span><br><span class="line">resFun(); <span class="comment">//&#123;name: "辛猿毅码"&#125;</span></span><br><span class="line"><span class="comment">// 2. 解析: 由于对象是不能产生作用域的，故user对象中的say箭头函数中的this的上下文是全局作用域，故其指向window</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    say: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">user.say();  <span class="comment">//window 100</span></span><br></pre></td></tr></table></figure><h4 id="注意">注意</h4><ul><li>在箭头函数中无法使用<strong>arguments</strong></li><li>箭头函数是不能提升的，所以需要在使用之前定义。</li></ul><h3 id="剩余参数">剩余参数</h3><p>ES6新增的剩余参数语法允许我们将一个不定数量的参数表示为为一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">first, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(first, args); </span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>) <span class="comment">// 10 [20,30]</span></span><br></pre></td></tr></table></figure><h4 id="利用剩余参数求任意个数的和">利用剩余参数求任意个数的和</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用剩余参数求任意个数的和</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">...nums</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">num</span> =&gt;</span> res += num);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><h4 id="剩余参数和结构配合使用">剩余参数和结构配合使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 剩余参数和结构配合使用</span></span><br><span class="line"><span class="keyword">let</span> students = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>, <span class="string">'赵六'</span>];</span><br><span class="line"><span class="keyword">let</span> [first, ...others] = students;</span><br><span class="line"><span class="built_in">console</span>.log(first);     <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(others);    <span class="comment">// ['李四', '王五', '赵六']</span></span><br></pre></td></tr></table></figure><h2 id="ES6的内置对象扩展">ES6的内置对象扩展</h2><h3 id="Array的扩展方法">Array的扩展方法</h3><h4 id="扩展运算符">扩展运算符</h4><p><strong>扩展运算符(<code>...</code>)<strong>也称为</strong>展开语法(Spread syntax)</strong>，可以将数组或者对象转为用逗号分隔的参数序列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...arr);   <span class="comment">// ...arr为1,2,3,相当于console.log(1,2,3)，故结果为1 2 3</span></span><br></pre></td></tr></table></figure><p>扩展运算符可以应用于<strong>合并数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展运算符用于合并数组</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3);      <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line">arr1.push(...arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p>扩展运算符可以<strong>将可以迭代的伪(类)数组或可遍历(迭代)对象转换为真正的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="built_in">document</span>.getElementByTagName(<span class="string">'div'</span>);</span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure><h4 id="Array-from">Array.from()</h4><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例并返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike[, mapFn[, thisArg]])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>arrayLike</code></td><td>想要转换成数组的伪数组对象或可迭代对象</td></tr><tr><td><code>mapFn</code></td><td>可选，如果指定了该参数，新数组中的每个元素会执行该回调函数。</td></tr><tr><td><code>thisArg</code></td><td>可选，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.from()将伪数组装换为数组</span></span><br><span class="line"><span class="keyword">var</span> likeArr = &#123;</span><br><span class="line">    <span class="string">"0"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"1"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="string">"2"</span>: <span class="string">"3"</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> trueArr = <span class="built_in">Array</span>.from(likeArr, item =&gt; item * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(trueArr);  <span class="comment">//[2,4,6]</span></span><br></pre></td></tr></table></figure><h4 id="find">find()</h4><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.find(callback[, thisArg])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>callback</code></td><td>在数组每一项上执行的函数，接收 3 个参数</td></tr><tr><td><code>thisArg</code></td><td>可选，执行回调时用作<code>this</code> 的对象。</td></tr></tbody></table><p>其中<code>callback</code>接收三个参数</p><table><thead><tr><th>callback的参数</th><th>说明</th></tr></thead><tbody><tr><td><code>element</code></td><td>当前遍历到的元素</td></tr><tr><td><code>index</code></td><td>当前遍历到的索引</td></tr><tr><td><code>array</code></td><td>数组本身</td></tr></tbody></table><h4 id="findIndex">findIndex()</h4><p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。否则返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.findIndex(callback[, thisArg])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>callback</code></td><td>在数组每一项上执行的函数，接收 3 个参数</td></tr><tr><td><code>thisArg</code></td><td>可选，执行回调时用作<code>this</code> 的对象。</td></tr></tbody></table><p>其中<code>callback</code>接收三个参数</p><table><thead><tr><th>callback的参数</th><th>说明</th></tr></thead><tbody><tr><td><code>element</code></td><td>当前遍历到的元素</td></tr><tr><td><code>index</code></td><td>当前遍历到的索引</td></tr><tr><td><code>array</code></td><td>数组本身</td></tr></tbody></table><h4 id="includes">includes()</h4><p><code> includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(valueToFind[, fromIndex])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>valueToFind</code></td><td>需要查找的元素值,比较字符串和字符时是区分大小写。</td></tr><tr><td><code>fromIndex</code></td><td>从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜 （即使从末尾开始往前跳 <code>fromIndex</code> 的绝对值个索引，然后往后搜寻）。默认为 0。</td></tr></tbody></table><h3 id="String的扩展方法">String的扩展方法</h3><h4 id="模板字符串">模板字符串</h4><p><strong>模板字面量</strong>是ES6中允许嵌入表达式的字符串字面量。可以使用多行字符串和字符串插值功能。它们在ES2015规范的先前版本中被称为“<strong>模板字符串</strong>”。模板字符串使用反引号 (``) 来代替普通字符串中的用双引号和单引号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`这个一个模板字符串`</span></span><br></pre></td></tr></table></figure><p>模板字符串中可以使用<code>${变量名/表达式}</code><strong>解析变量和表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串可以使用$&#123;&#125;解析变量和表达式</span></span><br><span class="line"><span class="keyword">let</span> myNickname = <span class="string">'辛猿毅码'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, my nickname is <span class="subst">$&#123;myNickname&#125;</span>`</span>); <span class="comment">//Hello, my nickname is 辛猿毅码</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`4 + 5 = <span class="subst">$&#123;num1 + num2&#125;</span>`</span>); <span class="comment">// 4 + 5 = 9</span></span><br></pre></td></tr></table></figure><p>模板字符串中可以使用<code>${函数名()}</code><strong>调用函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串可以使用$&#123;&#125;调用函数</span></span><br><span class="line"><span class="keyword">const</span> rap = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'淡黄的长裙，蓬松的头发'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`请听我这一段rap:<span class="subst">$&#123;rap()&#125;</span>`</span>); <span class="comment">// 请听我这一段rap:淡黄的长裙，蓬松的头发</span></span><br></pre></td></tr></table></figure><p>模板字符串中可以<strong>换行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lis = <span class="string">`&lt;ul class="nickname"&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;Tom&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;Jack&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;Michael&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure><h4 id="startsWith-和endsWith">startsWith()和endsWith()</h4><ul><li><code>startsWith()</code>：用来判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 <code>true</code> 或 <code>false</code>。</li><li><code>endsWith</code>：用来判断当前字符串是否以另外一个给定的子字符串结尾，并根据判断结果返回 <code>true</code> 或 <code>false</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.startsWith(searchString[, position])</span><br><span class="line">str.endsWidth(searchString[, position])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>searchString</code></td><td>要搜索的子字符串。</td></tr><tr><td><code>position</code></td><td>在 <code>str</code> 中搜索 <code>searchString</code> 的开始位置，默认值为 0，也就是真正的字符串开头处。</td></tr></tbody></table><h4 id="repeat">repeat()</h4><p><code>repeat()</code>构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本，即将原字符串重复n次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.repeat(count)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>count</code></td><td>介于0和正无穷大之间的整数 : [0, +∞) 。表示在新构造的字符串中重复了多少遍原字符串。</td></tr></tbody></table><h4 id="Set数据结构">Set数据结构</h4><p>ES6提供了新的数据结构Set，它类似于数组，但是<strong>成员的值都是唯一的</strong>，没有重复的值。</p><p><strong>Set的初始化</strong></p><p>Set本身是一个<strong>构造函数</strong>，用来生成Set数据结构，Set中有属性<strong>size</strong>定义数据的个数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">conlose.log(<span class="keyword">set</span>.size); // 0</span><br></pre></td></tr></table></figure><p>Set构造函数可以接受<strong>一个数组或可迭代对象作为参数</strong>，用来初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组初始化Set</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// Set(5) &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.size); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><strong>Set的实例方法</strong></p><ul><li><code>add(value)</code>：添加某个值，返回Set结构本身</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为Set的成员</li><li><code>clear()</code>：清除所有成员，没有返回值</li></ul><p><strong>Set的遍历</strong></p><p>Set结构的实例和数组一样，可以通过<code>forEach</code>方法进行遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mySet.forEach(callback[, thisArg])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>callback</code></td><td>为集合中每个元素执行的回调函数，该函数接收三个参数</td></tr><tr><td><code>thisArg</code></td><td>回调函数执行过程中的 <code>this</code> 值。</td></tr></tbody></table><p>其中<code>callback</code>接收三个参数</p><table><thead><tr><th>callback的参数</th><th>说明</th></tr></thead><tbody><tr><td><code>currentValue</code></td><td>正在被操作的元素</td></tr><tr><td><code>currentKey</code></td><td>由于集合没有索引，所以 <code>currentKey </code>也表示这个正在被操作的元素。</td></tr><tr><td><code>set</code></td><td>调用当前 <code>forEach</code> 方法的集合对象</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1Kt411w7MP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javaScript进阶面向对象ES6&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://www.hardape.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>20-JS的高级进阶-正则表达式</title>
    <link href="https://www.hardape.top/article/33a87acb.html"/>
    <id>https://www.hardape.top/article/33a87acb.html</id>
    <published>2020-05-08T00:03:39.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1Kt411w7MP" target="_blank" rel="noopener">javaScript进阶面向对象ES6</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="正则表达式概述">正则表达式概述</h2><h3 id="概念">概念</h3><p>**正则表达式(Regular Expressioon)**是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p><h3 id="作用">作用</h3><ul><li>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线，昵称输入框中可以输入中文(<strong>匹配</strong>)。</li><li>正则表达式还常用于过滤掉页面中内容总的一些敏感词(<strong>替换</strong>)</li><li>正则表达式还用于从字符串中提取特定部分(<strong>提取</strong>)</li></ul><h3 id="特点">特点</h3><ul><li>灵活性、逻辑性和功能性非常强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂。</li><li>实际开发中，一般都是直接复制写好的正则表达式，但是要求会用正则表达式并且根据实际情况修改正则表达式。</li></ul><h2 id="正则表达式在JavaScript中的使用">正则表达式在JavaScript中的使用</h2><h3 id="创建正则表达式">创建正则表达式</h3><p>在JavaScript中，可以通过两种方式创建一个正则表达式</p><h4 id="通过RegExp对象">通过RegExp对象</h4><p>第一种方式，通过<strong>调用RegExp对象的构造函数创建</strong>正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过创建RegExp对象来创建正则表达式</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/表达式/</span>);</span><br></pre></td></tr></table></figure><h4 id="通过字面量">通过字面量</h4><p>第二种方式，通过<strong>字面量</strong>创建正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 2. 通过字面量创建正则表达式</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="regexp">/表达式/</span>;</span><br></pre></td></tr></table></figure><h4 id="注意">注意</h4><ul><li><code>//</code>中间放表达式就是正则字面量</li><li>正则表达式中不需要加引号</li></ul><h3 id="测试正则表达式">测试正则表达式</h3><p><code>test()</code>正则对象方法用于检测字符串是否符合正则表达式的规则，该对象会返回<code>true</code>或<code>false</code>，其参数是测试字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regexObj.test(str)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>regexObj</code></td><td>正则表达式</td></tr><tr><td><code>str</code></td><td>测试的文本</td></tr></tbody></table><h2 id="正则表达式中的特殊字符">正则表达式中的特殊字符</h2><h3 id="正则表达式组成">正则表达式组成</h3><p>一个正则表达式可以有简单的字符构成，比如<code>/abc/</code>，<strong>如果正则表达式中都是简单字符，那么只要含有这一系列简单字符字符串都匹配成功</strong>；也可以是简单和特殊字符的组合，比如<code>/ab*c/</code>，其中特殊字符也被称为<strong>元字符</strong>，在组织表达式中是具有特殊意义的专用符号，如<code>^</code>、<code>$</code>、<code>+</code>等。</p><p>特殊字符非常多，可以参考</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN-正则表达式</a></li><li><a href="http://tool.oschina.net/regex" target="_blank" rel="noopener">正则测试工具</a></li><li><a href="http://c.runoob.com/" target="_blank" rel="noopener">菜鸟工具</a></li></ul><h3 id="非打印字符">非打印字符</h3><table><thead><tr><th>非打印字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\cx</code></td><td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td><code>\f</code></td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td><code>\r</code></td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td><code>\t</code></td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h3 id="边界符">边界符</h3><p>正则表达式中的边界符(位置符)用来<strong>提示字符所处的位置</strong>，主要有两个字符。</p><table><thead><tr><th>便捷付</th><th>说明</th></tr></thead><tbody><tr><td><code>^</code></td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td><code>$</code></td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><p><strong>注意</strong>：如果<code>^</code>和<code>$</code>在一起，表示必须是精确匹配。</p><h4 id="例子">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 边界符^和$</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/abc/</span>; <span class="comment">// /abc/只要包含abc这个字符串返回的都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abc'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abcd'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'dabc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'abc'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'abcd'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'dabc'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/abc$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">'abc'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">'abcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">'dabc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/^abc$/</span> <span class="comment">// 精确匹配，要求必须是abc字符串才符合规范</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">'abc'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">'abcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">'dabc'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">'abcabc'</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="字符类">字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个即可。<strong>所有可供选择的字符都放在方括号内</strong>。</p><h4 id="方括号">[]方括号</h4><p>字符串只要包含方括号内字符串中的任意一个字符即匹配成功。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/[abc]/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'andy'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'red'</span>));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[abc]$/</span>; <span class="comment">// 三选一，只能是a或者b或c才能返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'abc'</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'andy'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'a'</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'b'</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'c'</span>));    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="方括号内部范围符">[-]方括号内部范围符 -</h4><p>方括号内部加上<code>-</code>表示<strong>范围</strong>，只要在该范围内的字符都返回true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 26个英文小写字母任何一个字母返回 true</span></span><br><span class="line">/^[a-z]$/.test(<span class="string">'c'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="方括号内部取反符">[<sup>]方括号内部取反符</sup></h4><p>方括号内部加上<code>^</code>表示<strong>取反</strong>，写在要取反的模式的前面，只要包含方括号内的字符都返回false,注意和边界符<code>^</code>区别开来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[^a-z]$/.test(<span class="string">'c'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="字符组合">字符组合</h4><p>方括号内部可以使用字符组合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符组合，26个英文字母(大小写都可以)任何一个字母返回true</span></span><br><span class="line">/^[a-zA-Z]$/.test(<span class="string">'C'</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="量词符">量词符</h3><p>量词符用来<strong>设定某个模式出现的次数</strong>，量词符写在要规定次数的模式的后面</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>重复零次或更多次</td></tr><tr><td><code>+</code></td><td>重复一次或更多次</td></tr><tr><td><code>?</code></td><td>重复零次或一次</td></tr><tr><td><code>{n}</code></td><td>重复n次</td></tr><tr><td><code>{n,}</code></td><td>重复n次或更多次</td></tr><tr><td><code>{n,m}</code></td><td>重复n到m次，注意中间不能有空格</td></tr></tbody></table><h3 id="括号">括号</h3><ul><li><strong>大括号{}</strong>：量词符，里面表示重复次数</li><li><strong>中括号[]</strong>：字符集合，匹配方括号中的任意字符</li><li><strong>小括号()</strong>：表示优先级</li></ul><h3 id="预定义类">预定义类</h3><p>预定义类指的是<strong>某些常见模式的简写方式</strong></p><table><thead><tr><th>预定义类</th><th>说明</th></tr></thead><tbody><tr><td><code>\d</code></td><td>匹配0-9之间的任一数字，相当于<code>[0-9]</code></td></tr><tr><td><code>\D</code></td><td>匹配所有0-9以外的字符，相当于<code>[^0-9]</code></td></tr><tr><td><code>\w</code></td><td>匹配任意的字母、数字和下划线，相当于<code>[A-Za-z0-9_]</code></td></tr><tr><td><code>\W</code></td><td>除所有字母、数字和下划线以为的字符，相当于<code>[^A-Za-z0-9_]</code></td></tr><tr><td><code>\s</code></td><td>匹配空格(包括换行符、制表符、空格符等)，相当于<code>[\t\r\n\v\f]</code></td></tr><tr><td><code>\S</code></td><td>匹配非空格的字符，相当于<code>[^\t\r\n\v\f]</code></td></tr></tbody></table><h3 id="其他特殊字符">其他特殊字符</h3><table><thead><tr><th>特殊字符</th><th>说明</th></tr></thead><tbody><tr><td>|</td><td>指明两项之间的一个选择。</td></tr><tr><td><code>.</code></td><td>匹配除换行符 \n 之外的任何单字符。</td></tr><tr><td><code>\</code></td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘<code>n</code>’ 匹配字符 ‘n’。’<code>\n</code>’ 匹配换行符。序列 ‘<code>\\</code>’ 匹配 “\”，而 ‘<code>\(</code>’ 则匹配 “(”。</td></tr></tbody></table><h2 id="常用特殊正则表达式">常用特殊正则表达式</h2><blockquote><p>详见<a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">菜鸟工具-正则表达式</a></p></blockquote><ul><li>汉字：<strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>{0,}$</strong></li><li>Email地址：<strong><code>^\w+([-+.]\w+)\*@\w+([-.]\w+)\*\.\w+([-.]\w+)\*$</code></strong></li></ul><ul><li>域名：<strong><code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.?</code></strong></li><li>InternetURL：<strong><code>[a-zA-z]+://[^\s]\* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]\*)?$</code></strong></li><li>手机号码：<strong><code>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></strong></li><li>电话号码(“XXX-XXXXXXX”、“XXXX-XXXXXXXX”、“XXX-XXXXXXX”、“XXX-XXXXXXXX”、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：<strong><code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></strong></li></ul><h2 id="正则表达式参数">正则表达式参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/表达式/[<span class="keyword">switch</span>]</span><br></pre></td></tr></table></figure><p>switch(也称为修饰符)规定表达式按照什么样的模式匹配，有三种值：</p><ul><li><code>g</code>：全局匹配</li><li><code>i</code>：忽略大小写</li><li><code>gi</code>/<code>ig</code>：全局匹配+忽略大小写</li></ul><h2 id="正则表达式中的替换">正则表达式中的替换</h2><h3 id="replace替换">replace替换</h3><p><code>replace()</code>方法可以实现替换字符操作，用来替换的参数可以是一个字符字符串或是一个正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.replace(regexp|substr, newSubStr)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>regexp</code></td><td>一个RegExp对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</td></tr><tr><td><code>substr</code></td><td>一个将被 <code>newSubStr</code> 替换的字符串。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。</td></tr><tr><td><code>newSubStr</code></td><td>用于替换掉第一个参数在原字符串中的匹配部分的字符串</td></tr></tbody></table><h2 id="正则表达式案例">正则表达式案例</h2><h3 id="用户名验证">用户名验证</h3><h4 id="功能需求">功能需求</h4><ol><li>合法的用户名为大小写字母、数字、短划线、下划线的组合，且位数为6-16位</li><li>如果用户名输入合法，后面提示信息为：用户名合法，并且颜色为绿色</li><li>如果用户名输入不合法，后面提示信息为：用户名不符合规范，并且颜色为红色</li></ol><h4 id="结构-HTML">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户名验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrong</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构-JS">结构(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unameRegex = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> unameIpt = <span class="built_in">document</span>.querySelector(<span class="string">'#username'</span>);</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.querySelector(<span class="string">'.info'</span>);</span><br><span class="line">unameIpt.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uname = unameIpt.value.trim();</span><br><span class="line">    <span class="keyword">if</span> (!uname) &#123;</span><br><span class="line">        info.innerHTML = <span class="string">'请输入用户名'</span>;</span><br><span class="line">        info.className = <span class="string">'info'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (unameRegex.test(uname)) &#123;</span><br><span class="line">        info.innerHTML = <span class="string">'用户名合法'</span>;</span><br><span class="line">        info.className = <span class="string">'right'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        info.innerHTML = <span class="string">'用户名不符合规范'</span>;</span><br><span class="line">        info.className = <span class="string">'wrong'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="结果">结果</h4><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/js-username-regex.gif" alt="js-username-regex"></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>\u4e00-\u9fa5 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1Kt411w7MP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javaScript进阶面向对象ES6&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
      <category term="regex" scheme="https://www.hardape.top/tags/regex/"/>
    
  </entry>
  
</feed>
