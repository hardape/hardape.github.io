<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>辛猿毅码的个人博客</title>
  
  <subtitle>Talk is cheap.Show me the code.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hardape.top/"/>
  <updated>2020-06-19T14:29:57.843Z</updated>
  <id>https://www.hardape.top/</id>
  
  <author>
    <name>辛猿毅码</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>02-Spring IoC入门</title>
    <link href="https://www.hardape.top/article/3c844c48.html"/>
    <id>https://www.hardape.top/article/3c844c48.html</id>
    <published>2020-06-19T14:12:12.000Z</published>
    <updated>2020-06-19T14:29:57.843Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="程序的耦合和内聚">程序的耦合和内聚</h2><h3 id="程序的耦合">程序的耦合</h3><h4 id="概述">概述</h4><ul><li>耦合性（<code>Coupling</code>），也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传递的数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差。耦合性存在于各个领域，而非软件设计中独有的，但是我们只讨论软件工程中的耦合。</li><li>在软件工程中，耦合指的就是对象之间的依赖性。对象之间的耦合性越高，维护成本越高。因此对象的设计应使类和构件之间的耦合最小。软件设计中通常用耦合度和内聚度作为衡量模块独立程序的标准。<strong>划分模块的一个准则就是高内聚低耦合（High cohesion and low coupling）</strong></li><li>简单来说，程序的耦合是指程序之间的依赖关系，主要包括类之间的依赖和方法之间的依赖。</li></ul><h4 id="分类">分类</h4><ul><li><strong>内容耦合</strong>：当一个模块直接修改或操作另一个模块的数据时，或一个模块不通过正常入口而转入另一个模块时，这样的耦合被称为内容耦合。内容耦合是最高程度的耦合，应该避免使用。</li><li><strong>公共耦合</strong>：两个或两个以上的二模块共同引用一个全局数据项，这种耦合被称为公共耦合。在具有大量公共耦合的结构中，确定究竟是那个模块给全局变量赋了一个特定的值是十分困难的。</li><li><strong>外部耦合</strong>：一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全部变量的信息，称之为外部耦合。</li><li><strong>控制耦合</strong>：一个模块通过接口向另一个模块传递一个控制信号，接收信号的模块根据信号值而进行适当的动作，这种耦合被称为控制耦合。</li><li><strong>标记耦合</strong>：若一个模块 A 通过接口向两个模块 B 和 C 传递一个公共参数，那么称模块的 B 和 C 之间存在一个标记耦合。</li><li><strong>数据耦合</strong>：模块之间通过参数来传递数据，那么被称为数据耦合。数据耦合是最低的一种耦合形式，系统中一般都存在这种类型的耦合，因为为了完成一些有意义的功能，往往需要将某些模块的输出数据作为另一些模块的输入数据。</li><li><strong>非直接耦合</strong>：两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制的调用来实现的。</li></ul><h4 id="总结">总结</h4><ul><li>耦合是影响软件复杂程度和设计质量的一个重要因素，在设计上应采取以下原则：<strong>如果模块间必须存在耦合，尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，尽量避免使用内容耦合</strong>。</li><li>在实际开发中，应该做到<strong>编译期不依赖，运行时才依赖</strong>。</li></ul><h3 id="程序的内聚">程序的内聚</h3><ul><li>内聚标志一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展。内聚是从功能角度度量模块内的联系，一个好的内聚模块应当恰好做一件事，它描述的是模块内的功能联系。</li><li>程序讲究的是低耦合，高内聚，就是同一个模块内的各个元素之间要高度紧密，但是各个模块之间的相互依存却不要那么紧密。</li></ul><h3 id="解耦的思路">解耦的思路</h3><ol><li>第一步，使用反射来创建对象，而避免使用new关键字</li><li>第二步，通过读取配置文件来获取要创建的对象全限定类名</li></ol><h3 id="工厂模式解耦">工厂模式解耦</h3><ul><li>在实际开发中可以把对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。</li><li>这个读取配置文件，创建和获取对象的类就是工厂。</li><li>该工厂称为<strong>创建Bean对象的工厂</strong></li><li><strong>Bean</strong>：在计算机英语中，有可重用组件的含义</li><li><strong>JavaBean</strong>：指的是用 Java 语言编写的可重用组件，JavaBean不等于实体类，实体类只是 Java 可重用组件<code>JavaBean</code>的一部分</li></ul><h3 id="解耦实例">解耦实例</h3><h4 id="说明">说明</h4><ol><li>需要一个配置文件来配置我们的service和dao，配置的内容：<code>唯一标识=全限定类名</code></li><li>通过读取配置文件的内容，通过工厂方式创建对象</li><li>在工厂中定义一个Map容器存放创建出来的对象。</li><li>配置文件可以是xml也可以是properties，简单起见，此处使用properties</li><li>此处使用创建单例对象</li></ol><h4 id="代码">代码</h4><p><code>bean.properties</code>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userDao</span>=<span class="string">top.hardape.dao.impl.UserDaoImpl</span></span><br><span class="line"><span class="attr">userService</span>=<span class="string">top.hardape.service.impl.UserServiceImpl</span></span><br></pre></td></tr></table></figure><p><code>BeanFactory</code>实现解耦的工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂模式实现解耦</span></span><br><span class="line"><span class="comment"> * 1.  需要一个配置文件来配置我们的service和dao，配置的内容：唯一标识=全限定类名</span></span><br><span class="line"><span class="comment"> * 2.  通过读取配置文件的内容，方式创建对象</span></span><br><span class="line"><span class="comment"> * 3.  配置文件可以是xml也可以是properties，简单起见，此处使用properties</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line">    <span class="comment">// 定义一个Map,用于存储要创建的对象。我们把它称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化对象</span></span><br><span class="line">        props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 实例化容器</span></span><br><span class="line">        beans = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取properties文件的流对象</span></span><br><span class="line">        InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Enumeration&lt;Object&gt; keys = props.keys();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements()) &#123;</span><br><span class="line">            String key = keys.nextElement().toString();</span><br><span class="line">            String beanPath = props.getProperty(key);</span><br><span class="line">            Object bean = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 根据反射创建对象</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bean = Class.forName(beanPath).newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            beans.put(key,bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 Bean 的名称获取 bean对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserDao</code>接口模拟持久层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟插入一条用户数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserDaoImpl</code>类模拟持久层接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"插入了一条新用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserService</code>接口模拟业务层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户登录的业务功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserServiceImpl</code>类模拟业务层接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> top.hardape.dao.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> top.hardape.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> top.hardape.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = (UserDao) BeanFactory.getBean(<span class="string">"userDao"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.insertUser();</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Client</code>类模拟表现层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hardape.ui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> top.hardape.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> top.hardape.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟表现层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        UserService us = new UserServiceImpl();</span></span><br><span class="line"><span class="comment">//        us.userLogin();</span></span><br><span class="line"></span><br><span class="line">        UserService us1 = (UserService) BeanFactory.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        UserService us2 = (UserService) BeanFactory.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        System.out.println(us1);</span><br><span class="line">        us1.userLogin();</span><br><span class="line">        System.out.println(us2);</span><br><span class="line">        us1.userLogin();</span><br><span class="line">        System.out.println(us1 == us2);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            结果如下:</span></span><br><span class="line"><span class="comment">                top.hardape.service.impl.UserServiceImpl@4411d970</span></span><br><span class="line"><span class="comment">                插入了一条新用户数据</span></span><br><span class="line"><span class="comment">                登录成功</span></span><br><span class="line"><span class="comment">                top.hardape.service.impl.UserServiceImpl@4411d970</span></span><br><span class="line"><span class="comment">                插入了一条新用户数据</span></span><br><span class="line"><span class="comment">                登录成功</span></span><br><span class="line"><span class="comment">                true</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果删除业务层或持久层的相关实现类，在编译时并不会出错，只会报运行时异常。</p><h2 id="IoC的概念和作用">IoC的概念和作用</h2><h3 id="概念">概念</h3><ul><li><code>IoC (Inverse Of Control,即反转控制)</code>是指把创建对象的权利交给 Spring 框架，IoC是 Spring 框架的核心之一。</li><li>Spring的核心就是提供了一个<code>IoC容器</code>，它可以管理所有轻量级的 JavaBean 组件，提供的底层服务包括组件的生命周期管理、配置和组装服务、AOP支持，以及建立在AOP基础上的声明式事务服务等。</li><li><code>IoC</code>包括<code>DI (Dependency Injection,即依赖注入)</code>和<code>DL (Dependency Lookup,即依赖查找)</code></li></ul><h3 id="作用">作用</h3><p><code>IoC</code>可以削减计算机程序的耦合性。</p><h2 id="Spring-IoC的基本使用">Spring IoC的基本使用</h2><h3 id="IoC相关jar包">IoC相关jar包</h3><ul><li>🗃 commons-logging-x.x.x.jar</li><li>🗃 spring-beans-x.x.x.RELEASE.jar</li><li>🗃 spring-context-x.x.x.RELEASE.jar</li><li>🗃 spring-core-x.x.x.RELEASE.jar</li><li>🗃 spring-expression-x.x.x.RELEASE.jar</li></ul><h3 id="IoC的Maven依赖">IoC的Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="IoC配置文件约束">IoC配置文件约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">    xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;...&quot; class&#x3D;&quot;...&quot;&gt;  </span><br><span class="line">        &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;...&quot; class&#x3D;&quot;...&quot;&gt;</span><br><span class="line">        &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- more bean definitions go here --&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><h3 id="IoC环境搭建步骤">IoC环境搭建步骤</h3><ol><li>将相关 jar 包拷贝到工程的lib目录中，如果是maven工程需在<code>pom.xml</code>中添加依赖</li><li>在类的根路径向创建一个任意名称的 xml 文件，不能是中文。</li><li>给配置文件导入约束</li><li>让 Spring 管理资源，在配置文件中使用<code>bean</code>标签配置对象</li></ol><h3 id="Spring-IoC容器">Spring IoC容器</h3><h4 id="结构图">结构图</h4><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/spring-IoC-factory.png" alt="spring-IoC-factory"></p><ul><li><code>BeanFactory</code>：Spring 容器顶层接口</li><li><code>ApplicationContext</code>：IoC 配置接口，常用实现类如下<ul><li><code>ClassPathXmlApplicationContext</code>：基于XML配置（类路径加载）</li><li><code>FileSystemXmlApplicationCOntext</code>：基于XML配置（磁盘路径加载）</li><li><code>AnnotationConfigApplicationContext</code>：基于注解配置</li></ul></li></ul><h4 id="BeanFactory和ApplicationContext">BeanFactory和ApplicationContext</h4><ul><li><code>BeanFactory</code>是 Spring 容器的顶层接口，<code>ApplicationContext</code>是它的子接口</li><li><code>ApplicationContext</code>：它在构建核心容器时，创建对象采取的策略是采用立即加载的方式，也就是说，只要一读取完配置文件马上就创建配置文件中配置的对象。(单例对象适用)</li><li><code>BeanFactory</code>：它在构建核心容器时，创建对象采取的策略是采用延迟加载的方式，也就是说，声明时候根据bean的id获取对象，什么时候才真正创建对象。（多例对象适用）</li><li>由于Spring可以根据配置上的不同来改变构建核心容器的策略和时机，而<code>BeanFactory</code>底层接口的功能并不完善，故在开发中通常都使用<code>ApplicationContext</code>接口来定义容器对象。</li></ul><h4 id="ApplicationContext常用实现类">ApplicationContext常用实现类</h4><ul><li><code>ClassPathXmlApplicationContext</code>：它是从类的根路径下加载配置文件（<strong>推荐</strong>）</li><li><code>FileStystemXmlApplicationContext</code>：它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置（必须有访问权限）</li><li><code>AnnotationConfigApplicationContext</code>：读取注解配置容器对象</li></ul><h3 id="常用方法">常用方法</h3><ul><li><code>Object getBean(String name)</code>：<code>BeanFactory</code>的方法，返回一个创建的对象，<code>name</code>为 bean 标签配置的id属性，需要类型强转。</li><li><code>&lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType)</code>：<code>BeanFactory</code>的方法，返回一个创建的对象，<code>name</code>为 bean 标签配置的id属性，<code>requiredType</code>为对象类型的字节码，不需要类型强转。</li><li><code>void close()</code>：<code>AbstractApplicationContext</code>的方法，用于关闭容器。</li></ul><h3 id="实例">实例</h3><p>以用户的业务层和持久层的依赖关系为例子：</p><p>持久层接口<code>UserDao</code>和实现类<code>UserDaoImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟插入一条用户数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"插入了一条新用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务层接口<code>UserService</code>和实现类<code>UserSerivceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户的业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户登录的业务功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring IoC 配置文件<code>bean.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置Service --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;top.hardape.service.impl.UserServiceImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置Dao --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;top.hardape.dao.impl.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用ApplicationContext接口，就是在获取spring容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">// 根据bean的id获取对象，第一种方式，需要强转</span></span><br><span class="line">        UserDao userDao = (UserDao) ac.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        <span class="comment">// 根据bean的id获取对象，第二种方式，不需要强转</span></span><br><span class="line">        UserService userService = ac.getBean(<span class="string">"userService"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(userDao);</span><br><span class="line">        userDao.insertUser();</span><br><span class="line">        System.out.println(userService);</span><br><span class="line">        userService.userLogin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">top.hardape.dao.impl.UserDaoImpl@573906eb</span><br><span class="line">插入了一条新用户数据</span><br><span class="line">top.hardape.service.impl.UserServiceImpl@479ceda0</span><br><span class="line">登录成功</span><br></pre></td></tr></table></figure><h2 id="Spring-IoC对bean的管理">Spring IoC对bean的管理</h2><h3 id="创建Bean的三种方式">创建Bean的三种方式</h3><h4 id="使用默认无参构造函数">使用默认无参构造函数</h4><p>在Spring配置文件中使用<code>bean</code>标签，配以<code>id</code>和<code>class</code>属性之后，且没有其他属性和标签时，采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"top.hardape.service.impl.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>id</code>属性：给对象在容器中提供一个唯一标识，用于从Spring容器获取对象。</li><li><code>class</code>属性：指定要创建对象的全限定类名。用于反射创建对象，默认情况下调用无参构造函数。</li></ul><h4 id="使用静态工厂创建对象">使用静态工厂创建对象</h4><p>使用静态工厂类中的静态方法创建对象，并存入 Spring 容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"top.hardape.factory.StaticFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>id</code>属性：指定 bean 的 id，用于从Spring容器中获取对象。</li><li><code>class</code>属性：指定静态工厂的全限定类名</li><li><code>factory-method</code>属性：指定静态工厂类中生成对象的静态方法</li></ul><h4 id="使用实例工厂创建对象">使用实例工厂创建对象</h4><p>先把工厂的创建交给 Spring 来管理，再使用工厂的 bean 类调用里面的方法来创建对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"top.hardape.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>factory-bean</code>属性：用于指定实例工厂 bean 的 id</li><li><code>factory-method</code>属性：用于指定实例工厂中创建对象的方法。</li></ul><h3 id="bean对象的作用范围">bean对象的作用范围</h3><p>bean 标签的<code>scope</code>属性：指定对象的作用范围，取值如下：</p><ul><li><code>singleton</code>：单例的（默认值）。即一个容器只有一个对象的实例。</li><li><code>prototype</code>：多例的。即每次访问对象时，都会重新创建对象实例。</li><li><code>request</code>：作用于web应用的请求范围，即在Web 项目中，Spring 创建一个 Bean 的对象，将对象存入到 <code>request </code>域中</li><li><code>session</code>：作用于web应用的会话范围，即在Web 项目中， Spring 创建一个 Bean 的对象，将对象存入到 <code>session </code>域中。</li><li><code>global-session</code>：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是<code>session</code>，即在Web 项目中，应用在<code>Portlet</code>环境，如果没有<code>Portlet</code>环境那么相当于<code>session</code></li></ul><h3 id="bean对象的生命周期">bean对象的生命周期</h3><h4 id="单例对象">单例对象</h4><ul><li>对象出生：当应用加载，创建容器时，对象被创建。</li><li>对象活着：只要容器在，对象一直存在。</li><li>对象死亡：当销毁容器时，对象被销毁。</li></ul><p>总结：单例对象的声明周期和容器相同</p><h4 id="多例对象">多例对象</h4><ul><li>对象出生：当使用对象时，创建新的对象实例。</li><li>对象活着：只要对象在使用中，对象一直存在。</li><li>对象死亡：当对象长时间不用，且没有别的对象引用时，被 Java 的垃圾回收器回收了。</li></ul><h4 id="bean中的属性">bean中的属性</h4><ul><li><code>init-method</code>：指定类中的初始化方法名称.</li><li><code>destroy-method</code>：指定类中销毁方法名称。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Spring" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.hardape.top/tags/Spring/"/>
    
      <category term="IoC" scheme="https://www.hardape.top/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>01-Spring概述</title>
    <link href="https://www.hardape.top/article/92d33832.html"/>
    <id>https://www.hardape.top/article/92d33832.html</id>
    <published>2020-06-19T14:01:37.000Z</published>
    <updated>2020-06-19T14:29:47.973Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1VJ411n7mz" target="_blank" rel="noopener">2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="定义">定义</h2><p><strong>Spring</strong>是分层的 Java SE/EE 应用 <code>full-stack,即全栈</code>轻量级开源框架，以 <code>IoC (Inverse Of Contorl,即反转控制)</code>和<code>AOP (Aspect Oriented Programming,即面向切面编程)</code>为内核，提供了展现层 Spring MVC 和 持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开框架。</p><h2 id="发展历程">发展历程</h2><ul><li><p>1997 年，IBM 提出了 EJB （Enterprise Java Beans，即企业Java Beans）的思想</p></li><li><p>1998 年，SUM 制定开发标准规范 EJB 1.0</p></li><li><p>1999 年，EJB 1.1 发布</p></li><li><p>2001 年，EJB 2.0 发布</p></li><li><p>2003 年，EJB 2.1 发布</p></li><li><p>2006 年，EJB 3.0 发布</p></li><li><p><code>Rod Johnson</code> （ Spring 之父）</p><ul><li><p>Expert One-to-One J2EE Design and Development （2002）</p><p>阐述了 J2EE 使用 EJB 开发设计的优点及解决方案</p></li><li><p>Expert One-to-One J2EE Development without EJB（2004）</p><p>阐述了 J2EE 开发不使用 EJB 的解决方案（Spring 雏形）</p></li></ul></li><li><p>2017 年 9 月发布了 Spring 5.0 通用版（GA）</p></li></ul><h2 id="优势">优势</h2><ul><li><p><strong>方便解耦，简化开发</strong></p><p>通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的多度程序耦合。用户也不必再为单例模式类、属性文件解析等很底层的需求编写代码，可以更专注于上层的应用。</p></li><li><p><strong>AOP编程的支持</strong></p><p>通过 Spring 的 AOP 功能，方便进行面向切面的编程。许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。</p></li><li><p><strong>声明式事务的支持</strong></p><p>可以将开发者从单调烦闷的事务管理代码中解脱出来，通过声明方式灵活地进行事务的管理，提高开发效率和质量。</p></li><li><p><strong>方便程序的调试</strong></p><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p></li><li><p><strong>方便集成各种优秀框架</strong></p><p>Spring 可以降低各种框架的使用难度，提供了各种优秀框架（ Structs、Hibernate、Hessian、Quartz 等）的直接支持。</p></li><li><p><strong>降低 Java EE API 的使用难度</strong></p><p>Spring 对 JavaEE API（如 JDBC、JavaMail、远程调用）进行了薄薄的封装，使这些 API 的使用难度大大降低。</p></li><li><p><strong>Spring 源码是经典学习范例</strong></p><p>Spring 的源代码设计精妙、结构清晰，处处体现着对 Java 设计模式灵活运用以及对 Java 技术的高超造诣，它的源代码无疑是 Java 技术的最佳实践的范例。</p></li></ul><h2 id="体系结构">体系结构</h2><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/spring-overview.png" alt="spring-overview"></p><h2 id="Spring下载">Spring下载</h2><ul><li><a href="https://spring.io/" target="_blank" rel="noopener">Spring 官网</a></li><li><a href="https://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">Spring 下载地址</a></li><li><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">Spring框架文档-version-5.2.7</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1VJ411n7mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新黑马全套57期-IDEA版-结业版-视频教程（二）&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaEE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/"/>
    
      <category term="Spring" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaEE/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.hardape.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>GoF设计模式-代理模式</title>
    <link href="https://www.hardape.top/article/1606b015.html"/>
    <id>https://www.hardape.top/article/1606b015.html</id>
    <published>2020-06-11T06:49:31.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a><h2 id="概述">概述</h2><ul><li><strong>代理模式（Proxy Pattern）</strong>，为其他对象提供一种代理以控制对这个对象的访问。</li><li>代理模式其实就是在访问对象时引入一定程度的间接性，因为这种间接性，可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能。</li><li>被代理的对象可以是<strong>远程对象</strong>、<strong>创建开销大的对象</strong>或<strong>需要安全控制的对象</strong></li><li>代理模式可以详细控制访问**某个对象（某类）**的方法，在调用这个方法前做前置处理，调用这个方法后做后置处理，从而实现将统一流程代码放到代理类中处理。（即：AOP的微观实现）</li><li>代理模式是AOP（Aspect Oriented Programming面向切面编程）的核心实现机制。</li></ul><h2 id="应用场景">应用场景</h2><ul><li>安全代理：屏蔽对真实角色的直接访问。</li><li>远程代理：通过代理类处理远程方法调用（RMI，即Remote Method Invoke）</li><li>虚拟代理：先加载轻量级的代理对象，真正需要时再加载开销很大的真实对象，如浏览器页面中的图片的延时加载就是使用虚拟代理的。</li><li>智能指引：当调用真实的对象时，代理处理另外一些事情。</li></ul><h2 id="核心角色">核心角色</h2><h3 id="抽象角色">抽象角色</h3><p>定义代理角色和真实角色的公共对外方法</p><h3 id="真实角色">真实角色</h3><ul><li>即目标对象，实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</li><li><strong>关注真正的业务逻辑</strong>。</li></ul><h3 id="代理角色">代理角色</h3><ul><li>即代理对象，实现抽象角色或为真实角色的子类，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加字节的操作。</li><li><strong>将统一的流程控制放到代理角色中处理</strong>。</li></ul><h2 id="分类">分类</h2><ul><li><strong>静态代理</strong>：静态定义代理类</li><li><strong>动态代理</strong>：动态生成代理类<ul><li>JDK自带的动态代理，即<strong>JDK代理</strong></li><li>javaassist字节码操作库实现</li><li><strong>CgLib代理</strong></li><li>ASM（底层使用指令，可维护性较差）</li></ul></li></ul><h2 id="静态代理">静态代理</h2><h3 id="概述-v2">概述</h3><p><strong>静态代理，即Static Proxy</strong>，由开发者定义代理类，在使用时，被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同的父类。</p><h3 id="场景">场景</h3><p>使用<code>追求女神</code>的场景实现静态代理</p><ul><li><strong>追求者</strong>张三想要追求女神，认识女神的闺蜜<strong>代理工具人</strong>，但不认识女神，张三就通过女神的闺蜜<strong>送礼物</strong>给女神。</li><li>角色分析<ul><li>抽象角色——送礼物接口，<code>GiveGift</code>。</li><li>真实角色——追求者张三，<code>Pursuer</code>。</li><li>代理角色——工具人闺蜜，<code>ToolPerson</code></li></ul></li></ul><h3 id="UML类图">UML类图</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200610211725636.png" alt="image-20200610211725636"></p><h3 id="实例">实例</h3><p>抽象角色<code>GiveGift</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GiveGift</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 送鲜花</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色``Pursuer`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pursuer</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pursuer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送女神一束鲜花"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理角色<code>ToolPerson</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToolPerson</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Pursuer pursuer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToolPerson</span><span class="params">(Pursuer pursuer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pursuer = pursuer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收"</span> + pursuer.getName() + <span class="string">"的代理"</span>);</span><br><span class="line">        pursuer.giveFlowers();</span><br><span class="line">        System.out.println(<span class="string">"女神把花退回来了。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建目标对象(被代理对象)</span></span><br><span class="line">        Pursuer pursuer = <span class="keyword">new</span> Pursuer(<span class="string">"张三"</span>);</span><br><span class="line">        <span class="comment">// 创建代理对象，同时将被代理对象传递给代理对象</span></span><br><span class="line">        ToolPerson toolPerson = <span class="keyword">new</span> ToolPerson(pursuer);</span><br><span class="line"><span class="comment">// 通过代理对象，调用到被代理对象的方法</span></span><br><span class="line">        toolPerson.giveFlowers(); <span class="comment">// 接收张三的代理  送女神一束鲜花  女神把花退回来了。。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点">优缺点</h3><ul><li>优点：在不修改目标对象即真实角色的功能的前提下，能通过代理对象对目标功能进行扩展。</li><li>缺点：由于代理对象需要与目标对象实现共同的接口，所以一旦接口增加方法，目标对象与代理对象都要维护。</li></ul><h2 id="JDK代理">JDK代理</h2><h3 id="概述-v3">概述</h3><ul><li>代理对象不需要实现接口，但是目标对象要实现接口，否则不能用动态代理。</li><li>代理对象的生成，是利用JDK的API动态地在内存中构建代理对象。</li></ul><h3 id="优点">优点</h3><p>抽象角色(接口)中声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，可以更加灵活和统一地处理众多的方法。</p><h3 id="使用">使用</h3><h4 id="Proxy">Proxy</h4><ul><li><code>java.lang.reflect.Proxy</code>：提供了创建动态代理类和实例的静态方法，它也是由这些方法创建的所有动态代理类的超类。</li><li>JDK实现代理只需要实现<code>Proxy</code>的<code>newProxyInstance</code>静态方法</li><li><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code>：返回指定接口的代理类的实例，该接口将方法调用分派给指定的调用处理程序。<ul><li><code>ClassLoader loader</code>：指定当前目标对象使用的类加载器，获取加载器的方法固定。</li><li><code>Class&lt;?&gt;[] interfaces</code>：目标对象实现的接口类型，使用泛型的方式确认类型</li><li><code>InvocationHandler h</code>：事件处理器，执行目标对象的方法时，会触发事件处理器的<code>invoke</code>方法，会把当前执行的目标对象方法作为参数传入，可使用<code>Lambda表达式</code></li></ul></li></ul><h4 id="InvocationHandler">InvocationHandler</h4><ul><li><code>java.lang.reflect.InvocationHandler</code>：是代理实例的调用处理程序实现的处理器，每次通过<code>Proxy</code>生成代理类对象时都要指定对应的处理器对象，通过<code>invoke</code>方法实现对真实角色的代理访问。</li><li><code>Object invoke(Object proxy, Method method, Object[] args)</code>：在代理实例上处理方法调用并返回结果<ul><li><code>Object proxy</code>：在其上调用方法的代理实例</li><li><code>Method method</code>：对应于在代理实例上调用的接口方法的<code>Method</code>实例</li><li><code>Object[] args</code>：包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为 <code>null</code>，基本数据类会被转换为对应的包装类。</li></ul></li></ul><h3 id="场景-v2">场景</h3><p>使用<code>追求女神</code>的场景实现JDK代理</p><ul><li><strong>追求者</strong>张三想要追求女神，认识女神的闺蜜<strong>代理工具人</strong>，但不认识女神，张三就通过女神的闺蜜<strong>送礼物</strong>给女神。</li><li>角色分析<ul><li>抽象角色——送礼物接口，<code>GiveGift</code>。</li><li>真实角色——追求者张三，<code>Pursuer</code>。</li><li>代理角色——由代理工厂生成代理对象，<code>ProxyFactory.getProxyInstance()</code></li></ul></li></ul><h3 id="UML类图-v2">UML类图</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200611131457135.png" alt="image-20200611131457135">’</p><h3 id="实例-v2">实例</h3><p>抽象角色<code>GiveGift</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GiveGift</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 送鲜花</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色<code>Pursuer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pursuer</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pursuer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送女神一束鲜花"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象工厂<code>ProxyFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">// 保护一个目标对象，target</span></span><br><span class="line"><span class="keyword">private</span> Pursuer target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Pursuer target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"开始"</span> + target.getName() + <span class="string">"的代理"</span>);</span><br><span class="line"><span class="comment">// 方式机制调用目标对象的方法</span></span><br><span class="line">        Object returnVal = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"女神把花退回来了。。。"</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类<code>Test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建目标对象</span></span><br><span class="line">Pursuer pursuer = <span class="keyword">new</span> Pursuer(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line">GiveGift proxy =  (GiveGift) <span class="keyword">new</span> ProxyFactory(pursuer).getProxyInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// proxy：class com.sun.proxy.$Proxy0,即内存中动态生成了代理对象</span></span><br><span class="line">System.out.println(<span class="string">"proxy："</span> + proxy.getClass());</span><br><span class="line">proxy.giveFlowers();<span class="comment">// 接收张三的代理  送女神一束鲜花  女神把花退回来了。。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cglib代理">Cglib代理</h2><h3 id="概述-v4">概述</h3><ul><li>静态代理和JDK代理都要求目标对象实现一个接口，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候可以<strong>使用目标对象子类来实现代理</strong>，这就是<strong>Cglib代理</strong></li><li>Cglib代理也叫做<strong>子类代理</strong>，它是在内存中构建一个子类对象从而实现对象目标对象功能扩展。</li><li>Cglib是一个强大的高性能的代码生成包，它可以在运行期扩展Java类与实现Java接口，它广泛地被许多APO框架使用，例如Spring AOP，实现方法拦截。</li><li>在AOP编程中如何选择代理模式<ul><li>目标对象需要实现接口，用JDK代理</li><li>目标对象不需要实现接口，用Cglib代理</li></ul></li><li>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类，即依赖ASM，使用字节码技术生成代理类，比使用Java反射效率要高。</li></ul><h3 id="依赖">依赖</h3><ul><li><p>Cglib代理依赖第三方包<code>cglib.jar</code>，<a href="https://github.com/cglib/cglib" target="_blank" rel="noopener">gitub仓库地址</a>和<a href="https://github.com/cglib/cglib/releases" target="_blank" rel="noopener">下载地址</a></p><ul><li>cglib-xxx.jar包没有集成ASM，故需要另外在项目中引入ASM包</li><li>cglib-nodep-xxx.jar以集成ASM，故可以直接使用</li></ul></li><li><p><a href="https://asm.ow2.io/" target="_blank" rel="noopener">ASM官方网站</a></p></li><li><p><strong>注意</strong>：cglib包和asm包版本不匹配问题</p><ul><li><p>cglib版本为 3.0 或 3.1 ，org.objectweb.asm版本为3.1.0时，版本冲突，报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IncompatibleClassChangeError: class net.sf.cglib.core.DebuggingClassWriter has interface org.objectweb.asm.ClassVisitor as super class</span><br></pre></td></tr></table></figure></li><li><p>使用 cglib 2.2 或使用较新版本的 asm包 可解决此问题。</p></li></ul></li></ul><h3 id="使用-v2">使用</h3><ul><li>通过<code>Enhacer</code>对象来获取目标对象的代理对象</li><li>通过实现<code>MethodInterceptor</code>拦截器接口并重写<code>intercept</code>类来实现对目标对象的代理访问。</li><li><code>Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</code>：在代理实例上处理方法调用并返回结果<ul><li><code>Object proxy</code>：在其上调用方法的代理实例</li><li><code>Method method</code>：对应于在代理实例上调用的接口方法的<code>Method</code>实例</li><li><code>Object[] args</code>：包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为 <code>null</code>，基本数据类会被转换为对应的包装类。</li><li><code>MethodProxy methodProxy</code>：代理方法</li></ul></li></ul><h3 id="注意">注意</h3><ul><li>在内存中动态创建子类，注意代理的类不能使用<code>final</code>修饰，否则报错<code>java.lang.IllegalArgumentException</code></li><li>目标对象的方法如果被<code>final</code>或<code>static</code>修饰，那么就不会被拦截，即不会执行目标对象额外的业务方法。</li></ul><h3 id="场景-v3">场景</h3><p>使用<code>追求女神</code>的场景实现JDK代理</p><ul><li><strong>追求者</strong>张三想要追求女神，认识女神的闺蜜<strong>代理工具人</strong>，但不认识女神，张三就通过女神的闺蜜<strong>送礼物</strong>给女神。</li><li>角色分析<ul><li>抽象角色——由Cglib在内存中生成</li><li>真实角色——追求者张三，<code>Pursuer</code>。</li><li>代理角色——由代理工厂生成代理对象，<code>ProxyFactory.getProxyInstance()</code></li></ul></li></ul><h3 id="URL类图">URL类图</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200611141002996.png" alt="image-20200611141002996"></p><h3 id="实例-v3">实例</h3><p>真实角色<code>Pursuer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pursuer</span> <span class="keyword">implements</span> <span class="title">GiveGift</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pursuer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveFlowers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"送女神一束鲜花"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象工厂<code>ProxyFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标对象</span></span><br><span class="line"><span class="keyword">private</span> Pursuer target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Pursuer target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建一个工具类</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="comment">// 2.设置父类</span></span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line"><span class="comment">// 3.设置回调方法</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 4.创建子类对象，即代理对象</span></span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始"</span> + target.getName() + <span class="string">"的代理"</span>);</span><br><span class="line">        Object returnVal = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"女神把花退回来了。。。"</span>);</span><br><span class="line"><span class="keyword">return</span> returnVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建目标对象</span></span><br><span class="line">Pursuer pursuer = <span class="keyword">new</span> Pursuer(<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line">Pursuer proxy = (Pursuer) <span class="keyword">new</span> ProxyFactory(pursuer).getProxyInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代理方法</span></span><br><span class="line">proxy.giveFlowers(); <span class="comment">// 接收张三的代理  送女神一束鲜花  女神把花退回来了。。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果可能会出现以下警告</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by net.sf.cglib.core.ReflectUtils$1 (file:/D:/Study/Code/Java/JavaSE_Code_Eclipse/22_GoF/lib/cglib-3.3.0.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of net.sf.cglib.core.ReflectUtils$1</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br></pre></td></tr></table></figure><p>该警告是因为jdk版本太高，将项目JDK降低到1.8或以下版本即可，也可以不处理，不影响正常运行。</p><blockquote><p>参考资料：</p><ol><li><a href="https://book.douban.com/subject/2334288/" target="_blank" rel="noopener">大话设计模式-程杰</a></li><li><a href="https://www.bilibili.com/video/BV1G4411c7N4" target="_blank" rel="noopener">尚硅谷Java设计模式，韩顺平图解java设计模式</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="GoF设计模式" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/GoF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Porxy" scheme="https://www.hardape.top/tags/Porxy/"/>
    
      <category term="GoF" scheme="https://www.hardape.top/tags/GoF/"/>
    
  </entry>
  
  <entry>
    <title>02-Java语法基础</title>
    <link href="https://www.hardape.top/article/8242523.html"/>
    <id>https://www.hardape.top/article/8242523.html</id>
    <published>2020-05-24T02:09:45.000Z</published>
    <updated>2020-06-11T09:21:48.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1HJ411n7Cc" target="_blank" rel="noopener">2020-最新全套黑马57期-IDEA版</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="注释">注释</h2><h3 id="注释概述">注释概述</h3><ul><li>注释是在程序<strong>指定位置</strong>添加的<strong>说明性信息</strong></li><li>注释不参与程序运行，仅起到<strong>说明作用</strong></li></ul><h3 id="注释分类">注释分类</h3><p>注释一般分为<strong>单行注释</strong>、<strong>多行注释</strong>、<strong>文档注释</strong></p><h4 id="单行注释">单行注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注释信息</span></span><br></pre></td></tr></table></figure><h4 id="多行注释">多行注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注释信息 */</span></span><br></pre></td></tr></table></figure><h4 id="文档注释">文档注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 注释信息 */</span></span><br></pre></td></tr></table></figure><h2 id="关键字">关键字</h2><h3 id="关键字概述">关键字概述</h3><p>关键字就是被Java语言赋予了<strong>特定含义的单词</strong>。</p><h3 id="关键字特点">关键字特点</h3><ul><li>关键字的字母<strong>全部小写</strong></li><li>常用的代码编辑器，针对关键字有特殊的颜色标记。</li></ul><h2 id="标识符">标识符</h2><h3 id="标识符概述">标识符概述</h3><p>标识符就是给类、方法、变量等命名的符号。</p><h3 id="标识符定义规则">标识符定义规则</h3><ul><li>由**数字、字母、下划线(_)、美元符($)**组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>区分大小写</li></ul><h3 id="常见命名约定">常见命名约定</h3><h4 id="小驼峰命名法">小驼峰命名法</h4><ul><li>定义<strong>变量</strong>、<strong>方法</strong>时使用</li><li>标识符是一个单词时，首字母小写，如<code>name</code></li><li>标识符有多个单词组成时，第一个单词首字母小写，其他单词首字母大写，如<code>firstName</code></li></ul><h4 id="大驼峰命名法">大驼峰命名法</h4><ul><li>定义<strong>类</strong>时使用</li><li>标识符是一个单词时，首字母大写，如<code>Student</code></li><li>标识符有多个单词组成时，每个单词首字母大写，如<code>GoodStudent</code></li></ul><h2 id="常量">常量</h2><h3 id="常量概述">常量概述</h3><p>常量是指在程序运行过程中，其值不可以发生改变的值</p><h3 id="常量分类">常量分类</h3><table><thead><tr><th>常量类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>字符常量</td><td>用单引号<code>''</code>括起来的单个字符</td><td><code>‘</code>、<code>0</code>、<code>我</code></td></tr><tr><td>字符串常量</td><td>用双引号<code>&quot;&quot;</code>括起来的内容</td><td><code>&quot;Hello World&quot;</code>，<code>&quot;辛猿毅码&quot;</code></td></tr><tr><td>整数常量</td><td>不带小数的数字</td><td><code>333</code>，<code>-1</code></td></tr><tr><td>小数常量</td><td>带小数的数字</td><td><code>13.14</code>，<code>-5.21</code></td></tr><tr><td>布尔常量</td><td>布尔值，表示真假</td><td>只有两个值：<code>true</code>和<code>false</code></td></tr><tr><td>空常量</td><td>一个特殊的值，控制</td><td>值为：<code>null</code></td></tr></tbody></table><ul><li>空常量是不能直接输出的，即<code>System.out.println(null)</code>会报错</li></ul><h2 id="数据类型">数据类型</h2><h3 id="计算机存储单元">计算机存储单元</h3><ul><li>计算机存储设备的最小信息单元为<strong>位(bit)</strong>，又称为<strong>比特位</strong>，通常使用**“b”**表示</li><li>计算机最小的存储单元为<strong>字节(byte)</strong>，通常使用**“B”**表示</li><li>1 B = 8 bit</li><li>1 KB = 1024 B</li><li>1 MB = 1024 KB</li><li>1 GB = 1024 MB</li><li>1 TB = 1024 GB</li><li>1 PB = 1024 TB</li><li>1 EB = 1024 PB</li><li>1 ZB = 1024 EB</li><li>…</li></ul><h3 id="数据类型分类">数据类型分类</h3><p>Java语言是<strong>强类型语言</strong>，对于每一种数据都给出了明确的数据类型，不同的<strong>数据类型</strong>也分配了不同的<strong>内存空间</strong>，所有它们表示的<strong>数据大小</strong>也不同。</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/java-datatype.png" alt="java-datatype"></p><h3 id="数据类型内存占用和取值范围">数据类型内存占用和取值范围</h3><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td><code>byte</code></td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td><code>short</code></td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td><code>int</code></td><td>4个字节</td><td>-2<sup>31</sup>~2<sup>31</sup>-1</td></tr><tr><td>长整型</td><td><code>long</code></td><td>8个字节</td><td>-2<sup>63</sup>~2<sup>63</sup>-1</td></tr><tr><td>单精度浮点型</td><td><code>float</code></td><td>4个字节</td><td>负数：-3.402823E+38<sub>-1.401298E-45&lt;br&gt;正数：1.401298E-45</sub>3.402823E+38</td></tr><tr><td>双精度浮点型</td><td><code>double</code></td><td>8个字节</td><td>负数：-1.797693E+308<sub>-4.9E-324&lt;br/&gt;正数：4.9E-324</sub>1.797693E+308</td></tr><tr><td>字符型</td><td><code>char</code></td><td>2个字节</td><td>0~65535</td></tr><tr><td>布尔型</td><td><code>boolean</code></td><td>未精确定义</td><td><code>true</code>、<code>false</code></td></tr></tbody></table><ul><li>E+38表示乘以10<sup>38</sup>，E-45表示乘以10<sup>-45</sup>。</li><li>字符串不是基本类型，而是引用类型。</li><li>浮点型可能只是一个近似值，并非精确的值。</li><li>数据范围与字节数不一定相关，例如<code>float</code>数据范围比<code>long</code>更加广泛，但是<code>float</code>是4字节，<code>long</code>是8字节。</li><li>浮点型中默认类型是<code>double</code>，如果一定要使用<code>float</code>类型，需要加上一个后缀<code>f</code>或者<code>F</code>，推荐使用大写字母。</li><li>整型中默认类型是<code>int</code>，如果一定要使用<code>long</code>类型，需要加上一个后缀<code>l</code>或者<code>L</code>，推荐使用大写字母。</li><li>boolean类型没有给出精确的定义，详细见文章<a href="https://blog.csdn.net/qq_35181209/article/details/77016508" target="_blank" rel="noopener">Java中boolean类型占用多少个字节</a></li></ul><h2 id="变量">变量</h2><h3 id="变量概述">变量概述</h3><ul><li>变量是指在程序运行中，其值可以发生改变的量。</li><li>从本质上讲，变量是内存中的一小块区域。</li><li>变量由<strong>数据类型</strong>、<strong>变量名</strong>、<strong>变量值</strong>三部分组成。</li></ul><h3 id="变量的定义">变量的定义</h3><ul><li><p>变量的定义包含变量的<strong>声明</strong>和<strong>赋值</strong>，即将一个数据值赋给声明的变量。</p></li><li><p>语法</p><ul><li><p>先声明变量，后赋值</p><p><code>数据类型 变量名;</code><br><code>变量名 = 数据值;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>同时声明和赋值变量</p><p><code>数据类型 变量名 = 变量值;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>右侧变量值的范围不能超过左侧数据类型的范围</p></li><li><p>右侧变量值可以是已定义变量的变量名，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = num1; <span class="comment">// num2的值为10</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="变量的使用">变量的使用</h3><p>变量的使用：<strong>取值</strong>和<strong>修改值</strong></p><h4 id="变量取值">变量取值</h4><p>语法为：<code>变量值</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num</span><br></pre></td></tr></table></figure><h4 id="变量修改值">变量修改值</h4><p>语法为：<code>变量名 =  变量值;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="变量使用的注意事项">变量使用的注意事项</h3><ul><li><p>变量名不能重复。</p></li><li><p>变量未赋值，不能使用。</p></li><li><p><code>long</code>类型变量定义时，默认将变量值认为是<code>int</code>类型，后面需加<code>l</code>或者<code>L</code>表示<code>long</code>类型，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">1000000L</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>float</code>类型变量定义时，默认将变量值认为是<code>double</code>类型，后面需加<code>f</code>或<code>F</code>表示<code>float</code>类型，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> b = <span class="number">3.14F</span>;</span><br></pre></td></tr></table></figure></li><li><p>变量使用不能超过作用域的范围。</p></li><li><p><strong>作用域</strong>：从定义变量的一行开始，一直到直接所属的大括号结束为止。</p></li><li><p>可以通过一个语句来创建多个变量，通过<code>,</code>隔开，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10, b &#x3D; 20, c &#x3D; 30;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据类型转换">数据类型转换</h2><p>类型转换分为<strong>自动类型转换</strong>和<strong>强制类型转换</strong></p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200512192612625.png" alt="image-20200512192612625" style="zoom:50%;" /><h3 id="自动类型转换">自动类型转换</h3><ul><li><p><strong>自动类型转换</strong>，也称为<strong>隐式转换</strong>，指把一个表示数据<strong>范围小</strong>的数值或者变量赋值给另一个表示数据<strong>范围大</strong>的变量，例如<code>double d = 10</code>。</p></li><li><p><strong>特点</strong>：转换自动完成，不需要进行特殊处理。</p></li></ul><h3 id="强制类型装换">强制类型装换</h3><ul><li><p><strong>强制类型转换</strong>，也称为<strong>显式转换</strong>，指把一个表示数据<strong>范围大</strong>的数值或者变量赋值给另一个表示数据<strong>范围小</strong>的变量，可能存在精度损失、数据溢出。</p></li><li><p><strong>特点</strong>：代码需要进行特殊的格式处理，不能自动完成。</p></li><li><p>语法：<code>目标数据类型 变量名 = (目标数据类型)值或者变量</code>，例如：<code>int k = (int)88.88;</code></p></li><li><p>由于计算机对字符的存储是使用某种编码规则对应的数字来存储的，而在Java语言中，使用Unicode编码来存储字符，故当将<code>char</code>强制转换为数值类型时，会转换为字符对应的Unicode编码，详见<a href="https://blog.csdn.net/u010297957/article/details/48495791" target="_blank" rel="noopener">Java中char和String 的深入理解 - 字符编码1</a>。</p></li><li><p>数字和字符的对照关系表（编码表）</p><ul><li>ASCII码表：American Standard Code for Information Interchange，即美国信息交换标准代码。</li><li>Unicode码表：万国表，开头0~127部分和ASCII完全一致，但是从128开始包含更多字符。</li></ul></li><li><p>常用数字字符对应关系：48 - ‘0’，65 - ‘A’，97 - ‘a’</p></li><li><p><code>boolean</code>类型不能发生数据类型转换</p></li><li><p>对于<code>byte/short/char</code>三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐含地补上<code>(byte)/(short)/(char)</code>进行强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="number">65</span>;<span class="comment">// 此时不需要显式使用(char)进行强制类型转换</span></span><br><span class="line">System.out.println(ch);<span class="comment">// 结果为A</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="运算符">运算符</h2><h3 id="运算符和表达式">运算符和表达式</h3><ul><li>运算符：对常量或者变量进行操作的<strong>符号</strong></li><li>表达式：用运算符把常量或者变量连接起来<strong>符合java语法的式子</strong>就可以称为表达式，不同运算符连接的表达式体现的是不同类型的表达式。</li></ul><h3 id="算术运算符">算术运算符</h3><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td><code>+</code></td><td>加</td></tr><tr><td><code>-</code></td><td>减</td></tr><tr><td><code>*</code></td><td>乘</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>%</code></td><td>取模/余</td></tr></tbody></table><ul><li><p><code>/</code>取的是<strong>商</strong>，<code>%</code>取的是<strong>余数</strong>，<code>%</code>的结果符号和左操作数相同</p></li><li><p>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算</p></li><li><p>算术表达式中的类型会<strong>自动进行提升</strong>，故此时可能需要进行<strong>强制类型装换</strong>，提升规则如下</p><ul><li><code>byte</code>类型，<code>short</code>类型和<code>char</code>类型将被提升到<code>int</code>类型</li><li>有不同类型自动提升到表达式中<strong>最高等级操作数同样的类型</strong></li><li>等级顺序：<code>byte,short,char</code> =&gt; <code>int</code> =&gt; <code>long</code> =&gt; <code>float</code> =&gt; <code>double</code></li></ul></li><li><p>在<code>+</code>操作中，如果出现了字符串，这个<code>+</code>就是<strong>字符串连接符</strong>，否则就是算术运算符。当连续进行<code>+</code>操作时，从左到右逐个执行。</p></li><li><p>在给变量进行赋值的时候，如果右侧的表达式当中<strong>全都是常量</strong>，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果，而不会进行类型提升，这种情况称为<strong>编译器的常量优化</strong>，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译之后得到的.class字节码文件中相当于直接就是 short result = 13;</span></span><br><span class="line"><span class="keyword">short</span> result = <span class="number">5</span> + <span class="number">8</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值运算符">赋值运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>=</code></td><td>赋值</td><td><code>a = 10</code>，将10赋值给变量<code>a</code></td></tr><tr><td><code>+=</code></td><td>加后赋值</td><td><code>a += b</code>，将<code>a+b</code>的值赋给<code>a</code></td></tr><tr><td><code>-=</code></td><td>减后赋值</td><td><code>a -= b</code>，将<code>a-b</code>的值赋给<code>a</code></td></tr><tr><td><code>*=</code></td><td>乘后赋值</td><td><code>a *= b</code>，将<code>a*b</code>的值赋给<code>a</code></td></tr><tr><td><code>/=</code></td><td>除后赋值</td><td><code>a /= b</code>，将<code>a/b</code>的值赋给<code>a</code></td></tr><tr><td><code>%=</code></td><td>取余后赋值</td><td><code>a %= b</code>，将<code>a%b</code>的值赋给<code>a</code></td></tr></tbody></table><ul><li><p><code>=</code>称为<strong>基本赋值运算符</strong>，其他的赋值运算符称作<strong>扩展/复合赋值运算符</strong></p></li><li><p>扩展赋值运算符<strong>隐含了强制类型转换</strong>，如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展赋值运算符隐含了强制类型转换</span></span><br><span class="line"><span class="keyword">short</span> a = <span class="number">10</span>;</span><br><span class="line">a += <span class="number">20</span>;   <span class="comment">// 等价于 a = (short)(a + 20);</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自增自减运算符">自增自减运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>++</code></td><td>自增</td><td>变量的值加1</td></tr><tr><td><code>--</code></td><td>自减</td><td>变量的值减1</td></tr></tbody></table><ul><li><p><code>++</code>和<code>--</code>既可以放在变量的后面，也可以放在变量的前面，如<code>i++</code>和<code>++ i</code></p></li><li><p>单独使用时，<code>++</code>和<code>--</code>无论是放在变量的前面还是后面，结果一致。</p></li><li><p><strong>参与操作时，如果放在变量的后面，先拿变量参与操作，后拿变量做自增/减；</strong></p><p><strong>参与操作时，如果放在变量的前面，先拿变量做自增/减，后拿变量参与操作。</strong></p></li><li><p>只有变量才能使用自增/减运算符。常量不可发生改变，所以不能使用。</p></li></ul><h3 id="关系-比较运算符">关系/比较运算符</h3><table><thead><tr><th>符号</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td><code>==</code></td><td style="text-align:left"><code>a == b</code>，判断a和b的值是否相等</td></tr><tr><td><code>!=</code></td><td style="text-align:left"><code>a != b</code>，判断a和b的值是否不相等</td></tr><tr><td><code>&gt;</code></td><td style="text-align:left"><code>a &gt; b</code>，判断a是否大于b</td></tr><tr><td><code>&gt;=</code></td><td style="text-align:left"><code>a &gt;= b</code>，判断a是否大于等于b</td></tr><tr><td><code>&lt;</code></td><td style="text-align:left"><code>a &lt; b</code>，判断a是否小于b</td></tr><tr><td><code>&lt;=</code></td><td style="text-align:left"><code>a &lt;= b</code>，判断a是否小于等于b</td></tr></tbody></table><ul><li>上述关系运算符判断的结果皆为<code>boolean</code>类型，成立为<code>true</code>，不成立为<code>false</code></li><li>千万不要把<code>==</code>误写为<code>=</code></li><li>如果进行多次判断，不能连着写，如数学中的写法 1 &lt; x &lt; 3 在程序中是<strong>不允许的</strong></li></ul><h3 id="逻辑运算符">逻辑运算符</h3><p>逻辑运算符是用来<strong>连接关系表达式</strong>的运算符，当然，逻辑运算符也可以直接<strong>连接布尔类型的常量或者变量</strong>。</p><h4 id="基本逻辑运算符">基本逻辑运算符</h4><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>逻辑与</td><td><code>a &amp; b</code>，<code>a</code>和<code>b</code>都是<code>true</code>，结果为<code>true</code>，否则为<code>false</code></td></tr><tr><td><code>|</code></td><td>逻辑或</td><td><code>a | b</code>，<code>a</code>和<code>b</code>都是<code>false</code>，结果为<code>false</code>，否则为<code>true</code></td></tr><tr><td><code>^</code></td><td>逻辑异或</td><td><code>a ^ b</code>，<code>a</code>和<code>b</code>结果不同为<code>true</code>，相同为<code>false</code></td></tr><tr><td><code>!</code></td><td>逻辑非</td><td><code>!a</code>，结果和<code>a</code>的结果相反</td></tr></tbody></table><h4 id="短路逻辑运算符">短路逻辑运算符</h4><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>短路与</td><td>作用和<code>&amp;</code>相同，但是有短路效果，如果左边为<code>false</code>，则右边不执行</td></tr><tr><td><code>||</code></td><td>短路或</td><td>作用和<code>&amp;</code>相同，但是有短路效果，如果左边为<code>true</code>，则右边不执行</td></tr></tbody></table><ul><li>短路逻辑运算符比基本的逻辑运算符效率要高，故经常使用短路运算符</li><li>与和或逻辑运算符如果有多个关系表达式，可连续写，如<code>x &gt; -3 &amp;&amp; x &lt; 5 &amp;&amp; x != 0</code></li></ul><h4 id="记忆口诀">记忆口诀</h4><ul><li><code>&amp;</code>或<code>&amp;&amp;</code>：有<code>false</code>则<code>false</code></li><li><code>|</code>或<code>||</code>：有<code>true</code>则<code>true</code></li><li><code>^</code>：相同为<code>false</code>，不同为<code>true</code></li></ul><h3 id="三元运算符">三元运算符</h3><ul><li><p>运算符分类</p><ul><li><strong>一元运算符</strong>：值需要一个数据就可以进行操作的运算符（单操作数），例如取反<code>!</code>、自增<code>++</code>、自减<code>--</code></li><li><strong>二元运算符</strong>：需要两个数据才可以进行操作的运算符（双操作数），例如加<code>+</code>，赋值<code>=</code></li><li><strong>三元运算符</strong>：需要三个数据才可以进行操作的运算符</li></ul></li><li><p>语法：<code>关系表达式 ? 表达式1 : 表达式2</code></p></li><li><p>范例：<code>a &gt; b ? a : b</code></p></li><li><p>计算规则</p><ul><li>首先计算关系表达式的值</li><li>如果值为<code>true</code>，表达式1的值为运算结果</li><li>如果值为<code>false</code>，表达式2的值为运算结果</li></ul></li><li><p>必须同时保证<code>表达式1</code>和<code>表达式2</code>都符合左侧数据类型的要求。</p></li><li><p>三元运算符的结果必须被使用。</p></li></ul><h2 id="流程控制">流程控制</h2><h3 id="概述">概述</h3><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的，即程序的流程对运行结果有直接的影响。我们可以通过控制语句的执行顺序来实现对程序流程的控制从而实现功能。</p><h3 id="分类">分类</h3><ul><li>顺序结构</li><li>分支结构（<code>if</code>，<code>switch</code>）</li><li>循环结构（<code>for</code>，<code>while</code>，<code>do...while</code>）</li></ul><h2 id="顺序结构">顺序结构</h2><p>顺序结构是程序中最简单、最基本的流程控制，没有特定的语法结构，按照代码的先后顺序依次执行。</p><h2 id="分支结构">分支结构</h2><h3 id="if语句">if语句</h3><h4 id="if单分支">if单分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式的值；</li><li>如果关系表达式的值为<code>true</code>就执行语句体；</li><li>如果关系表达式的值为<code>false</code>就不执行语句体；</li></ol><h4 id="if…else双分支">if…else双分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式的值；</li><li>如果关系表达式的值为<code>true</code>就执行语句体1；</li><li>如果关系表达式的值为<code>false</code>就执行语句体2；</li></ol><h4 id="if…else-if…else多分支">if…else if…else多分支</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>首先计算关系表达式1的值；</li><li>如果值为<code>true</code>就执行语句体1，如果值为<code>false</code>就计算关系表达式2的值；</li><li>如果值为<code>true</code>就执行语句体2，如果值为<code>false</code>就计算关系表达式3的值；</li><li>以此类推…</li><li>如果没有任何关系表达式的值为<code>true</code>，就执行语句体n+1</li></ol><h3 id="switch语句">switch语句</h3><p>swtich语句是多分支结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>：</span><br><span class="line">        语句体<span class="number">1</span>；</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        语句体<span class="number">2</span>；</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法说明：</p><ul><li>表达式：取值的数据类型为<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>，JDK5以后可以是枚举，JDK7以后可以是<code>String</code>.</li><li><code>case</code>：后面跟的是要和表达式进行比较的值。</li><li><code>break</code>：表示中断，结束的意思，用来结束<code>switch</code>语句</li><li><code>default</code>：表示所有情况都不匹配时，就执行该处的内容，和<code>if</code>多分支语句中的<code>else</code>相似，<code>defalut</code>中的<code>break</code>可省略，但为保证结构清晰不建议省略。</li></ul><p>执行流程：</p><ol><li>首先计算关系表达式的值；</li><li>依次和<code>case</code>后面的值进行比较，如果有对应的值，就会执行相应的语句，在执行过程中，遇到<code>break</code>就会结束；</li><li>如果所有的<code>case</code>后面的值和表达式的值都不匹配，就会执行<code>default</code>中的语句体。</li></ol><p>注意：</p><ul><li><p>多个<code>case</code>后面的数值不可以重复</p></li><li><p><strong>case穿透</strong>：在<code>switch</code>语句中，如果<code>case</code>控制的语句体后面不写<code>break</code>，将出现<strong>case穿透</strong>现象，在不判断下一个case的情况下，向下执行，直到遇到<code>break</code>或者整体<code>switch</code>语句结束。</p></li></ul><h2 id="循环结构">循环结构</h2><h3 id="循环概述">循环概述</h3><p>循环语句可以在满足条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为<strong>循环体</strong>，但反复执行循环体时，需要在何时的时候结束循环，否则循环将一直执行下去，形成死循环。</p><h3 id="循环结构的组成">循环结构的组成</h3><ul><li>初始化语句：用于表示循环开启时的起始状态</li><li>条件判断语句：用于表示判断是否循环执行的条件</li><li>循环体语句：用于表示循环反复执行的内容</li><li>条件控制/步进语句：用于表示循环执行中每次变化的内容</li></ul><h3 id="for循环语句">for循环语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 条件判断语句; 条件控制语句) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>执行初始化语句</li><li>执行条件判断语句，如果是<code>false</code>，循环结束；如果是<code>true</code>，继续执行</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>回到2继续</li></ol><h3 id="案例-水仙花数">案例-水仙花数</h3><ul><li>水仙花数：水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</li><li>需求：在控制台输出所有的水仙花数</li><li>任意数字上的指定位上的数值求法：先使用整除操作将要求的数字移动到个位上，再使用取余操作取出个位上的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求所有的水仙花数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NarNum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ones  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tens  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hundreds = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">            ones = i % <span class="number">10</span>;  <span class="comment">// 个位</span></span><br><span class="line">            tens = i / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">// 十位</span></span><br><span class="line">            hundreds = i / <span class="number">100</span>;  <span class="comment">// 百位</span></span><br><span class="line">            <span class="keyword">if</span>(ones * ones * ones + tens * tens * tens + hundreds * hundreds * hundreds == i) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while循环语句">while循环语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准语法</span></span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 扩展语法</span></span><br><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>while</code>循环的执行流程和<code>for</code>循环流程一致。</li></ul><h3 id="do…while循环语句">do…while循环语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准语法</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件判断语句);</span><br><span class="line"><span class="comment">// 扩展语法</span></span><br><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件判断语句);</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>执行初始化语句</li><li>执行循环体语句</li><li>执行条件控制语句</li><li>执行条件判断语句，如果是<code>false</code>，循环结束；如果是<code>true</code>，继续执行</li><li>回到2继续</li></ol><h3 id="三种循环的区别">三种循环的区别</h3><ul><li><code>for</code>循环和<code>while</code>循环先判断条件是否成立，然后决定是否执行循环体（<strong>先判断后执行</strong>）</li><li><code>do...while</code>循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（<strong>先执行后判断</strong>），即<code>do..while</code>循环会执行至少一次。</li><li><code>for</code>循环的变量若在小括号中定义，只有在循环内部可以使用；而<code>while</code>和<code>do...while</code>循环初始化语句在循环外，循环后还能继续使用。</li><li><strong>建议</strong>：循环次数确定的场景多用<code>for</code>循环，否则多用<code>while</code>循环</li></ul><h3 id="跳转控制语句">跳转控制语句</h3><ul><li><code>continue</code>：用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行。</li><li><code>break</code>：<ul><li>用在<code>switch</code>语句中，一旦执行，整个<code>switch</code>语句立刻结束。</li><li>用在循环中，基于条件控制，终止循环体内容的执行，即结束当前的整个循环。</li></ul></li></ul><h3 id="死循环">死循环</h3><ul><li><p>语法</p><ul><li><p><code>for</code>死循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>while</code>死循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>do...while</code>死循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><code>while</code>的死循环格式是最常使用的。</li><li>死循环可以通过 【<code>if</code>条件判断语句+<code>break</code>】跳出循环。</li></ul><h3 id="嵌套循环">嵌套循环</h3><ul><li><strong>嵌套循环</strong>是指一个循环体是另一个循环。比如<code>for</code>循环里面还有一个<code>for</code>循环就是嵌套循环。</li><li>总共的循环次数 = 外循环次数 × 内循环次数</li></ul><h2 id="Java的内存划分">Java的内存划分</h2><ul><li><p>Java程序在运行时，需要在内存中分配空间。为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p></li><li><p>JVM的内存划分</p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td>寄存器</td><td>给CPU使用，与开发无关</td></tr><tr><td>本地方法栈</td><td>JVM在使用操作系统功能的时候使用</td></tr><tr><td>方法区</td><td>存储可以运行的<code>class</code>文件</td></tr><tr><td>推内存</td><td>存储对象或者数组，<code>new</code>来创建的都存储在堆内存</td></tr><tr><td>栈内存</td><td>存放方法中的局部变量，方法运行时使用的内存。</td></tr></tbody></table></li><li><p><strong>栈（Stack）</strong>：存放的都是方法中的局部变量。<strong>方法的运行一定要在栈当中</strong>。</p><ul><li>局部变量：方法的参数，或者是方法{}内部的变量</li><li>一旦超出作用域，栈中的变量立刻从栈内存当中消失</li></ul></li><li><p><strong>堆（Heap）</strong>：凡是<code>new</code>出来的东西，都在堆内存中。</p><ul><li>堆内存里面的东西都有一个地址值：16进制</li><li>堆内存中的数据都有默认值。规则<ul><li>整型：默认为<code>0</code></li><li>浮点型：默认为<code>0.0</code></li><li>字符型：默认为<code>'\u0000'</code></li><li>布尔型：默认为<code>false</code></li><li>引用类型：默认为<code>null</code></li></ul></li><li>使用完毕，会在垃圾回收器空闲时被回收</li></ul></li><li><p><strong>方法区（Method Area）</strong>：存储<code>.class</code>相关信息，包含方法的信息。</p></li><li><p><strong>本地方法栈（Native Method Stack）</strong>：与操作系统相关</p></li><li><p><strong>寄存器（pc Register）</strong>：与CPU相关</p></li></ul><h2 id="方法">方法</h2><h3 id="方法概述">方法概述</h3><ul><li><strong>方法(method)<strong>就是将具有独立功能的</strong>代码块</strong>组织成为一个整体，使其具有特殊功能的<strong>代码集</strong>。</li><li>方法必须先创建才可以使用，该过程称为<strong>方法定义</strong>。</li><li>方法定义后并不是能直接运行的。需要手动使用后才执行，该过程称为<strong>方法调用</strong>。</li><li>当需要方法的时候，就可以去调用，这样既实现了代码的复用性，也解决了代码冗余的现象。</li></ul><h3 id="方法的定义">方法的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (参数列表) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    [<span class="keyword">return</span> 结果;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>修饰符</strong>：现阶段的固定写法为<code>public static</code></li><li><strong>返回值类型</strong>：表示方法运行结果的数据类型，方法执行后将结果返回到调用者，当无返回值时，返回值类型为<code>void</code></li><li><strong>方法名</strong>：命名规则和变量一样，小驼峰</li><li><strong>参数列表</strong>：方法在执行过程中需要的未知数据，调用者调用方法时传递，格式：<code>参数类型 参数名, 参数类型 参数名,...</code>，定义时的参数称为<strong>形参</strong>。</li><li><strong>return</strong>：有两个作用<ul><li>第一个作用：停止当前方法</li><li>第二个作用：将方法执行后的结果，即<strong>方法的返回值</strong>带给调用者</li><li>注意：<code>return</code>后面的数据结果的数据类型必须和方法名前的返回值类型保持对应。</li><li>一个方法中可以有多个<code>return</code>语句</li></ul></li><li>方法必须定义在一个<strong>类中方法外</strong>，不能定义在另一个方法的里面， 即方法不能嵌套定义。</li><li><code>void</code>表示无返回值，可以省略<code>return</code>，也可以单独写<code>return;</code>后面不加数据仅表示方法的结束。</li><li>任何数据类型都能作为方法的参数类型和返回值类型</li></ul><h3 id="方法的调用">方法的调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法名(参数列表)</span><br></pre></td></tr></table></figure><ul><li><strong>参数列表</strong>：方法在调用过程中传入的真实数据，格式：<code>变量名/常量值, 变量名/常量值, ...</code>，调用时的参数称为<strong>实参</strong>。</li><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配。</li></ul><h3 id="形参和实参">形参和实参</h3><ul><li><strong>形参</strong>：形式参数，方法定义中的参数</li><li><strong>实参</strong>：实际参数，方法调用中的参数</li><li><strong>对于基本数据类型的参数，传递的是数据值</strong>，故形参的改变，不影响实参的值。</li><li><strong>对应引用类型的参数，传递的是地址值</strong>，故形参的改变，会影响实参的值。</li></ul><h3 id="方法重载">方法重载</h3><ul><li>方法重载(overload)指同一个类中定义不同参数列表的多个同名方法之间的关系，满足下列条件的多个方法相互构成重载<ul><li>多个方法在同一个类中</li><li>多个方法具有相同的方法名</li><li>多个方法的参数列表不相同，指的是<strong>类型不同</strong>或者<strong>数量不同</strong>或者<strong>多个类型顺序不同</strong>。</li></ul></li><li>重载仅针对同一个类中方法的名称与参数进行识别，与修饰符、返回值、参数名无关</li><li>在调用输出语句的时候，<code>println</code>方法其实就是进行了多种数据类型的重载。</li></ul><h2 id="数组">数组</h2><h3 id="数组概述">数组概述</h3><ul><li>数组(array)是一种用于存储<strong>多个相同类型数据</strong>的存储模型</li><li>数组是一种引用数据类型。</li><li>数组的长度在程序运行期间不可改变。</li></ul><h3 id="数组的定义">数组的定义</h3><ul><li><p>格式一：<code>数据类型[] 变量名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;  <span class="comment">// 定义了一个int类型的数组，数组名是arr</span></span><br></pre></td></tr></table></figure></li><li><p>格式二：<code>数据类型 变量名[]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[];<span class="comment">// 定义了一个int类型的变量，变量名是arr数组</span></span><br></pre></td></tr></table></figure></li><li><p>推荐使用格式一定义数组</p></li></ul><h3 id="数组初始化">数组初始化</h3><ul><li>Java中的数组必须先初始化才能使用。</li><li>数组初始化就是为数组中的数组元素分配内存空间，并为每个数组元素赋值。</li><li>Java中的数组初始化有两种方式：<strong>动态初始化</strong>和<strong>静态初始化</strong>。</li></ul><h4 id="动态初始化">动态初始化</h4><ul><li><p>动态初始化：初始化只<strong>指定数组长度</strong>，系统为数组分配初始值</p></li><li><p>格式：<code>数据类型[] 数组名 = new 数据类型[数组长度]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">// 定义了一个长度为3的int数组</span></span><br></pre></td></tr></table></figure></li><li><p>解析含义</p><ul><li>左侧数据类型：定义数组中保存数据的数据类型</li><li>左侧中括号：代表定义一个数组</li><li>左侧数组名：给数组取一个名字</li><li>右侧的<code>new</code>：代表创建数据的动作</li><li>右侧数据类型：必须和左侧数据类型保存一致</li><li>右侧数据长度：代表数组中可以保存的数据数量</li></ul></li><li><p>数组在动态初始化时，会为存储空间添加默认值</p><ul><li>整型：默认值<code>0</code></li><li>浮点型：默认值<code>0.0</code></li><li>布尔型：默认值<code>false</code></li><li>字符型：默认值<code>空字符('\u0000')</code></li><li>引用数据类型：默认值<code>null</code></li></ul></li></ul><h4 id="静态初始化">静态初始化</h4><ul><li><p>静态初始化：初始化时<strong>指定每个元素的初始值</strong>，由系统推算出数组长度。</p></li><li><p>标准格式：<code>数据类型[] 数组名 = new 数据类型[]{数据1, 数据2, 数据3, ...}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>简化格式：<code>数据类型[] 变量名 = {数据1, 数据2, 数据3, ...}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成大括号中的具体数值。</p></li><li><p>推荐使用简化格式来静态初始化</p></li></ul><h4 id="初始化的拆分">初始化的拆分</h4><ul><li><p>动态初始化可以拆分为两个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li><p>静态初始化的标准格式也可以拆分为两个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>静态初始化的简化格式<strong>不可以</strong>拆分为两个步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   // 不能拆分成两个步骤：</span></span><br><span class="line"><span class="comment">   int[] arr;</span></span><br><span class="line"><span class="comment">   arr = &#123;1, 2, 3&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组元素访问">数组元素访问</h3><ul><li><p>直接打印数组名称，得到的是数组对应的<strong>内存地址哈希值</strong>，如<code>[I@58ceff1</code></p></li><li><p>数组内部保存的数据的访问形式：<code>数组名[索引]</code></p></li><li><p>索引是数组中数据的编号方式</p></li><li><p>索引从<strong>0</strong>开始，而且是连续的，逐一增加，每次加1，一直到【数组的长度-1】为止</p></li></ul><h3 id="数组内存图">数组内存图</h3><h4 id="单变量单数组内存图">单变量单数组内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ArrayOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; <span class="comment">// 动态初始化</span></span><br><span class="line">        System.out.println(arr);  <span class="comment">// 地址值</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变数组中元素的内容</span></span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]); <span class="comment">// 10</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/oneArray-jvm-memory.png" alt="oneArray-jvm-memory-"></p><p>执行流程</p><ol><li>main方法进入栈中执行</li><li>创建数组，JVM会在栈内存中开辟空间存储局部变量<code>arr</code>，在堆内存中开辟空间，存储数组</li><li>数组在堆内存中会有自己的内存地址，以十六进制数表示</li><li>数组中有三个元素，默认值为0</li><li>JVM将堆内存中的数组的内存地址赋值给栈内存中的变量<code>arr</code></li><li>变量<code>arr</code>保存的是数组内存中的地址，因此称为引用数据类型。</li></ol><h4 id="双变量单数组存图">双变量单数组存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ArrayTwo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr1[<span class="number">0</span>]);   <span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]);   <span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr1[<span class="number">2</span>]);   <span class="comment">// 0</span></span><br><span class="line">        arr1[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = arr1;</span><br><span class="line">        System.out.println(arr2[<span class="number">0</span>]);   <span class="comment">// 0</span></span><br><span class="line">        System.out.println(arr2[<span class="number">1</span>]);   <span class="comment">// 10</span></span><br><span class="line">        System.out.println(arr2[<span class="number">2</span>]);   <span class="comment">// 0</span></span><br><span class="line">        arr2[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">        System.out.println(arr2[<span class="number">1</span>]);   <span class="comment">// 100</span></span><br><span class="line">        System.out.println(arr1[<span class="number">1</span>]);    <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/twoArray-jvm-memory.png" alt="oneArray-jvm-memory-"></p><h3 id="数组操作的常见问题">数组操作的常见问题</h3><ul><li><strong>数组越界</strong>：访问了数组中不存在的索引对应的元素，程序运行后会抛出数组索引越界异常，即<code>ArrayIndexOutOfBoundsException</code>。</li><li><strong>空指针异常</strong>：访问的数组已经不再指向堆内存的数据，程序运行后会抛出空指针异常，即<code>NullPointerException</code>。所有的引用类型变量，都可以赋值为一个<code>null</code>值，但是代表其中什么都没有。</li></ul><h3 id="获取数组长度">获取数组长度</h3><ul><li>格式：<code>数组名.length</code></li><li>返回类型为<code>int</code></li><li>可以推断出数组的最大索引值为<code>数组名.length - 1</code></li><li>数组一旦创建，程序运行期间，长度不可改变。</li></ul><h3 id="数组常见操作">数组常见操作</h3><h4 id="遍历数组">遍历数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取数组最值">获取数组最值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组的最大值</span></span><br><span class="line"><span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; max) &#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组元素反转">数组元素反转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组元素反转，其实就是对称位置的元素交换</span></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[arr.length - <span class="number">1</span> - i];</span><br><span class="line">    arr[arr.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = arr.length - <span class="number">1</span>; min &lt; max; min++, max--) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[min];</span><br><span class="line">    arr[min] = arr[max];</span><br><span class="line">    arr[max] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1HJ411n7Cc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新全套黑马57期-IDEA版&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaSE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="https://www.hardape.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>01-Java入门</title>
    <link href="https://www.hardape.top/article/4af34e12.html"/>
    <id>https://www.hardape.top/article/4af34e12.html</id>
    <published>2020-05-24T02:09:12.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1HJ411n7Cc" target="_blank" rel="noopener">2020-最新全套黑马57期-IDEA版</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="Java语言发展史">Java语言发展史</h2><h3 id="Java语言">Java语言</h3><ul><li>java语言是美国Sun公司（Stanford University Network）在1995年推出的高级编程语言。</li><li>Java之父：詹姆斯·高斯林（James Gosling）</li></ul><h3 id="Java语言发展历史">Java语言发展历史</h3><ul><li>1995年推出Java语言</li><li>1996年发布Java1.0版本</li><li>1997年发布Java1.1版本</li><li>1998年发布Java1.2版本</li><li>2000年发布Java1.3版本</li><li>2002年发布Java1.4版本</li><li>2004年发布Java 5版本</li><li>2006年发布Java 6版本</li><li>2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java 7版本</li><li>2014年发布Java 8版本（公司中使用最多的版本）</li><li>2017年8月，JCP执行委员会提出将Java的发布频率改为每六个月一次，新的发布周期严格遵循时间点，将在每年的3月份和9月份发布。</li><li>2017年9月发布Java 9版本</li><li>2018年3月发布Java 10版本</li><li>2018年9月发布Java 11版本</li><li>2019年3月发布Java 12版本</li><li>2019年9月发布Java 13版本</li><li>2020年3月发布Java 14版本</li><li>…</li></ul><h2 id="Java语言跨平台原理">Java语言跨平台原理</h2><h3 id="JVM">JVM</h3><p><strong>JVM（Java Virtual Machine）</strong>：Java虚拟机，是运行Java程序的运行环境，我们编写的Java代码，都运行在JVM之上。</p><h3 id="跨平台原理">跨平台原理</h3><ul><li>在需要运行Java应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机（<strong>JVM，Java Virtual Machine</strong>）即可</li><li>注意：Java的虚拟机本身不具有跨平台功能，每个操作系统下都有不同版本的Java 虚拟机</li></ul><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200512142434494.png" alt="image-20200512142434494" style="zoom:50%;" /><h2 id="JRE和JDK">JRE和JDK</h2><h3 id="JRE">JRE</h3><ul><li><strong>JRE（Java Runtime Environment）</strong>：Java程序运行时环境，包含<code>JVM</code>和运行时所需要的<code>核心类库</code></li><li>我们想要运行一个已有的Java程序，那么只需要安装<code>JRE</code>即可，</li></ul><h3 id="JDK">JDK</h3><ul><li><strong>JDK（Java Development Kit）</strong>: Java程序开发工具包，包含<code>JRE</code>和开发人员使用的工具</li><li>其中开发工具：编译工具（<strong>javac.exe</strong>）和运行工具（<strong>java.exe</strong>）</li><li>我们想要开发一个Java程序，那么必须安装<code>JDK</code></li></ul><h3 id="JDK、JRE和JVM的关系">JDK、JRE和JVM的关系</h3><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200512143510430.png" alt="image-20200512143510430" style="zoom:50%;" /><h2 id="JDK的下载和安装">JDK的下载和安装</h2><h3 id="JDK的下载">JDK的下载</h3><p>通过<a href="http://www.oracle.com" target="_blank" rel="noopener">oracle</a>官方网站获取JDK，注意操作系统的选择</p><h3 id="JDK的安装">JDK的安装</h3><ul><li>安装路径中不要包含中文和空格。</li><li>其他下一步即可</li></ul><h3 id="JDK的安装目录">JDK的安装目录</h3><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td><strong><code>bin</code></strong></td><td>存放JDK的各种工具命令，<code>javac</code>和<code>java</code>就存放其中。</td></tr><tr><td><code>conf</code></td><td>存放JDK的相关配置文件</td></tr><tr><td><code>include</code></td><td>存放一些平台特定的头文件</td></tr><tr><td><code>jmods</code></td><td>存放JDK的各种模块</td></tr><tr><td><code>legal</code></td><td>存放JDK各模块的授权文档</td></tr><tr><td><code>lib</code></td><td>存放JDK工具的一些补充JAR包</td></tr></tbody></table><p>其余文件为说明性文档。</p><h2 id="第一个Java程序">第一个Java程序</h2><h3 id="Path环境变量的配置">Path环境变量的配置</h3><h4 id="为什么要配置Path环境变量">为什么要配置Path环境变量</h4><ul><li>开发Java程序，需要使用JDK提供的开发工具，而这些工具在JDK的安装目录的<code>bin</code>目录下</li><li>如果需要使用<code>javac</code>和<code>java</code>这些命令，需要在DOS窗口中的目录切换到JDK的安装目录的<code>bin</code>目录执行才能生效，而这样比较麻烦。</li><li>而DOS窗口在执行命令时，首先会到当前目录下寻找指定命令，若找不到，则会到Path环境变量中配置的目录中寻找指定命令。</li><li>所以为了在开发Java程序的时候，能够任何目录中方便地使用<code>javac</code>和<code>java</code>这些命令，我们需要配置Path环境变量。</li></ul><h4 id="如何配置Path环境变量">如何配置Path环境变量</h4><ol><li>打开 控制面板 → 系统和安全 →  系统 → 高级系统设置 → 环境变量</li><li>在系统变量中新建系统变量：变量名为<code>JAVA_HOME</code>，变量值为<code>JDK的安装目录</code></li><li>编辑系统变量中的<code>Path</code>变量，如果是win 7/8系统，在变量值框中前面输入<code>;%JAVA_HOME%\bin;</code>；如果是win 10系统，点击新建，输入<code>%JAVA_HOME%\bin</code>即可</li><li>重启DOS窗口，键入<code>java</code>有大量提示信息或键入<code>java -version</code>显示版本号即配置成功</li></ol><h3 id="HelloWorld案例">HelloWorld案例</h3><h4 id="Java程序开发运行流程">Java程序开发运行流程</h4><p>开发Java程序，需要三个步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200513145432586.png" alt="image-20200513145432586" style="zoom: 67%;" /><h4 id="HelloWorld案例的编写和执行">HelloWorld案例的编写和执行</h4><ol><li><p>新建文本文档文件，修改名称为<code>HelloWorld.java</code></p></li><li><p>用记事本打开HelloWorld.java文件，书写程序内容如下并保存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开命令提示符窗口，进入到<code>HelloWorld.java</code>所在的目录，准备进行编译和执行。</p></li><li><p><strong>编译命令</strong>：<code>javac 文件名.java</code>，即输入<code>javac HelloWorld.java</code>编译程序，此时目录中会生成编译后同名的<code>.class</code>字节码文件。</p></li><li><p><strong>执行命令</strong>：<code>java 类名</code>，即输入<code>java HelloWorld</code>执行程序，会看到输出<code>Hello World</code>，执行成功。</p></li></ol><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg/img/image-20200512155154069.png" alt="image-20200512155154069"></p><h4 id="HelloWorld案例说明">HelloWorld案例说明</h4><ul><li><p>所有的Java程序文件都以<code>.java</code>作为文件后缀名。</p></li><li><p>每个Java语句以英文分号<code>;</code>作为结束标识。</p></li><li><p><code>public class HelloWorld</code>代表定义一个名为<code>HelloWorld</code>的公共类，类是Java中所有源代码的基本组织单位。</p></li><li><p><code>HelloWorld</code>公共类名必须和所在的<code>.java</code>文件名完全一致。</p></li><li><p><code>public static void main(String[] args)</code>表示java程序执行入口</p></li><li><p><code>System.out.println()</code> 代表打印输出语句，小括号中即为输入的内容。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1HJ411n7Cc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2020-最新全套黑马57期-IDEA版&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaSE" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/"/>
    
    
      <category term="JavaSE" scheme="https://www.hardape.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>01-Windows命令提示符(cmd)</title>
    <link href="https://www.hardape.top/article/74094e41.html"/>
    <id>https://www.hardape.top/article/74094e41.html</id>
    <published>2020-05-24T01:59:23.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><a id="more"></a><p>命令提示符是在操作系统中，提示进行命令输入的一种工作提示符。在windows环境下，命令行程序为cmd.exe，是一个32位的命令行程序，微软Windows系统基于Windows上的命令解释程序，类似于微软的DOS操作系统。</p><h2 id="启动">启动</h2><p><code>Win + R</code>并输入<code>cmd</code>启动window系统的命令提示符</p><h2 id="常用DOS命令">常用DOS命令</h2><p><code>DOS（Disk Operating System）</code>命令是指DOS操作系统的命令，是一种面向磁盘的操作命令，主要包括目录操作类命令、磁盘操作类命令、文件操作类命令和其它命令。</p><table><thead><tr><th>常用命令</th><th>说明</th></tr></thead><tbody><tr><td><code>盘符名称: </code></td><td>切换盘符，如<code>D:</code></td></tr><tr><td><code>cd 目录</code></td><td>进入下一级目录，<code>cd</code>即 change directory</td></tr><tr><td><code>cd 目录1\目录2\...</code></td><td>进入多级目录</td></tr><tr><td><code>cd ..</code></td><td>返回上一级目录</td></tr><tr><td><code>cd \</code></td><td>返回当前盘符根路径</td></tr><tr><td><code>dir</code></td><td>查看当前路径下的内容，<code>dir</code>即 directory</td></tr><tr><td><code>cls</code></td><td>清屏，<code>cls</code> 即 clear screen</td></tr><tr><td><code>exit</code></td><td>退出命令提示符</td></tr></tbody></table><ul><li>文件(夹)名称可以通过<code>Tab</code>键补全，当输入的部分文件(夹)名称不能唯一定位一个文件(夹)时，可通过多次<code>Tab</code>键进行选择。</li><li>可以通过方向键<code>↑</code>和<code>↓</code>  切换历史命令</li><li><code>Ctrl + C</code>可以中断操作</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="cmd" scheme="https://www.hardape.top/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>01-Maven基础</title>
    <link href="https://www.hardape.top/article/d25b1825.html"/>
    <id>https://www.hardape.top/article/d25b1825.html</id>
    <published>2020-05-23T08:51:45.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1HJ411n7Cc?p=896%EF%BC%8C%E5%A6%82%E6%9C%89%E4%BE%B5%E6%9D%83,%E8%AF%B7%E8%81%94%E7%B3%BB%E5%88%A0%E9%99%A4%E3%80%82%E3%80%8F" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1HJ411n7Cc?p=896，如有侵权,请联系删除。』</a></em></p></blockquote><a id="more"></a><h2 id="Maven介绍">Maven介绍</h2><h3 id="Maven的定义">Maven的定义</h3><p>官网定义</p><blockquote><p>Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information.</p></blockquote><ul><li>Maven是一个<strong>项目管理工具</strong>，它包含一个<strong>项目对象模型（POM：Project Object Model）</strong>，一组标准集合，一个项目声明周期（Project Lifecycle），一个依赖关系系统（Dependency Management System）和用来运行定义在声明周期阶段（phase）中插件（plugin）目标（goal）的逻辑。</li><li>Maven的正确发音是[ˈmeɪvn]，Maven在美国是一个口语化的词语，代表专家，内行的意思。</li></ul><h3 id="Maven的作用">Maven的作用</h3><ul><li>Maven能将开发者从项目构建、管理、测试等繁琐中解放出来，帮助开发者构建工具、管理jar包，编译代码。</li><li>Maven还能帮助开发者自动运行单元测试，打包，生成报表。</li><li>Maven甚至能帮助开发者部署项目，生成Web站点。</li></ul><h3 id="Maven的依赖管理">Maven的依赖管理</h3><ul><li>Maven是一个核心特性就是<strong>依赖管理</strong>，当我们涉及到多模块的项目（包含成百个模块或者子项目），管理依赖就变成一项困难的工具。Maven展示出它对处理这种情形的高度控制。</li><li>maven工程中不直接将jar包导入到工程中，而是通过在<code>pom.xml</code>文件中添加所需jar包的<strong>坐标</strong>，这样就很好地避免了jar包直接引入进来，在需要用到jar包的时候，只要查找<code>pom.xml</code>文件，再通过<code>pom.xml</code>文件中的坐标，到一个专门用于“存放Jar包的仓库”，即**maven仓库（repository`）**中根据坐标从而找到这些jar包，再把这些jar包拿去执行。</li><li>为了解决上述过程使用jar包的速度慢的问题，maven中有索引的概念，通过建立索引，可以大大提高加载jar包的速度，使得maven加载jar包的方式和将jar包放置在本地工程文件中的加载方式速度基本一致。</li></ul><h3 id="Maven的规范构建">Maven的规范构建</h3><p>Maven规范化构建流程如下：</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/maven-process.png" alt="maven-construction-process"></p><p>maven将项目构建的过程进行标准化，每个阶段使用一个命令来完成。</p><h2 id="Maven的使用">Maven的使用</h2><h3 id="Maven的下载和安装">Maven的下载和安装</h3><h4 id="下载">下载</h4><p><a href="https://maven.apache.org/" target="_blank" rel="noopener">Apache Maven官网</a></p><h4 id="安装">安装</h4><ul><li>解压压缩包即可</li><li>注意安装目录建议不包含中文和空格</li></ul><h3 id="Maven的环境配置">Maven的环境配置</h3><ul><li><p>前提：JDK安装并环境变量配置成功</p></li><li><p>添加环境变量名<code>MAVEN_HOME</code>，变量值即Maven的安装目录</p></li><li><p>在<code>path</code>环境变量名中添加变量值<code>%MAVEN_HOME%\bin</code>cmd</p></li><li><p>在cmd命令窗口中输入<code>mvn -v</code>目录显示maven和java的版本号即配置成功</p></li></ul><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200523155052756.png" alt="image-20200523155052756"></p><h3 id="Maven的目录">Maven的目录</h3><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>📁 bin</td><td>存放了maven的命令</td></tr><tr><td>📁 boot</td><td>存放了一些maven本身的引导程序，如类加载器等</td></tr><tr><td>📁 conf</td><td>存放了maven的一些配置文件</td></tr><tr><td>📁 lib</td><td>存放了maven本身运行所需的一些jar包</td></tr></tbody></table><h2 id="Maven仓库">Maven仓库</h2><h3 id="概述">概述</h3><ul><li>Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库，Maven 仓库用于放置一些项目需要的构建和jar包，能帮助我们管理构件。</li><li>当构建一个Maven项目时，首先会通过本地仓库中查找并获得依赖包，如果没有，就从远程仓库中查找并下载至本地仓库使用，如果没有，就从中央仓库中查找并下载至本地仓库使用，如果都没有找到，那么Maven就会抛出异常。</li></ul><h3 id="Maven仓库的分类">Maven仓库的分类</h3><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/maven-repository.png" alt="maven-repository"></p><h4 id="本地-local-仓库">本地(local)仓库</h4><ul><li>用来存储从从远程仓库或中央仓库下载的插件和jar包，Maven 的本地仓库，在安装 Maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建。</li><li>项目使用的一些插件和jar包，优先从本地仓库查找</li><li>默认本地仓库位置为<code>${user.dir}/.m2/repository</code>，<code>${user.dir}</code>表示windows用户目录。</li></ul><h4 id="远程-remote-仓库">远程(remote)仓库</h4><ul><li>如果本地需要插件或者jar包，本地仓库没有，优先去远程仓库下载后再使用，它是开发人员自己定制的仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件。</li><li>远程仓库通常被称作<strong>私服</strong></li><li>远程仓库可以在互联网内也可以在局域网内</li></ul><h4 id="中央-central-仓库">中央(central)仓库</h4><ul><li>中央仓库服务于整个互联网，它是由Maven团队自己维护，里面存储了非常全的jar包，它包含了世界上大部分流行的开源项目构件。</li><li>在maven软件中内置一个远程仓库地址：<a href="http://repo1.maven.org/maven2/" target="_blank" rel="noopener">http://repo1.maven.org/maven2/</a></li></ul><h3 id="全局setting与用户setting">全局setting与用户setting</h3><ul><li>maven仓库地址、私服等配置信息需要在<code>setting.xml</code>文件中配置，分为全局配置和用户配置。</li><li>在maven安装目录下有<code>conf\setting.xml</code>文件，此<code>setting.xml</code>文件用于maven的所有project项目，它作为maven的全局配置</li><li>如需要个性配置则需要在用户配置中设置，用户配置的<code>setting.xml</code>文件默认位置在：<code>${user.dir} /.m2/settings.xml</code>目录中,<code>${user.dir}</code> 指windows 中的用户目录。</li><li>maven会先找用户配置，如果找到则以用户配置文件为准，否则使用全局配置文件。</li></ul><h3 id="本地仓库的配置">本地仓库的配置</h3><p>在Maven软件安装目录中，可以通过在<code>conf/settting.xml</code>文件添加<code>&lt;localRepository&gt;</code>b标签配置本地仓库位置</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/image-20200523162424586.png" alt="image-20200523162424586"></p><h3 id="中央仓库的替换">中央仓库的替换</h3><ul><li><p>由于在国内访问默认的Maven仓库速度太慢，故推荐将中央仓库替换成阿里云的中央仓库</p></li><li><p>在<code>setting.xml</code>文件的<code>&lt;mirrors&gt;</code>标签中添加<code>&lt;mirror&gt;</code>配置镜像URL</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;mirrors&gt;</code>可以配置多个<code>&lt;mirror&gt;</code>，每个<code>&lt;mirror&gt;</code>有<code>id</code>、<code>mirrorOf</code>、<code>name</code>、<code>url</code>属性</p><ul><li><code>id</code>：唯一标识一个mirror，查询同类仓库的顺序是按照id的字母排列顺序</li><li><code>mirrorOf</code>：党员一个镜像的替代位置，<code>central</code>就表示代替默认的中央仓库。</li><li><code>name</code>：仓库名</li><li><code>url</code>：镜像仓库地址</li></ul></li></ul><h2 id="Maven工程">Maven工程</h2><h3 id="Maven工程的目录结构">Maven工程的目录结构</h3><table><thead><tr><th>maven工程的目录结构</th><th>说明</th></tr></thead><tbody><tr><td>📁 .settings</td><td>存放maven工具生成的文件</td></tr><tr><td>📁 .src</td><td>存放源代码</td></tr><tr><td>📁 target</td><td>存放编译生成的<code>.class</code>文件</td></tr><tr><td>📄 pom.xml</td><td>mave工程的核心配置文件，如坐标信息</td></tr></tbody></table><p>作为一个maven工程，它的<code>src</code>目录和<code>pom.xml</code>是必须的</p><p><strong>src</strong>目录结构如下：</p><p>▼📂 src</p><p>​▼📂 main</p><p>​▷ 📁 java→ 【存放放入项目的源码，即<code>.java</code>文件】</p><p>​▷ 📁 resources  → 【存放项目资源文件，如<code>spring</code>,<code>hibernate</code>配置文件】</p><p>​▷ 📁 webapp → 【存放页面资源，js，css，图片等】</p><p>​▼📂 test</p><p>​▷ 📁 java→ 【存放测试的源码，如<code>JUnit</code>测试类】</p><p>​▷ 📁 resources  → 【存放测试的配置文件】</p><h3 id="Maven工程添加坐标">Maven工程添加坐标</h3><p>每个maven工程都需要定义本工程的坐标，坐标是mave对jar包的身份定义，在Maven中是通过配置<code>pom.xml</code>文件来定义工程的坐标</p><h3 id="Maven工程的运行">Maven工程的运行</h3><ul><li>进入maven工程目录，运行<code>mvn tomcat:run</code>命令</li><li>根据提示信息在浏览器访问</li></ul><h2 id="Maven常用命令">Maven常用命令</h2><p>我们可以在cmd中通过一系列的maven命令来对maven工程进行编译、测试、运行、打包、安装、部署。</p><h3 id="mvn-clean">mvn clean</h3><p><code>mvn clean</code>是maven工程的清理命令，会删除<code>target</code>目录及内容</p><h3 id="mvn-complie">mvn complie</h3><p><code>mvn complie</code>是maven工程的编译命令，作用是将<code>src/main/java</code>下的文件编译为class文件输出到<code>target</code>目录中的<code>classes</code>目录下</p><h3 id="mvn-test">mvn test</h3><p><code>mvn test</code>是maven工程的测试命令，将<code>src/test/java</code>下的文件编译为class文件输出到<code>target</code>目录中的<code>test-classes</code>目录下并执行其中的单元测试类。</p><h3 id="mvn-package">mvn package</h3><p><code>mvn package</code>是maven工程的打包命令，对应<code>javase</code>工程打成<code>jar</code>包，对于<code>web</code>工程打成<code>war</code>包，该包会被放置在<code>target</code>目录中。</p><h3 id="mvn-install">mvn install</h3><p><code>mvn install</code>是maven工程的安装命令，会将<code>maven</code>工程打成<code>jar</code>或<code>war</code>包并发布到本地仓库</p><blockquote><p>在<code>complie</code> → <code>test</code> → <code>package</code> → <code>install</code>这些命令中，当后面的命令执行时，前面的命令操作过程也都会自动执行。</p></blockquote><h3 id="Maven指令的生命周期">Maven指令的生命周期</h3><p>maven对项目构建过程分为<strong>三套相互独立</strong>的生命周期。</p><ul><li><code>Clean Lifecycle</code>：清理声明周期，在进行真正地构建之前进行一些清理工作。</li><li><code>Default Lifecycle</code>：默认声明周期，构建的核心部分，编译，测试，打包，部署等等，即<code>complile</code>，<code>test</code>，<code>package</code>，<code>install</code>，<code>deploy</code>命令。</li><li><code>Site Lifecycle</code>：站点声明周期，生成项目报告、站点，发布站点。</li></ul><h2 id="Maven的概念模型">Maven的概念模型</h2><p>Maven是一个<strong>项目管理工具</strong>，它包含一个<strong>项目对象模型（POM：Project Object Model）</strong>，一组标准集合，一个项目声明周期（Project Lifecycle），一个依赖关系系统（Dependency Management System）和用来运行定义在声明周期阶段（phase）中插件（plugin）目标（goal）的逻辑。</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/maven-concept-model.png" alt="maven-concept-model"></p><h3 id="项目对象模型（POM）"><strong>项目对象模型（POM）</strong></h3><p>一个maven工程都有一个<code>pom.xml</code>文件，通过<code>pom.xml</code>文件定义项目自身信息、项目运行所依赖的jar包信息、项目的坐标、项目运行环境信息(如jdk,tomcat信息)等。</p><h3 id="依赖管理系统">依赖管理系统</h3><p>通过maven的依赖管理对项目所依赖的jar包进行统一管理，一个依赖的jar包信息包括公司组织的名称、项目名和版本号。</p><h3 id="项目声明周期">项目声明周期</h3><p>使用maven完成的项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven将这些过程规范为一个生命周期，如下所示是声明周期的各个阶段：</p><p><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardape/blogImg@master/img/maven-process.png" alt="maven-construction-process"></p><p>maven通过执行一些简单命令即可实现声明周期的各个过程。</p><h3 id="标准集合">标准集合</h3><p>maven将整个项目管理过程定义一组标准，比如：通过maven构建工程有标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。</p><h3 id="插件目标">插件目标</h3><p>maven管理项目生命周期都是基于插件完成的，每一个构建项目的命令都对应了一个maven底层的一个插件(<code>plugin</code>)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1HJ411n7Cc?p=896%EF%BC%8C%E5%A6%82%E6%9C%89%E4%BE%B5%E6%9D%83,%E8%AF%B7%E8%81%94%E7%B3%BB%E5%88%A0%E9%99%A4%E3%80%82%E3%80%8F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1HJ411n7Cc?p=896，如有侵权,请联系删除。』&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="项目管理工具" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Maven" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/Maven/"/>
    
    
      <category term="Maven" scheme="https://www.hardape.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>21-JS的高级进阶-ES6</title>
    <link href="https://www.hardape.top/article/16ed1219.html"/>
    <id>https://www.hardape.top/article/16ed1219.html</id>
    <published>2020-05-08T00:04:56.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1Kt411w7MP" target="_blank" rel="noopener">javaScript进阶面向对象ES6</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="ES6简介">ES6简介</h2><h3 id="什么是ES6">什么是ES6</h3><ul><li>ES的全称是ECMScript，它是由ECMA国际标准化组织制定的<strong>一项脚本语言的标准化规范</strong></li><li>ECMAScript6（简称ES6）是于2015年6月正式发布的JavaScript语言的标准，正式名为ECMAScript 2015（ES2015）。它的目标是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言</li></ul><table><thead><tr><th>年份</th><th>版本</th></tr></thead><tbody><tr><td>2015年6月</td><td>ES2015</td></tr><tr><td>2016年6月</td><td>ES2016</td></tr><tr><td>2017年6月</td><td>ES2017</td></tr><tr><td>2018年6月</td><td>ES2018</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p><strong>注意</strong>：接下来学习的ES6泛指ES2015及之后的新增特性，虽然之后的版本应当称为ES7、ES8等。</p><h3 id="为什么使用ES6">为什么使用ES6</h3><p>每一次标准的诞生都意味着语言的完善，功能的加强。JavaScript语言本身也有一些令人不满意的地方。</p><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="ES6的新增语法">ES6的新增语法</h2><h3 id="let">let</h3><p>let是ES6中新增的用于声明变量的关键字。</p><h4 id="let声明的变量只在所处的块级有效">let声明的变量只在所处的块级有效</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. let声明的变量具有块级作用域</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure><h4 id="let不存在变量提升">let不存在变量提升</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. let不存在变量提升</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// Cannot access 'd' before initialization</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h4 id="let声明的变量有暂时性死区特性">let声明的变量有暂时性死区特性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. let声明的变量有暂时性死区的特性</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num1); <span class="comment">//10</span></span><br><span class="line">    <span class="built_in">console</span>.log(num2); <span class="comment">//Cannot access 'num2' before initialization</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> num2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="经典面试题">经典面试题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">// 2</span></span><br><span class="line">arr[<span class="number">1</span>](); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>以上代码关键点在于变量i是全局的，函数执行时输出的都是全局作用域下的i值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">// 0</span></span><br><span class="line">arr[<span class="number">1</span>](); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>以上代码的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的自己上一级作用域(循环产生的块级作用域)下的i值</p><h3 id="const">const</h3><p>const是ES6新增的用于声明常量的关键字，常量就是值(内存地址)不能变化的量</p><h4 id="const声明的常量具有块级作用域">const声明的常量具有块级作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. const声明的变量具有块级作用域</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><h4 id="const声明常量是必须赋值">const声明常量是必须赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><h4 id="const声明的常量赋值后，值-内存地址-不能修改">const声明的常量赋值后，值(内存地址)不能修改</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. const声明的常量赋值后，内存地址不能修改</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">PI = <span class="number">100</span>; <span class="comment">//Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = [<span class="string">'blue'</span>, <span class="string">'red'</span>];</span><br><span class="line">color[<span class="number">0</span>] = <span class="string">'green'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(color);  <span class="comment">// ["green", "red"]</span></span><br><span class="line">color = [<span class="string">'yellow'</span>,<span class="string">'black'</span>];  <span class="comment">//Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="var、let、const的区别">var、let、const的区别</h3><ul><li>使用<strong>var</strong>声明的变量，其作用域为<strong>该语句所在的函数内，且存在变量提升现象</strong>。</li><li>使用<strong>let</strong>声明的变量，其作用域为<strong>该语句所在的代码块内，不存在变量提升</strong>。</li><li>使用<strong>const</strong>声明的是常量，在后面出现的代码中<strong>不能再修改该常量的值</strong>。</li><li>由于const声明的常量JS解析引擎不需要实时监控其变化，效率比var和let高，故如果存储的数据不需要变量，尽量使用<strong>const</strong>关键字，比如<strong>函数的定义</strong>，<strong>数学公式中恒定不变的值</strong>。</li></ul><table><thead><tr><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>函数级作用域</td><td>块级作用域</td><td>块级作用域</td></tr><tr><td>变量提升</td><td>不存在变量提升</td><td>不存在变量提升</td></tr><tr><td>值可更改</td><td>值可更改</td><td>值不可更改</td></tr></tbody></table><h3 id="解构赋值">解构赋值</h3><p>ES6中允许从数组或者对象中提取值，按照对应位置，对变量赋值。</p><h4 id="数组解构">数组解构</h4><ul><li>数组结构允许我们按照一一对应的关系从数组中提取值然后将值赋值给变量</li><li>如果解构不成功，变量的值为<code>undefined</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="对象解构">对象解构</h4><p>对象解构允许我们使用变量的名字匹配对象的属性，匹配成功将对象属性的值赋值给变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 对象解构</span></span><br><span class="line"><span class="keyword">let</span> stu = &#123; <span class="attr">sname</span>: <span class="string">'辛猿毅码'</span>, <span class="attr">sage</span>: <span class="number">18</span> &#125;;</span><br><span class="line"><span class="comment">// 解构的变量名和对象属性名一致</span></span><br><span class="line"><span class="keyword">var</span> &#123; sname, sage &#125; = stu;</span><br><span class="line"><span class="built_in">console</span>.log(sname); <span class="comment">// 辛猿毅码</span></span><br><span class="line"><span class="built_in">console</span>.log(sage);  <span class="comment">// 18</span></span><br><span class="line"><span class="comment">// 解构的变量名和对象属性名不一致</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">sname</span>: myName, <span class="attr">sage</span>: myAge &#125; = stu;</span><br><span class="line"><span class="built_in">console</span>.log(myName); <span class="comment">// 辛猿毅码</span></span><br><span class="line"><span class="built_in">console</span>.log(myAge); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数">箭头函数</h3><p>箭头函数是ES6中新增的定义函数的方式，是用来用来简化定义函数语法的。</p><h4 id="语法">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 函数名 = <span class="function">(<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2</span>, ...]</span>) =&gt;</span> &#123; 函数体 &#125;</span><br></pre></td></tr></table></figure><h4 id="例子">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义箭头函数</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是箭头函数"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用箭头函数</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h4 id="省略大括号">省略大括号</h4><p>如果箭头函数的函数体中只有一句代码，且代码的执行结构就是返回值，可以省略大括号和return</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果函数体只有一句返回值代码，可省略大括号和return</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">3</span>, <span class="number">5</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h4 id="省略小括号">省略小括号</h4><p>如果箭头函数的形参只有一个，可以省略小括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果形参只有一个，可省略小括号</span></span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">num</span> =&gt;</span> num * num;</span><br><span class="line"><span class="built_in">console</span>.log(square(<span class="number">9</span>)); <span class="comment">// 81</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数中的this">箭头函数中的this</h4><p>箭头函数不绑定this关键字，箭头函数中的this，指向的是<strong>函数定义位置的上下文this</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数中的this</span></span><br><span class="line"><span class="comment">// 1. 解析:fun返回值的箭头函数中的this指向fun函数作用域中的this，即obj</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'辛猿毅码'</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> resFun = fun.call(obj); <span class="comment">//&#123;name: "辛猿毅码"&#125;</span></span><br><span class="line">resFun(); <span class="comment">//&#123;name: "辛猿毅码"&#125;</span></span><br><span class="line"><span class="comment">// 2. 解析: 由于对象是不能产生作用域的，故user对象中的say箭头函数中的this的上下文是全局作用域，故其指向window</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    say: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">user.say();  <span class="comment">//window 100</span></span><br></pre></td></tr></table></figure><h4 id="注意">注意</h4><ul><li>在箭头函数中无法使用<strong>arguments</strong></li><li>箭头函数是不能提升的，所以需要在使用之前定义。</li></ul><h3 id="剩余参数">剩余参数</h3><p>ES6新增的剩余参数语法允许我们将一个不定数量的参数表示为为一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">first, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(first, args); </span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>) <span class="comment">// 10 [20,30]</span></span><br></pre></td></tr></table></figure><h4 id="利用剩余参数求任意个数的和">利用剩余参数求任意个数的和</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用剩余参数求任意个数的和</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">...nums</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">num</span> =&gt;</span> res += num);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><h4 id="剩余参数和结构配合使用">剩余参数和结构配合使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 剩余参数和结构配合使用</span></span><br><span class="line"><span class="keyword">let</span> students = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>, <span class="string">'赵六'</span>];</span><br><span class="line"><span class="keyword">let</span> [first, ...others] = students;</span><br><span class="line"><span class="built_in">console</span>.log(first);     <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(others);    <span class="comment">// ['李四', '王五', '赵六']</span></span><br></pre></td></tr></table></figure><h2 id="ES6的内置对象扩展">ES6的内置对象扩展</h2><h3 id="Array的扩展方法">Array的扩展方法</h3><h4 id="扩展运算符">扩展运算符</h4><p><strong>扩展运算符(<code>...</code>)<strong>也称为</strong>展开语法(Spread syntax)</strong>，可以将数组或者对象转为用逗号分隔的参数序列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...arr);   <span class="comment">// ...arr为1,2,3,相当于console.log(1,2,3)，故结果为1 2 3</span></span><br></pre></td></tr></table></figure><p>扩展运算符可以应用于<strong>合并数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展运算符用于合并数组</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line"><span class="built_in">console</span>.log(arr3);      <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line">arr1.push(...arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1);      <span class="comment">//[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p>扩展运算符可以<strong>将可以迭代的伪(类)数组或可遍历(迭代)对象转换为真正的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="built_in">document</span>.getElementByTagName(<span class="string">'div'</span>);</span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure><h4 id="Array-from">Array.from()</h4><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例并返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike[, mapFn[, thisArg]])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>arrayLike</code></td><td>想要转换成数组的伪数组对象或可迭代对象</td></tr><tr><td><code>mapFn</code></td><td>可选，如果指定了该参数，新数组中的每个元素会执行该回调函数。</td></tr><tr><td><code>thisArg</code></td><td>可选，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象。</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.from()将伪数组装换为数组</span></span><br><span class="line"><span class="keyword">var</span> likeArr = &#123;</span><br><span class="line">    <span class="string">"0"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"1"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="string">"2"</span>: <span class="string">"3"</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> trueArr = <span class="built_in">Array</span>.from(likeArr, item =&gt; item * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(trueArr);  <span class="comment">//[2,4,6]</span></span><br></pre></td></tr></table></figure><h4 id="find">find()</h4><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.find(callback[, thisArg])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>callback</code></td><td>在数组每一项上执行的函数，接收 3 个参数</td></tr><tr><td><code>thisArg</code></td><td>可选，执行回调时用作<code>this</code> 的对象。</td></tr></tbody></table><p>其中<code>callback</code>接收三个参数</p><table><thead><tr><th>callback的参数</th><th>说明</th></tr></thead><tbody><tr><td><code>element</code></td><td>当前遍历到的元素</td></tr><tr><td><code>index</code></td><td>当前遍历到的索引</td></tr><tr><td><code>array</code></td><td>数组本身</td></tr></tbody></table><h4 id="findIndex">findIndex()</h4><p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。否则返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.findIndex(callback[, thisArg])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>callback</code></td><td>在数组每一项上执行的函数，接收 3 个参数</td></tr><tr><td><code>thisArg</code></td><td>可选，执行回调时用作<code>this</code> 的对象。</td></tr></tbody></table><p>其中<code>callback</code>接收三个参数</p><table><thead><tr><th>callback的参数</th><th>说明</th></tr></thead><tbody><tr><td><code>element</code></td><td>当前遍历到的元素</td></tr><tr><td><code>index</code></td><td>当前遍历到的索引</td></tr><tr><td><code>array</code></td><td>数组本身</td></tr></tbody></table><h4 id="includes">includes()</h4><p><code> includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(valueToFind[, fromIndex])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>valueToFind</code></td><td>需要查找的元素值,比较字符串和字符时是区分大小写。</td></tr><tr><td><code>fromIndex</code></td><td>从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜 （即使从末尾开始往前跳 <code>fromIndex</code> 的绝对值个索引，然后往后搜寻）。默认为 0。</td></tr></tbody></table><h3 id="String的扩展方法">String的扩展方法</h3><h4 id="模板字符串">模板字符串</h4><p><strong>模板字面量</strong>是ES6中允许嵌入表达式的字符串字面量。可以使用多行字符串和字符串插值功能。它们在ES2015规范的先前版本中被称为“<strong>模板字符串</strong>”。模板字符串使用反引号 (``) 来代替普通字符串中的用双引号和单引号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`这个一个模板字符串`</span></span><br></pre></td></tr></table></figure><p>模板字符串中可以使用<code>${变量名/表达式}</code><strong>解析变量和表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串可以使用$&#123;&#125;解析变量和表达式</span></span><br><span class="line"><span class="keyword">let</span> myNickname = <span class="string">'辛猿毅码'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, my nickname is <span class="subst">$&#123;myNickname&#125;</span>`</span>); <span class="comment">//Hello, my nickname is 辛猿毅码</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`4 + 5 = <span class="subst">$&#123;num1 + num2&#125;</span>`</span>); <span class="comment">// 4 + 5 = 9</span></span><br></pre></td></tr></table></figure><p>模板字符串中可以使用<code>${函数名()}</code><strong>调用函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板字符串可以使用$&#123;&#125;调用函数</span></span><br><span class="line"><span class="keyword">const</span> rap = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'淡黄的长裙，蓬松的头发'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`请听我这一段rap:<span class="subst">$&#123;rap()&#125;</span>`</span>); <span class="comment">// 请听我这一段rap:淡黄的长裙，蓬松的头发</span></span><br></pre></td></tr></table></figure><p>模板字符串中可以<strong>换行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lis = <span class="string">`&lt;ul class="nickname"&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;Tom&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;Jack&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;Michael&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure><h4 id="startsWith-和endsWith">startsWith()和endsWith()</h4><ul><li><code>startsWith()</code>：用来判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 <code>true</code> 或 <code>false</code>。</li><li><code>endsWith</code>：用来判断当前字符串是否以另外一个给定的子字符串结尾，并根据判断结果返回 <code>true</code> 或 <code>false</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.startsWith(searchString[, position])</span><br><span class="line">str.endsWidth(searchString[, position])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>searchString</code></td><td>要搜索的子字符串。</td></tr><tr><td><code>position</code></td><td>在 <code>str</code> 中搜索 <code>searchString</code> 的开始位置，默认值为 0，也就是真正的字符串开头处。</td></tr></tbody></table><h4 id="repeat">repeat()</h4><p><code>repeat()</code>构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本，即将原字符串重复n次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.repeat(count)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>count</code></td><td>介于0和正无穷大之间的整数 : [0, +∞) 。表示在新构造的字符串中重复了多少遍原字符串。</td></tr></tbody></table><h4 id="Set数据结构">Set数据结构</h4><p>ES6提供了新的数据结构Set，它类似于数组，但是<strong>成员的值都是唯一的</strong>，没有重复的值。</p><p><strong>Set的初始化</strong></p><p>Set本身是一个<strong>构造函数</strong>，用来生成Set数据结构，Set中有属性<strong>size</strong>定义数据的个数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">conlose.log(<span class="keyword">set</span>.size); // 0</span><br></pre></td></tr></table></figure><p>Set构造函数可以接受<strong>一个数组或可迭代对象作为参数</strong>，用来初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组初始化Set</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// Set(5) &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.size); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><strong>Set的实例方法</strong></p><ul><li><code>add(value)</code>：添加某个值，返回Set结构本身</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为Set的成员</li><li><code>clear()</code>：清除所有成员，没有返回值</li></ul><p><strong>Set的遍历</strong></p><p>Set结构的实例和数组一样，可以通过<code>forEach</code>方法进行遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mySet.forEach(callback[, thisArg])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>callback</code></td><td>为集合中每个元素执行的回调函数，该函数接收三个参数</td></tr><tr><td><code>thisArg</code></td><td>回调函数执行过程中的 <code>this</code> 值。</td></tr></tbody></table><p>其中<code>callback</code>接收三个参数</p><table><thead><tr><th>callback的参数</th><th>说明</th></tr></thead><tbody><tr><td><code>currentValue</code></td><td>正在被操作的元素</td></tr><tr><td><code>currentKey</code></td><td>由于集合没有索引，所以 <code>currentKey </code>也表示这个正在被操作的元素。</td></tr><tr><td><code>set</code></td><td>调用当前 <code>forEach</code> 方法的集合对象</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1Kt411w7MP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javaScript进阶面向对象ES6&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://www.hardape.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>20-JS的高级进阶-正则表达式</title>
    <link href="https://www.hardape.top/article/33a87acb.html"/>
    <id>https://www.hardape.top/article/33a87acb.html</id>
    <published>2020-05-08T00:03:39.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1Kt411w7MP" target="_blank" rel="noopener">javaScript进阶面向对象ES6</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="正则表达式概述">正则表达式概述</h2><h3 id="概念">概念</h3><p>**正则表达式(Regular Expressioon)**是用于匹配字符串中字符组合的模式。在JavaScript中，正则表达式也是对象。</p><h3 id="作用">作用</h3><ul><li>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线，昵称输入框中可以输入中文(<strong>匹配</strong>)。</li><li>正则表达式还常用于过滤掉页面中内容总的一些敏感词(<strong>替换</strong>)</li><li>正则表达式还用于从字符串中提取特定部分(<strong>提取</strong>)</li></ul><h3 id="特点">特点</h3><ul><li>灵活性、逻辑性和功能性非常强</li><li>可以迅速地用极简单的方式达到字符串的复杂控制</li><li>对于刚接触的人来说，比较晦涩难懂。</li><li>实际开发中，一般都是直接复制写好的正则表达式，但是要求会用正则表达式并且根据实际情况修改正则表达式。</li></ul><h2 id="正则表达式在JavaScript中的使用">正则表达式在JavaScript中的使用</h2><h3 id="创建正则表达式">创建正则表达式</h3><p>在JavaScript中，可以通过两种方式创建一个正则表达式</p><h4 id="通过RegExp对象">通过RegExp对象</h4><p>第一种方式，通过<strong>调用RegExp对象的构造函数创建</strong>正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.通过创建RegExp对象来创建正则表达式</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/表达式/</span>);</span><br></pre></td></tr></table></figure><h4 id="通过字面量">通过字面量</h4><p>第二种方式，通过<strong>字面量</strong>创建正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 2. 通过字面量创建正则表达式</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="regexp">/表达式/</span>;</span><br></pre></td></tr></table></figure><h4 id="注意">注意</h4><ul><li><code>//</code>中间放表达式就是正则字面量</li><li>正则表达式中不需要加引号</li></ul><h3 id="测试正则表达式">测试正则表达式</h3><p><code>test()</code>正则对象方法用于检测字符串是否符合正则表达式的规则，该对象会返回<code>true</code>或<code>false</code>，其参数是测试字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regexObj.test(str)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>regexObj</code></td><td>正则表达式</td></tr><tr><td><code>str</code></td><td>测试的文本</td></tr></tbody></table><h2 id="正则表达式中的特殊字符">正则表达式中的特殊字符</h2><h3 id="正则表达式组成">正则表达式组成</h3><p>一个正则表达式可以有简单的字符构成，比如<code>/abc/</code>，<strong>如果正则表达式中都是简单字符，那么只要含有这一系列简单字符字符串都匹配成功</strong>；也可以是简单和特殊字符的组合，比如<code>/ab*c/</code>，其中特殊字符也被称为<strong>元字符</strong>，在组织表达式中是具有特殊意义的专用符号，如<code>^</code>、<code>$</code>、<code>+</code>等。</p><p>特殊字符非常多，可以参考</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN-正则表达式</a></li><li><a href="http://tool.oschina.net/regex" target="_blank" rel="noopener">正则测试工具</a></li><li><a href="http://c.runoob.com/" target="_blank" rel="noopener">菜鸟工具</a></li></ul><h3 id="非打印字符">非打印字符</h3><table><thead><tr><th>非打印字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\cx</code></td><td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td><code>\f</code></td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td><code>\r</code></td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td><code>\t</code></td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h3 id="边界符">边界符</h3><p>正则表达式中的边界符(位置符)用来<strong>提示字符所处的位置</strong>，主要有两个字符。</p><table><thead><tr><th>便捷付</th><th>说明</th></tr></thead><tbody><tr><td><code>^</code></td><td>表示匹配行首的文本(以谁开始)</td></tr><tr><td><code>$</code></td><td>表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><p><strong>注意</strong>：如果<code>^</code>和<code>$</code>在一起，表示必须是精确匹配。</p><h4 id="例子">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 边界符^和$</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/abc/</span>; <span class="comment">// /abc/只要包含abc这个字符串返回的都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abc'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abcd'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'dabc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'abc'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'abcd'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'dabc'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/abc$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">'abc'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">'abcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg3.test(<span class="string">'dabc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> reg4 = <span class="regexp">/^abc$/</span> <span class="comment">// 精确匹配，要求必须是abc字符串才符合规范</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">'abc'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">'abcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">'dabc'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg4.test(<span class="string">'abcabc'</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="字符类">字符类</h3><p>字符类表示有一系列字符可供选择，只要匹配其中一个即可。<strong>所有可供选择的字符都放在方括号内</strong>。</p><h4 id="方括号">[]方括号</h4><p>字符串只要包含方括号内字符串中的任意一个字符即匹配成功。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/[abc]/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'andy'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'red'</span>));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[abc]$/</span>; <span class="comment">// 三选一，只能是a或者b或c才能返回true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'abc'</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'andy'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'a'</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'b'</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'c'</span>));    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="方括号内部范围符">[-]方括号内部范围符 -</h4><p>方括号内部加上<code>-</code>表示<strong>范围</strong>，只要在该范围内的字符都返回true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 26个英文小写字母任何一个字母返回 true</span></span><br><span class="line">/^[a-z]$/.test(<span class="string">'c'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="方括号内部取反符">[<sup>]方括号内部取反符</sup></h4><p>方括号内部加上<code>^</code>表示<strong>取反</strong>，写在要取反的模式的前面，只要包含方括号内的字符都返回false,注意和边界符<code>^</code>区别开来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[^a-z]$/.test(<span class="string">'c'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="字符组合">字符组合</h4><p>方括号内部可以使用字符组合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符组合，26个英文字母(大小写都可以)任何一个字母返回true</span></span><br><span class="line">/^[a-zA-Z]$/.test(<span class="string">'C'</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="量词符">量词符</h3><p>量词符用来<strong>设定某个模式出现的次数</strong>，量词符写在要规定次数的模式的后面</p><table><thead><tr><th>量词</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>重复零次或更多次</td></tr><tr><td><code>+</code></td><td>重复一次或更多次</td></tr><tr><td><code>?</code></td><td>重复零次或一次</td></tr><tr><td><code>{n}</code></td><td>重复n次</td></tr><tr><td><code>{n,}</code></td><td>重复n次或更多次</td></tr><tr><td><code>{n,m}</code></td><td>重复n到m次，注意中间不能有空格</td></tr></tbody></table><h3 id="括号">括号</h3><ul><li><strong>大括号{}</strong>：量词符，里面表示重复次数</li><li><strong>中括号[]</strong>：字符集合，匹配方括号中的任意字符</li><li><strong>小括号()</strong>：表示优先级</li></ul><h3 id="预定义类">预定义类</h3><p>预定义类指的是<strong>某些常见模式的简写方式</strong></p><table><thead><tr><th>预定义类</th><th>说明</th></tr></thead><tbody><tr><td><code>\d</code></td><td>匹配0-9之间的任一数字，相当于<code>[0-9]</code></td></tr><tr><td><code>\D</code></td><td>匹配所有0-9以外的字符，相当于<code>[^0-9]</code></td></tr><tr><td><code>\w</code></td><td>匹配任意的字母、数字和下划线，相当于<code>[A-Za-z0-9_]</code></td></tr><tr><td><code>\W</code></td><td>除所有字母、数字和下划线以为的字符，相当于<code>[^A-Za-z0-9_]</code></td></tr><tr><td><code>\s</code></td><td>匹配空格(包括换行符、制表符、空格符等)，相当于<code>[\t\r\n\v\f]</code></td></tr><tr><td><code>\S</code></td><td>匹配非空格的字符，相当于<code>[^\t\r\n\v\f]</code></td></tr></tbody></table><h3 id="其他特殊字符">其他特殊字符</h3><table><thead><tr><th>特殊字符</th><th>说明</th></tr></thead><tbody><tr><td>|</td><td>指明两项之间的一个选择。</td></tr><tr><td><code>.</code></td><td>匹配除换行符 \n 之外的任何单字符。</td></tr><tr><td><code>\</code></td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘<code>n</code>’ 匹配字符 ‘n’。’<code>\n</code>’ 匹配换行符。序列 ‘<code>\\</code>’ 匹配 “\”，而 ‘<code>\(</code>’ 则匹配 “(”。</td></tr></tbody></table><h2 id="常用特殊正则表达式">常用特殊正则表达式</h2><blockquote><p>详见<a href="https://c.runoob.com/front-end/854" target="_blank" rel="noopener">菜鸟工具-正则表达式</a></p></blockquote><ul><li>汉字：<strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>{0,}$</strong></li><li>Email地址：<strong><code>^\w+([-+.]\w+)\*@\w+([-.]\w+)\*\.\w+([-.]\w+)\*$</code></strong></li></ul><ul><li>域名：<strong><code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\.?</code></strong></li><li>InternetURL：<strong><code>[a-zA-z]+://[^\s]\* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]\*)?$</code></strong></li><li>手机号码：<strong><code>^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></strong></li><li>电话号码(“XXX-XXXXXXX”、“XXXX-XXXXXXXX”、“XXX-XXXXXXX”、“XXX-XXXXXXXX”、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：<strong><code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></strong></li></ul><h2 id="正则表达式参数">正则表达式参数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/表达式/[<span class="keyword">switch</span>]</span><br></pre></td></tr></table></figure><p>switch(也称为修饰符)规定表达式按照什么样的模式匹配，有三种值：</p><ul><li><code>g</code>：全局匹配</li><li><code>i</code>：忽略大小写</li><li><code>gi</code>/<code>ig</code>：全局匹配+忽略大小写</li></ul><h2 id="正则表达式中的替换">正则表达式中的替换</h2><h3 id="replace替换">replace替换</h3><p><code>replace()</code>方法可以实现替换字符操作，用来替换的参数可以是一个字符字符串或是一个正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.replace(regexp|substr, newSubStr)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>regexp</code></td><td>一个RegExp对象或者其字面量。该正则所匹配的内容会被第二个参数的返回值替换掉。</td></tr><tr><td><code>substr</code></td><td>一个将被 <code>newSubStr</code> 替换的字符串。其被视为一整个字符串，而不是一个正则表达式。仅第一个匹配项会被替换。</td></tr><tr><td><code>newSubStr</code></td><td>用于替换掉第一个参数在原字符串中的匹配部分的字符串</td></tr></tbody></table><h2 id="正则表达式案例">正则表达式案例</h2><h3 id="用户名验证">用户名验证</h3><h4 id="功能需求">功能需求</h4><ol><li>合法的用户名为大小写字母、数字、短划线、下划线的组合，且位数为6-16位</li><li>如果用户名输入合法，后面提示信息为：用户名合法，并且颜色为绿色</li><li>如果用户名输入不合法，后面提示信息为：用户名不符合规范，并且颜色为红色</li></ol><h4 id="结构-HTML">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户名验证 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrong</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构-JS">结构(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unameRegex = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;</span><br><span class="line"><span class="keyword">var</span> unameIpt = <span class="built_in">document</span>.querySelector(<span class="string">'#username'</span>);</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.querySelector(<span class="string">'.info'</span>);</span><br><span class="line">unameIpt.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> uname = unameIpt.value.trim();</span><br><span class="line">    <span class="keyword">if</span> (!uname) &#123;</span><br><span class="line">        info.innerHTML = <span class="string">'请输入用户名'</span>;</span><br><span class="line">        info.className = <span class="string">'info'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (unameRegex.test(uname)) &#123;</span><br><span class="line">        info.innerHTML = <span class="string">'用户名合法'</span>;</span><br><span class="line">        info.className = <span class="string">'right'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        info.innerHTML = <span class="string">'用户名不符合规范'</span>;</span><br><span class="line">        info.className = <span class="string">'wrong'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="结果">结果</h4><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/js-username-regex.gif" alt="js-username-regex"></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>\u4e00-\u9fa5 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1Kt411w7MP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javaScript进阶面向对象ES6&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
      <category term="regex" scheme="https://www.hardape.top/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>19-JS的高级进阶-函数进阶</title>
    <link href="https://www.hardape.top/article/3fcb384a.html"/>
    <id>https://www.hardape.top/article/3fcb384a.html</id>
    <published>2020-05-08T00:02:22.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1Kt411w7MP" target="_blank" rel="noopener">javaScript进阶面向对象ES6</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="函数的定义和调用">函数的定义和调用</h2><h3 id="函数定义方式">函数定义方式</h3><ol><li>函数声明方式<code>function关键字</code>(命名函数)</li><li>函数表达式(匿名函数)</li><li><code>new Function()</code></li></ol><blockquote><p>详见<a href="https://code-ape.gitee.io/article/bc1cebfd.html" target="_blank" rel="noopener">JS的函数</a></p></blockquote><ul><li>所有函数都是<code>Function</code>的实例(对象)</li><li>函数也是对象</li></ul><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200506175008362.png" alt="image-20200506175008362" style="zoom: 67%;" /><h3 id="函数的调用方式">函数的调用方式</h3><h4 id="普通函数">普通函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure><h4 id="对象方法">对象方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.方法名();</span><br></pre></td></tr></table></figure><h4 id="构造函数">构造函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new 构造函数名();</span><br></pre></td></tr></table></figure><h4 id="绑定事件函数">绑定事件函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">节点对象.绑定事件名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定时器函数">定时器函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器自动调用</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, timeout)</span><br></pre></td></tr></table></figure><h4 id="立即执行函数">立即执行函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即执行函数自动调用</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)()</span><br></pre></td></tr></table></figure><h2 id="this">this</h2><h3 id="函数内this的指向">函数内this的指向</h3><p>这些this的指向，是当我们调用函数的时候确定的。调用方式的不同决定了this的指向不同。一般指向我们的调用者。</p><table><thead><tr><th>调用方式</th><th>this指向</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td></tr><tr><td>构造函数调用</td><td>实例对象，原型对象里面的方法也指向实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td></tr><tr><td>定时器函数</td><td>window</td></tr><tr><td>立即执行函数</td><td>window</td></tr></tbody></table><h3 id="改变函数内部this指向">改变函数内部this指向</h3><p>JavaScript专门提供了一些函数方法来更优雅地处理函数内部this的指向问题，常用的有<code>bind()</code>、<code>call()</code>、<code>apply()</code>三种方法。</p><h4 id="call">call()</h4><p>call()用于调用这个函数，并且修改函数运行的this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>thisArg</code></td><td>当前调用函数this的指向对象</td></tr><tr><td><code>arg1,arg2...</code></td><td>传递的其他参数</td></tr></tbody></table><h4 id="apply">apply()</h4><p><code>apply()</code>方法调用一个函数，而且它可以改变函数的this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>thisArg</code></td><td>当前调用函数this的指向对象</td></tr><tr><td><code>argsArray</code></td><td>传递的参数，必须包含在(伪)数组里面</td></tr></tbody></table><p>可以利用<code>apply</code>中参数为数组的特点借助于数学内置对象快速求数组最值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply的应用,使用Math.max/Math.min快速求得数组中的最值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">9</span>, <span class="number">56</span>, <span class="number">78</span>, <span class="number">99</span>, <span class="number">43</span>, <span class="number">2</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr);</span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, arr);</span><br><span class="line"><span class="built_in">console</span>.log(max, min);  <span class="comment">// 99 2</span></span><br></pre></td></tr></table></figure><h4 id="bind">bind()</h4><p><code>bind()</code>方法不会调用函数，但是能改变函数内部的this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>thisArg</code></td><td>当前调用函数this的指向对象</td></tr><tr><td><code>arg1,arg2...</code></td><td>传递的其他参数</td></tr></tbody></table><ul><li>注意：<code>bind()</code>返回由指定的this值和初始化参数改造的<strong>原函数拷贝</strong></li><li>如果有的函数不需要立即调用，但是又想改变这个函数内部的this指向，比如改变定时器内部的this指向，此时使用bind</li></ul><p><strong>例子</strong>：多个按钮，当点击一个按钮后禁用该按钮，3秒后开启该按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bind的巧妙用法</span></span><br><span class="line"><span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">    btns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.disabled = <span class="literal">true</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.disabled = <span class="literal">false</span>;</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>), <span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="严格模式">严格模式</h2><blockquote><p>详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">MDN-严格模式</a></p></blockquote><h3 id="什么是严格模式">什么是严格模式</h3><ul><li>JavaScript除了提供正常模式外，还提供了<strong>严格模式(strict mode)</strong>。ES5的严格模式是采用具有限制性JavaScript变体的一种方式，即在严格模式的条件下运行JS代码</li><li>严格模式在IE10以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</li></ul><p>严格模式对正常的JavaScript语义做了一些更改：</p><ul><li>消除了JavaScript语法的一些不合理、不严谨之处，减少了一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行安全</li><li>提高编译器的效率，提升运行速度</li><li>禁用了再ECMAScript的未来版本中可能会定义的一些语法，为未来新版本的JavaScript做好铺垫。比如一些保留字如：class,enum,extends,import,super不能做变量名</li></ul><h3 id="开启严格模式">开启严格模式</h3><p>严格模式可以应用到<strong>整个脚本</strong>或<strong>个别函数</strong>中。因此在使用时，我们可以将开启严格模式分为<strong>为脚本开启严格模式</strong>和<strong>为函数开启严格模式</strong>两种情况。</p><h4 id="为脚本开启严格模式">为脚本开启严格模式</h4><p>为整个脚本开启严格模式，需要在<strong>所有语句之前放一个特定语句<code>&quot;use strict&quot;;</code>(或<code>'use strict';</code>)</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">    'use strict'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 下面的代码按照严格模式执行</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有的script脚本是严格模式，有的script脚本是正常模式，这样不利于文件合并，所有可以将整个脚本文件放在一个立即执行和匿名函数之中。这样独立创建一个作用域而不影响其他script脚本文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="meta">        'use strict'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 下面的代码按照严格模式执行</span></span></span><br><span class="line">    &#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="为函数开启严格模式">为函数开启严格模式</h4><p>要给某个函数开启严格模式，需要把**<code>&quot;use strict&quot;;</code>(或<code>'use strict';</code>)声明放在函数体所有语句之前**。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="comment">// 下面的代码按照严格模式执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="严格模式中的变化">严格模式中的变化</h3><p>严格模式对JavaScript的语法和行为，都做了一些改变。</p><h4 id="变量规定">变量规定</h4><ul><li>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种写法，变量都必须先用var命令声明，然后再使用。</li><li>严禁删除已经声明的变量。例如<code>delete x</code>语法是错误的。</li></ul><h4 id="严格模式下this指向问题">严格模式下this指向问题</h4><ul><li>正常模式下全局作用域函数中的this指向window对象；严格模式下全局作用域中的this的<strong>undefined</strong></li><li>正常模式下构造函数不加new也可以调用，当普通函数，this指向window；严格模式下如果构造函数不加new直接调用，this指向的是undefined，如果给其赋值会报错</li><li>严格模式下定时器中this还是指向window</li><li>严格模式下new实例化的构造函数还是指向创建的对象实例，事件、对象还是指向调用者。</li></ul><h4 id="函数">函数</h4><ul><li>函数不能有重名的参数</li><li>函数必须声明在顶层，新版本的JavaScript会引入&quot;块级作用域&quot;(ES6中已引入)。为了与新版本接轨，<strong>不允许在非函数的代码块内声明函数</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; &#125; <span class="comment">// !!! 语法错误</span></span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123; &#125; <span class="comment">// !!! 语法错误</span></span><br><span class="line">    f2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 合法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eit</span>(<span class="params"></span>) </span>&#123; &#125; <span class="comment">// 同样合法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高阶函数">高阶函数</h2><p><strong>高阶函数</strong>是对象其他函数进行操作的函数，它<strong>接收函数作为参数</strong>或<strong>将函数作为返回值</strong></p><h3 id="接收函数作为参数">接收函数作为参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数-接收函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    callback &amp;&amp; callback();</span><br><span class="line">&#125;</span><br><span class="line">fn1(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"淡黄的长裙"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="将函数作为返回值">将函数作为返回值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高阶函数-将函数作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"蓬松的头发"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn2()();</span><br></pre></td></tr></table></figure><h2 id="闭包">闭包</h2><h3 id="变量作用域">变量作用域</h3><p>变量根据作用域的不同分为两种：全局变量和局部变量。</p><ul><li>函数内部可以使用全局变量</li><li>函数外部不可以使用局部变量</li><li>当函数执行完毕，本作用域内的局部变量会被销毁</li></ul><h3 id="什么是闭包">什么是闭包</h3><ul><li><strong>闭包(closure)<strong>指有权访问另一个函数作用域中变量的</strong>函数</strong>。——《JavaScirpt高级程序设计》</li><li>简单理解：一个作用域可以访问另外一个函数内部的局部变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123; <span class="comment">// fn2 就是闭包函数</span></span><br><span class="line">        <span class="built_in">console</span>.log(num); <span class="comment">//10</span></span><br><span class="line">    &#125;</span><br><span class="line">    fn2();</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><h3 id="在Chrome中调试闭包">在Chrome中调试闭包</h3><ol><li>打开Chrome浏览器，按F12键启动调试工具</li><li>设置断点</li><li>找到Scope(作用域)选项</li><li>当我们重新刷新页面，会进入断点调试，Scope里面会有两个参数(global全局作用域，local局部作用域)</li><li>当执行到fn2()时，Scope里面会多一个Closure参数，这就表明产生了闭包。</li></ol><h3 id="闭包的作用">闭包的作用</h3><p>提问：以上述代码为例，如何在fn1()函数外面访问fn1()中的局部变量num呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用高级函数，将函数作为返回值，产生闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num); <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f(); <span class="comment">//f就是闭包函数，它访问到了fn1中的局部变量num</span></span><br></pre></td></tr></table></figure><p><strong>闭包的作用：延伸了变量的作用范围</strong></p><h3 id="闭包案例">闭包案例</h3><h4 id="点击li打印当前索引号">点击li打印当前索引号</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包案例-点击li输出当前li的索引号</span></span><br><span class="line"><span class="comment">// 1. 利用动态添加属性的方式</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>).querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    lis[i].index = i;</span><br><span class="line">    lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 利用闭包获取li的索引号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 每次循环都创建一个立即执行函数</span></span><br><span class="line">    <span class="comment">// 立即执行函数也称为小闭包，一个立即执行函数里面的任何一个函数可以使用它的变量i</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3秒钟后打印所有li元素的内容">3秒钟后打印所有li元素的内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>).querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line"><span class="comment">// 闭包案例-3秒钟后打印所有li元素的内容</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(lis[i].innerHTML);</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归">递归</h2><h3 id="什么是递归">什么是递归</h3><ul><li>如果<strong>一个函数在内部调用其本身</strong>，那么这个函数就是<strong>递归函数</strong></li><li>简单理解：函数内部自己调用自己，这个函数就是递归函数</li><li>递归函数的作用和循环效果一致</li><li>由于递归很容易发生**&quot;栈溢出&quot;错误( stack overflow )<strong>，所以</strong>必须要加退出条件return**</li></ul><h3 id="递归案例">递归案例</h3><h4 id="求1-n的阶乘">求1~n的阶乘</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用递归求1~n的阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(factorial(<span class="number">4</span>));  <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><h4 id="求斐波那契数列">求斐波那契数列</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用递归求斐波那契数列(兔子数列) 1,1,2,3,5,8,13,21</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span> || n === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">2</span>) + fibonacci(n - <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">8</span>));</span><br></pre></td></tr></table></figure><h2 id="浅拷贝和深拷贝">浅拷贝和深拷贝</h2><h3 id="浅拷贝">浅拷贝</h3><p>浅拷贝只是拷贝一层，更深层次对象/数组级别的只拷贝引用，在JS中可以使用<code>for...in</code>遍历对象实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowCopy</span>(<span class="params">newObj, oldObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line">        newObj[k] = oldObj[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝">深拷贝</h3><p>深拷贝拷贝多层，每一级别的数据都会拷贝，在JS中可以利用递归实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">newObj, oldObj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> oldObj) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = oldObj[k];</span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">            newObj[k] = [];</span><br><span class="line">            deepCopy(newObj[k], item);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">            newObj[k] = &#123;&#125;;</span><br><span class="line">            deepCopy(newObj[k], item);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newObj[k] = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object-assign">Object.assign()</h3><p>ES6新增方法<code>Objec.assign()</code>可以实现浅拷贝，<code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(target, ...sources)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>target</code></td><td>目标对象</td></tr><tr><td><code>sources</code></td><td>源对象</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1Kt411w7MP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javaScript进阶面向对象ES6&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>18-JS的高级进阶-构造函数和原型</title>
    <link href="https://www.hardape.top/article/55b1b3df.html"/>
    <id>https://www.hardape.top/article/55b1b3df.html</id>
    <published>2020-05-08T00:00:39.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1Kt411w7MP" target="_blank" rel="noopener">javaScript进阶面向对象ES6</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="构造函数和原型">构造函数和原型</h2><h3 id="概述">概述</h3><ul><li>在典型的OOP语言中(如Java)，都存在类的概念，类就是对象的模板，对象就是类的实例，但在ES6之前，JS中并没有引入类的概念。</li><li>ES6，全称ECMAScript6.0，2015.06发版，但是目前浏览器的JavaScript是ES5版本，大多数高版本的浏览器也支持ES6，不过只实现了ES6的部分特性和功能。</li><li>在ES6之前，对象不是基于类创建的，而是用一种称为<strong>构造函数</strong>的特殊函数来定义对象和他们的特征</li><li>创建对象的三种方式：对象字面量、new Object()、自定义构造函数，详见<a href="https://code-ape.gitee.io/article/a9eff881.html" target="_blank" rel="noopener">JS的对象</a></li></ul><h3 id="实例成员和静态成员">实例成员和静态成员</h3><p>JavaScript的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的this上添加。通过这两种方式添加的成员，分别称为<strong>静态成员</strong>和<strong>实例成员</strong></p><h4 id="静态成员">静态成员</h4><p>在构造函数上添加的成员称为<strong>静态成员</strong>，<strong>只能由构造函数本身来访问</strong></p><h4 id="实例成员">实例成员</h4><p>在构造函数内部创建的对象成员称为<strong>实例成员</strong>，<strong>只能由实例化的对象来访问</strong></p><h4 id="例子">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实例成员</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态成员</span></span><br><span class="line">Student.task = <span class="string">'Study'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> codeApe = <span class="keyword">new</span> Student(<span class="string">'辛猿毅码'</span>,<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(codeApe.name);</span><br><span class="line"><span class="built_in">console</span>.log(Student.task);</span><br></pre></td></tr></table></figure><h3 id="构造函数的问题">构造函数的问题</h3><p>构造函数方法很好用，但是<strong>存在浪费内存的问题</strong></p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200505214219181.png" alt="image-20200505214219181" style="zoom:50%;" /><p>我们希望所有的对象使用同一个函数，这样就比较节省内存，故引入<strong>原型prototype</strong>。</p><h3 id="构造函数原型prototype">构造函数原型prototype</h3><ul><li>构造函数通过原型分配的函数时所有对象所<strong>共享的</strong></li><li>JavaScript规定，<strong>每一个构造函数都有一个prototype属性</strong>，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</li><li><strong>我们可以把一些不变的方法，直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法</strong></li><li>一般情况下，公共属性定义到构造函数里面，公共方法定义在原型对象上。</li></ul><h4 id="例子-v2">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实例成员</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用原型prototype定义公共方法</span></span><br><span class="line">Student.prototype.intro = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我的名字是'</span> + <span class="keyword">this</span>.name + <span class="string">',今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">codeApe.intro();</span><br></pre></td></tr></table></figure><h3 id="对象原型-proto">对象原型<code>__proto__</code></h3><p>在JS中，每个对象都会有一个属性<code>__proto__</code>(两个双下划线)指向构造函数的prototype原型对象，对象可以使用构造函数prototype的属性和方法，就是因为对象有<code>__proto__</code>原型的存在。</p><ul><li><code>__proto__</code>对象原型和原型对象prototype是<strong>等价</strong>的</li><li><code>__proto__</code>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此在实际开发中，不可以使用这个属性，它只是内部指向原型对象prototype。</li></ul><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200505222151138.png" alt="image-20200505222151138" style="zoom:50%;" /><p>方法的查找规则：首先看看ldh对象上是否有sing方法，如果有就执行这个对象上的sing，如果没有，因为有<code>__proto__</code>的存在，就去构造函数原型对象prototype上去查找。</p><h3 id="constructor构造函数">constructor构造函数</h3><ul><li><strong>对象原型(<code>__proto__</code>)<strong>和</strong>构造函数(prototype)<strong>里面都有一个</strong>constructor</strong>属性，constuctor我们称为构造函数，因为它指会构造函数本身。</li><li>constructor主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数</li></ul><h4 id="例子-v3">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">unction Student(name, age) &#123;</span><br><span class="line">    <span class="comment">// 实例成员</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = &#123;</span><br><span class="line">    <span class="comment">// 如果我们修改了原来的原型对象，给原型对象赋值的是一个对象，</span></span><br><span class="line">    <span class="comment">// 则必须手动地利用constructor指回原来的构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>: Student,</span><br><span class="line">    intro: function () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我的名字是'</span> + <span class="keyword">this</span>.name + <span class="string">',今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    task: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我的主要任务是学习，积累知识'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> codeApe = <span class="keyword">new</span> Student(<span class="string">'辛猿毅码'</span>, <span class="number">18</span>);</span><br><span class="line">codeApe.intro();</span><br><span class="line"><span class="built_in">console</span>.log(Student.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(codeApe.__proto__);</span><br></pre></td></tr></table></figure><h3 id="构造函数、实例、原型对象三者之间的关系">构造函数、实例、原型对象三者之间的关系</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200505235840821.png" alt="image-20200505235840821" style="zoom:50%;" /><h3 id="原型链">原型链</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200506000258315.png" alt="image-20200506000258315" style="zoom:80%;" /><h3 id="JavaScript的成员查找机制-规则">JavaScript的成员查找机制(规则)</h3><ol><li>当访问一个对象的属性(包括方法)时，首先查找这个<strong>对象自身</strong>有没有该属性</li><li>如果没有就查找它的原型(也就是<code>__proto__</code>指向的<strong>prototype原型对象</strong>)</li><li>如果还没有就查找原型对象的原型(<strong>Object的原型对象</strong>)</li><li>以此类推一直找到Object为止(<strong>null</strong>)</li></ol><h3 id="原型对象this指向">原型对象this指向</h3><ul><li>在构造函数中，里面this指向的是对象实例</li><li>原型对象函数里面的this指向的是实例对象</li></ul><h3 id="扩展内置对象">扩展内置对象</h3><p>可以通过原型对象，对原来的内置对象进行扩展自定义的方法</p><h4 id="例子-扩展Array对象增加求和功能">例子-扩展Array对象增加求和功能</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展Array内置对象增加求和功能</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        sum += <span class="keyword">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.sum());</span><br></pre></td></tr></table></figure><h4 id="注意">注意</h4><p>数组和字符串等内置对象不能给原型对象覆盖操作如<code>Array.prototype = {}</code>，只能是<code>Array.prototype.xxx = function(){}</code>的形式</p><h2 id="继承">继承</h2><p>ES6之前并没有给我们提供extends继承。我们可以通过<strong>构造函数+原型对象</strong>模拟实现继承，被称为<strong>组合继承</strong>。</p><h3 id="call">call()</h3><p>call()用于调用这个函数，并且修改函数运行的this指向</p><h4 id="语法">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><h4 id="参数">参数</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>thisArg</code></td><td>当前调用函数this的指向对象</td></tr><tr><td><code>arg1,arg2...</code></td><td>传递的其他参数</td></tr></tbody></table><h4 id="例子-v4">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">coding</span>(<span class="params">lan</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lan) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.uname + <span class="string">"在使用"</span> + lan + <span class="string">"语言进行开发"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"程序员在打代码中..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    uname: <span class="string">'辛猿毅码'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// call()可以调用函数</span></span><br><span class="line">coding.call();</span><br><span class="line"><span class="comment">// coding函数中的this原本指向window,</span></span><br><span class="line"><span class="comment">// 而call()可以改变着函数的this指向，</span></span><br><span class="line"><span class="comment">// 此时这个函数的this就指向了user这个对象</span></span><br><span class="line">coding.call(user, <span class="string">'JavaScript'</span>)</span><br></pre></td></tr></table></figure><h3 id="借用构造函数继承父类型属性">借用构造函数继承父类型属性</h3><h4 id="核心原理">核心原理</h4><p>通过<code>call()</code>把父类型的this指向子类型的this，这样就可以实现子类型继承父类型的属性。</p><h4 id="例子-v5">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 借用父构造函数继承属性</span></span><br><span class="line"><span class="comment">// 父构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this指向父构造函数的对象实例</span></span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this指向子构造函数的对象实例</span></span><br><span class="line">    Father.call(<span class="keyword">this</span>, uname, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="借用原型对象继承父类型方法">借用原型对象继承父类型方法</h3><h4 id="核心原理-v2">核心原理</h4><ul><li>通过设置子构造函数的原型对象指向父类型的实例对象实现继承父类型方法</li><li>此时利用对象的形式修改了子类型的原型对象，需利用constructor指回原来的原型对象</li></ul><h4 id="例子-v6">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 借用父构造函数继承属性,借用原型对象继承方法</span></span><br><span class="line"><span class="comment">// 父构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this指向父构造函数的对象实例</span></span><br><span class="line">    <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'活到老学到老'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this指向子构造函数的对象实例</span></span><br><span class="line">    Father.call(<span class="keyword">this</span>, uname, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用原型对象继承父类型方法</span></span><br><span class="line"><span class="comment">// 不能使用Son.prototype = Father.prototype</span></span><br><span class="line"><span class="comment">// 这样直接赋值会有问题，如果修改了子原型对象，父原型对象也会随之变化</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="comment">// 使用constructor指回原来的原型对象</span></span><br><span class="line">Son.prototype.constructor = Son;</span><br></pre></td></tr></table></figure><h4 id="原型链图例">原型链图例</h4><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/Father-son-prototype.png" alt="Father-son-prototype" style="zoom: 80%;" /><h2 id="类的本质">类的本质</h2><p><strong>类的本质其实是一个函数</strong>，可以简单地认为类就是构造函数的另外一个写法</p><h3 id="构造函数的特点">构造函数的特点</h3><ul><li>构造函数有原型对象prototype</li><li>构造函数原型对象prototype里面有constructor指向构造函数本身</li><li>构造函数可以通过原型对象添加方法</li><li>构造函数创建的实例对象有<code>__proto__</code>原型指向函数的原型对象</li></ul><h3 id="类的本质是函数">类的本质是函数</h3><ul><li>class本质还是function</li><li>类拥有以上构造函数的4个特点</li><li>类的所有方法都定义在类的prototype属性上</li><li>类创建的实例里面也有<code>__proto__</code>原型指向类的prototype原型对象</li><li>所以ES6的类的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</li><li>所以ES6的类其实就是<strong>语法糖</strong></li><li><strong>语法糖</strong>：语法糖就是一种便捷写法。简单理解，有两种方法可以实现同样的功能，但是一种写法更加清晰、方便，那么这个方法就是语法糖。</li></ul><h2 id="ES5中的常用新增方法">ES5中的常用新增方法</h2><p>ES5中给我们新增了一些方法，可以很方便的操作数组或者字符串，这些方法主要包括：<strong>数组方法</strong>、<strong>字符串方法</strong>、<strong>对象方法</strong></p><h3 id="数组方法">数组方法</h3><h4 id="forEach">forEach()</h4><p><code>forEach()</code> 方法对数组的每个元素执行一次给定的函数，可以用于数组遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>))</span></span><br></pre></td></tr></table></figure><h4 id="filter">filter()</h4><p><code>filter()</code> 方法创建一个新数组, 其包含通过所提供函数实现的过滤的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>))</span></span><br></pre></td></tr></table></figure><ul><li><code>filter()</code>方法创建一个新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于<strong>筛选数组</strong></li><li>注意它直接返回一个数组，不会影响原来的数组</li><li>在函数中通过<code>return</code>筛选出新数组，如<code>var newArr = arr.filter(function(value) {return value &gt;= 20})</code></li></ul><h4 id="some">some()</h4><p><code>some()</code> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.some(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, arr</span>))</span></span><br></pre></td></tr></table></figure><ul><li><code>some()</code>方法用于检测数组中的元素是否满足指定条件，即查找数组中是否后满足条件的元素</li><li>注意它的返回值是布尔值，如果找到这个元素，就返回true，如果查找不到就返回false</li><li>如果找到第一个满足条件的元素，则终止循环，不再继续查找</li><li>在函数中通过<code>return</code>判断是否满足指定条件，如<code>var hasEven = arr.some(function(value) {return value % 2 == 0})</code></li></ul><h4 id="参数说明">参数说明</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>currentValue</code></td><td>数组当前项的值</td></tr><tr><td><code>index</code></td><td>数组当前项的索引</td></tr><tr><td><code>arr</code></td><td>数组对象本身</td></tr></tbody></table><h4 id="案例-查询商品">案例-查询商品</h4><p>结构(HTML)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">按照价格查询:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"price-from"</span> <span class="attr">placeholder</span>=<span class="string">"最低价"</span>&gt;</span></span><br><span class="line">~</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"price-to"</span> <span class="attr">placeholder</span>=<span class="string">"最高价"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"搜索"</span> <span class="attr">id</span>=<span class="string">"price-search"</span>&gt;</span></span><br><span class="line">按照商品名称查询:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"goods-name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"查询"</span> <span class="attr">id</span>=<span class="string">"name-search"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>产品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式(CSS)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=button]</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行为(JS)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态渲染商品数据</span></span><br><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">'小米'</span>,</span><br><span class="line">    price: <span class="number">3999</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">'oppo'</span>,</span><br><span class="line">    price: <span class="number">2999</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    name: <span class="string">'荣耀'</span>,</span><br><span class="line">    price: <span class="number">1299</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    id: <span class="number">4</span>,</span><br><span class="line">    name: <span class="string">'华为'</span>,</span><br><span class="line">    price: <span class="number">1999</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    id: <span class="number">5</span>,</span><br><span class="line">    name: <span class="string">'红米'</span>,</span><br><span class="line">    price: <span class="number">999</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'tbody'</span>);</span><br><span class="line"><span class="comment">// 动态显示商品数据</span></span><br><span class="line">showData(data);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    tbody.innerHTML = <span class="string">''</span>;</span><br><span class="line">    data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tr = <span class="string">'&lt;tr&gt;&lt;td&gt;'</span> + value.id + <span class="string">'&lt;/td&gt;&lt;td&gt;'</span> + value.name + <span class="string">'&lt;/td&gt;&lt;td&gt;'</span> + value.price + <span class="string">'&lt;/td&gt;&lt;/tr&gt;'</span></span><br><span class="line">        tbody.insertAdjacentHTML(<span class="string">"beforeend"</span>, tr);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照价格查询商品</span></span><br><span class="line"><span class="keyword">var</span> priceSearch = <span class="built_in">document</span>.getElementById(<span class="string">'price-search'</span>)</span><br><span class="line">priceSearch.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> priceFrom = <span class="built_in">document</span>.getElementById(<span class="string">'price-from'</span>).value;</span><br><span class="line">    <span class="keyword">var</span> priceTo = <span class="built_in">document</span>.getElementById(<span class="string">'price-to'</span>).value;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>(priceFrom) &gt; <span class="built_in">Number</span>(priceTo) || <span class="built_in">isNaN</span>(priceFrom) || <span class="built_in">isNaN</span>(priceTo)) &#123;</span><br><span class="line">        showData(data);</span><br><span class="line">        alert(<span class="string">'请输入正确的价格区间!'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!priceFrom &amp;&amp; !priceTo) &#123;<span class="comment">// 价格区间都不填入的时候显示全部数据</span></span><br><span class="line">        showData(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> filterData = data.filter(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value.price &gt;= priceFrom &amp;&amp; value.price &lt;= priceTo</span><br><span class="line">        &#125;)</span><br><span class="line">        showData(filterData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照商品名称查询</span></span><br><span class="line"><span class="keyword">var</span> nameSearch = <span class="built_in">document</span>.getElementById(<span class="string">'name-search'</span>);</span><br><span class="line">nameSearch.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> goodsName = <span class="built_in">document</span>.getElementById(<span class="string">'goods-name'</span>).value;</span><br><span class="line">    <span class="keyword">if</span> (goodsName) &#123;</span><br><span class="line">        <span class="keyword">var</span> filterData = data.filter(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value.name.indexOf(goodsName) !== <span class="number">-1</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        showData(filterData);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        showData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果</p><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/js-goods-search.gif" alt="js-goods-search"></p><h3 id="字符串方法">字符串方法</h3><h4 id="trim">trim()</h4><p><code>trim()</code>方法会从一个字符串的两端删除空白字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.trim()</span><br></pre></td></tr></table></figure><p><code>trim()</code>方法并不影响原字符串本身，它返回的是一个新的字符串</p><h3 id="对象方法">对象方法</h3><h4 id="Object-keys">Object.keys()</h4><p><code>Object.keys()</code> 方法会返回一个由一个给定对象的自身<strong>可枚举属性</strong>组成的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.keys(obj)</span><br></pre></td></tr></table></figure><ul><li>效果类似 <code>for..in</code></li><li>返回一个有属性名组成的数组</li></ul><h4 id="Object-defineProperty">Object.defineProperty()</h4><p><code>Object.defineProperty()</code>定义对象中新属性或修改原有的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>obj</code></td><td>必需，目标对象</td></tr><tr><td><code>prop</code></td><td>必需，需定义或修改的属性的名字</td></tr><tr><td><code>descriptor</code></td><td>必需，目标属性所拥有的特性</td></tr></tbody></table><p><code>Object.defineProperty()</code>第三个参数<code>descriptor</code>说明：以对象形式{}书写</p><ul><li><code>value</code>：设置属性的值，默认为<code>undefined</code></li><li><code>writable</code>：值是否可以重写。<code>true | false</code>，默认为<code>false</code></li><li><code>enumerable</code>：目标属性是否可以被枚举。<code>true | false</code>，默认为<code>false</code></li><li><code>configurable</code>：目标属性是否可以被删除或是否可以再次修改特性<code>descriptor</code>。<code>true | false</code>，默认为<code>false</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1Kt411w7MP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javaScript进阶面向对象ES6&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>17-JS的高级进阶-面向对象</title>
    <link href="https://www.hardape.top/article/2d383f1.html"/>
    <id>https://www.hardape.top/article/2d383f1.html</id>
    <published>2020-05-07T23:57:41.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1Kt411w7MP" target="_blank" rel="noopener">javaScript进阶面向对象ES6</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="面向对象编程">面向对象编程</h2><h3 id="面向过程编程">面向过程编程</h3><p>面向过程编程(<strong>POP，Process Oriented Progamming</strong>)就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个地依次调用。</p><h3 id="面向对象编程-v2">面向对象编程</h3><ul><li>面向对象(<strong>OOP，Object Oriented Progamming</strong>)是把一个事务分解成一个个对象，然后由对象之间分工与合作。</li><li>面向对象的特性：<strong>封装性</strong>、<strong>继承性</strong>、<strong>多态性</strong></li></ul><h3 id="面向过程和面向对象的对比">面向过程和面向对象的对比</h3><h4 id="面向过程">面向过程</h4><ul><li>优点：性能比面向对象高，适合和硬件联系和紧密的程序，例如单片机就采用面向过程编程。</li><li>缺点：没有面向对象易维护、易复用、易扩展。</li></ul><h4 id="面向对象">面向对象</h4><ul><li>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态的特性，可以设计出低耦合的系统，使系统更加灵活，更加易于维护</li><li>缺点：性能比面向过程低</li></ul><h2 id="ES6中的类和对象">ES6中的类和对象</h2><h3 id="面向对象的思维特点">面向对象的思维特点</h3><ul><li>抽取(抽象)对象共用的属性和行为组织(封装)成一个类(模板)</li><li>对类进行实例化，获取类的对象</li></ul><h3 id="对象-object">对象(object)</h3><ul><li>在现实生活中，万物皆对象，对象是一个具体的事物，例如，一本书、一辆汽车、一个人可以是&quot;对象&quot;，一个数据库、一张网页、一个远程服务器的连接也可以是&quot;对象&quot;。</li><li>在JavaScript中，对象是一组<strong>无序的相关属性和方法的集合</strong>，所有的事物都是对象，例如字符串、数值、数组、函数等。</li><li>对象是由<strong>属性</strong>和<strong>方法</strong>组成的。</li><li>属性：事物的特征，在对象中用属性来表示(常用名词表示)</li><li>方法：事物的行为，在对象中用方法来表示(常用动词表示)</li></ul><h3 id="类-class">类(class)</h3><ul><li>在ES6中新增加了类的概念，可以使用<strong>class</strong>关键字声明一个类，之后以这个类来实例化对象。</li><li>类抽象了对象的公共部分，它泛指某一大类。</li><li>对象特指一个，通过类实例化一个具体的对象。</li></ul><h3 id="创建类">创建类</h3><h4 id="语法">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建实例">创建实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xx = <span class="keyword">new</span> name();</span><br></pre></td></tr></table></figure><ul><li>注意：类必须使用<strong>new</strong>实例化对象</li></ul><h3 id="类constructor构造函数">类constructor构造函数</h3><p><code>constructor()</code>方法是类的构造函数(默认方法)，<strong>用于传递参数，返回实例对象</strong>，通过new命令生成对象实例时，自动调用该方法，如果没有显示定义，类内部会自动创建一个空构造器<code>constructor()</code>。</p><h4 id="例子">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建学生类并定构造器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(sname, sage) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">        <span class="keyword">this</span>.sage = sage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用构造方法实例化对象</span></span><br><span class="line"><span class="keyword">var</span> codeApe = <span class="keyword">new</span> Student(<span class="string">"辛猿毅码"</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><h3 id="类添加方法">类添加方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建学生类并定于构造器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(sname, sage) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">        <span class="keyword">this</span>.sage = sage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类添加方法</span></span><br><span class="line">    code() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.sname + <span class="string">'秃头中...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    study(subject) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.sname + <span class="string">"上"</span> + subject + <span class="string">"课划水中..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用构造方法实例化对象</span></span><br><span class="line"><span class="keyword">var</span> codeApe = <span class="keyword">new</span> Student(<span class="string">"辛猿毅码"</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象方法</span></span><br><span class="line">codeApe.code();</span><br><span class="line">codeApe.study(<span class="string">"高数"</span>);</span><br></pre></td></tr></table></figure><ul><li>类中的方法不需要写<code>function</code>关键字</li><li>多个类方法之间不能添加逗号分隔</li></ul><h3 id="类的继承">类的继承</h3><p>子类可以继承父类的一些<strong>属性</strong>和<strong>方法</strong>，在JS中使用<strong>extends</strong>关键字实现继承。</p><h4 id="语法-v2">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;<span class="comment">// 父类</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;<span class="comment">// 子类继承父类</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承中，如果实例化子类输出一个方法，先看子类中有没有该方法，如果有就执行子类的方法；如果没有，就取查找父类中有没有该方法，如果父类中有，就执行(<strong>就近原则</strong>)</li></ul><h3 id="super关键字">super关键字</h3><p><strong>super</strong>关键字用于访问和调用对象父类上的函数。可以调用父类的构造函数，也可以调用父类的普通函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用父类的构造函数</span></span><br><span class="line"><span class="keyword">super</span>([pram1, pram2, ...])</span><br><span class="line"><span class="comment">// 调用父类的普通函数</span></span><br><span class="line"><span class="keyword">super</span>.函数名([pram1, pram2, ...])</span><br></pre></td></tr></table></figure><ul><li>注意：子类在构造函数中使用<code>super</code>，必须放到<code>this</code>前面(必须先调用父类的构造方法，再使用子类的构造方法)</li></ul><h3 id="注意点">注意点</h3><ul><li>在ES6中类没有变量提升，所以必须先定义类，才能通过类实例化对象。</li><li>类里面的共有的属性和方法要添加<code>this</code>使用和调用</li><li><code>constructor</code>里面的<code>this</code>指向的是创建的实例对象，方法里面的<code>this</code>指向这个方法的调用者</li></ul><h2 id="面向对象案例-Tab栏">面向对象案例-Tab栏</h2><h3 id="功能需求">功能需求</h3><ol><li>点击tab栏，可以实现切换效果</li><li>点击+号，可以添加tab项和内容项</li><li>点击x号，可以删除当前的tab项和内容项</li><li>双击tab项文字或内容文字，可以修改里面的文字内容</li></ol><h3 id="知识点补充">知识点补充</h3><h4 id="双击禁止选定文字">双击禁止选定文字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().removeAllRanges() : <span class="built_in">document</span>.selection.empty();</span><br></pre></td></tr></table></figure><h3 id="结构-HTML">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>JS面向对象-标签页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tabsbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"tabsnav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-current"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>测试1<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>测试3<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tabadd"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tabscon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"sec-current"</span>&gt;</span>测试1<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span>测试2<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span>测试3<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#50cdf8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> <span class="selector-tag">nav</span> <span class="selector-class">.tabadd</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#50cdf8</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#50cdf8</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> <span class="selector-tag">nav</span> <span class="selector-class">.tabadd</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#50cdf8</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">2px</span> solid <span class="number">#50cdf8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.li-current</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#90e0fa</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tabsbox</span> <span class="selector-tag">nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#50cdf8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tabscon</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> solid <span class="number">#50cdf8</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tabscon</span> <span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sec-current</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JS">行为(JS)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用面向对象动态完成标签页</span></span><br><span class="line"><span class="keyword">var</span> that;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tab</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">        that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 获取元素</span></span><br><span class="line">        <span class="keyword">this</span>.main = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">        <span class="keyword">this</span>.addBtn = <span class="keyword">this</span>.main.querySelector(<span class="string">'.tabadd'</span>);</span><br><span class="line">        <span class="keyword">this</span>.nav = <span class="keyword">this</span>.main.querySelector(<span class="string">'.tabsnav'</span>);</span><br><span class="line">        <span class="keyword">this</span>.con = <span class="keyword">this</span>.main.querySelector(<span class="string">'.tabscon'</span>);</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取更新的HTML节点</span></span><br><span class="line">    getUpdatedNode() &#123;</span><br><span class="line">        <span class="keyword">this</span>.navLis = <span class="keyword">this</span>.nav.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">        <span class="keyword">this</span>.conSecs = <span class="keyword">this</span>.con.querySelectorAll(<span class="string">'section'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化获取各个HTML元素并注册事件</span></span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getUpdatedNode();</span><br><span class="line">        <span class="keyword">this</span>.addBtn.onclick = <span class="keyword">this</span>.addTab;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.navLis.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.navLis[i].index = i;</span><br><span class="line">            <span class="keyword">this</span>.navLis[i].onclick = <span class="keyword">this</span>.toggleTab;</span><br><span class="line">            <span class="keyword">this</span>.navLis[i].querySelector(<span class="string">'span'</span>).onclick = <span class="keyword">this</span>.removeTab;</span><br><span class="line">            <span class="keyword">this</span>.navLis[i].querySelector(<span class="string">'h4'</span>).ondblclick = <span class="keyword">this</span>.editTab;</span><br><span class="line">            <span class="keyword">this</span>.conSecs[i].ondblclick = <span class="keyword">this</span>.editTab;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清除标签导航栏和内容的类名</span></span><br><span class="line">    clearClass() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.navLis.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.navLis[i].className = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">this</span>.conSecs[i].className = <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 切换标签页功能</span></span><br><span class="line">    toggleTab() &#123;</span><br><span class="line">        that.clearClass();</span><br><span class="line">        <span class="keyword">this</span>.className = <span class="string">'li-current'</span>;</span><br><span class="line">        that.conSecs[<span class="keyword">this</span>.index].className = <span class="string">'sec-current'</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加标签页功能</span></span><br><span class="line">    addTab() &#123;</span><br><span class="line">        that.clearClass();</span><br><span class="line">        <span class="keyword">var</span> length = that.navLis.length + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> li = <span class="string">'&lt;li class="li-current"&gt;&lt;h4&gt;未命名-'</span> + length + <span class="string">'&lt;/h4&gt;&lt;span&gt;×&lt;/span&gt;&lt;/li&gt;'</span>;</span><br><span class="line">        <span class="keyword">var</span> sec = <span class="string">'&lt;section class="sec-current"&gt;空白页-'</span> + length + <span class="string">'&lt;/section&gt;'</span>;</span><br><span class="line">        that.nav.querySelector(<span class="string">'ul'</span>).insertAdjacentHTML(<span class="string">'beforeend'</span>, li);</span><br><span class="line">        that.con.insertAdjacentHTML(<span class="string">'beforeend'</span>, sec);</span><br><span class="line">        that.init();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除标签页功能</span></span><br><span class="line">    removeTab(e) &#123;</span><br><span class="line">        e.stopPropagation();<span class="comment">// 阻止冒泡 防止触发li 的切换点击事件</span></span><br><span class="line">        <span class="keyword">var</span> index = <span class="keyword">this</span>.parentNode.index</span><br><span class="line">        that.navLis[index].remove();</span><br><span class="line">        that.conSecs[index].remove();</span><br><span class="line">        that.init();</span><br><span class="line">        <span class="keyword">if</span> (that.nav.querySelector(<span class="string">'.li-current'</span>)) <span class="keyword">return</span>;</span><br><span class="line">        that.navLis[that.navLis.length - <span class="number">1</span>] &amp;&amp; that.navLis[that.navLis.length - <span class="number">1</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改标签页功能</span></span><br><span class="line">    editTab() &#123;</span><br><span class="line">        <span class="comment">// 双击禁止选定文字</span></span><br><span class="line">        <span class="built_in">window</span>.getSelection ? <span class="built_in">window</span>.getSelection().removeAllRanges() : <span class="built_in">document</span>.selection.empty();</span><br><span class="line">        <span class="keyword">var</span> str = <span class="keyword">this</span>.innerHTML;</span><br><span class="line">        <span class="keyword">this</span>.innerHTML = <span class="string">'&lt;input type = "text" /&gt;'</span>;</span><br><span class="line">        <span class="keyword">var</span> input = <span class="keyword">this</span>.children[<span class="number">0</span>];</span><br><span class="line">        input.value = str;</span><br><span class="line">        input.select();<span class="comment">// 文本框里面的文字处于选定状态</span></span><br><span class="line">        input.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.parentNode.innerHTML = <span class="keyword">this</span>.value;</span><br><span class="line">        &#125;;</span><br><span class="line">        input.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">                <span class="comment">// 手动调用表单失去焦点事件  不需要鼠标离开操作</span></span><br><span class="line">                <span class="keyword">this</span>.blur();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Tab(<span class="string">'tabsbox'</span>);</span><br></pre></td></tr></table></figure><h3 id="效果">效果</h3><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/js-tab.gif" alt="js-tab"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1Kt411w7MP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;javaScript进阶面向对象ES6&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
      <category term="OOP" scheme="https://www.hardape.top/tags/OOP/"/>
    
      <category term="ES6" scheme="https://www.hardape.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>04-jQuery案例</title>
    <link href="https://www.hardape.top/article/bc683c32.html"/>
    <id>https://www.hardape.top/article/bc683c32.html</id>
    <published>2020-04-23T05:04:13.000Z</published>
    <updated>2020-06-11T09:21:48.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1a4411w7Gx" target="_blank" rel="noopener">jQuery网页开发案例精讲</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="仿新浪下拉菜单">仿新浪下拉菜单</h2><h3 id="结构-HTML">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仿新浪下拉菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sina-nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sina-subnav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>私信<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>@我<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sina-subnav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>博客评论<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>未读提醒<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sina-subnav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>免费邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>VIP邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>企业邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4c4c4c</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sina-nav</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">3px</span> solid <span class="number">#ff8500</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#edeef0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fcfcfc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sina-nav</span>&gt;<span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sina-nav</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sina-nav</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#edeef0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff8400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sina-subnav</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sina-subnav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fecc5b</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: none;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">29px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">29px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sina-subnav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff5da</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e67902</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JQuery">行为(JQuery)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// // 鼠标经过</span></span><br><span class="line">    <span class="comment">// $(".sina-nav&gt;li").mouseover(function() &#123;</span></span><br><span class="line">    <span class="comment">//     $(this).children("ul").slideDown(300);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// $(".sina-nav&gt;li").mouseout(function() &#123;</span></span><br><span class="line">    <span class="comment">//     $(this).children("ul").slideUp(300);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// $('.sina-nav&gt;li').hover(function () &#123;</span></span><br><span class="line">    <span class="comment">//     $(this).children("ul").slideDown(300);</span></span><br><span class="line">    <span class="comment">// &#125;, function () &#123;</span></span><br><span class="line">    <span class="comment">//     $(this).children("ul").slideUp(300);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    $(<span class="string">'.sina-nav&gt;li'</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// stop方法必须写到动画的前面</span></span><br><span class="line">        $(<span class="keyword">this</span>).children(<span class="string">"ul"</span>).stop().slideToggle(<span class="number">300</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="效果">效果</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jquery-sina-nav.gif" alt="jquery-sina-nav" style="zoom: 80%;" /><h2 id="仿淘宝精品服饰">仿淘宝精品服饰</h2><h3 id="结构-HTML-v2">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仿淘宝精品服饰 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"taobao-clothes"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>女靴<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>雪地靴<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>连衣裙<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>呢大衣<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>毛衣<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>男棉服<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>铅笔裤<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>羽绒服<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛仔裤<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/女靴.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/雪地靴.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/连衣裙.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/呢大衣.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/毛衣.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/男棉服.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/铅笔裤.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/羽绒服.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/牛仔裤.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS-v2">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.taobao-clothes</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">248px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span>,</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(img/li.jpg) repeat-x;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">27px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">27px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/abg.gif);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JQuery-v2">行为(JQuery)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".nav li"</span>).mouseover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前li的索引号</span></span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index();</span><br><span class="line">        <span class="comment">// 链式编程</span></span><br><span class="line">        $(<span class="string">".content div"</span>).eq(index).show().siblings().hide();</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">'div'</span>).css(<span class="string">'width'</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="效果-v2">效果</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jquery-taobao-clothes.gif" alt="jquery-taobao-clothes" style="zoom: 80%;" /><h2 id="仿京东tab栏切换">仿京东tab栏切换</h2><h3 id="结构-HTML-v3">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仿京东商品信息tab栏切换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"goods-tab"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span>商品介绍<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>规格与包装<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>售后保障<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>商品评价(143万+)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>手机社区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">style</span>=<span class="string">"display: block;"</span>&gt;</span></span><br><span class="line">    商品介绍模块</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    规格与包装模块</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    售后保障模块</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    商品评价模块</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    手机社区模块</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS-v3">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.goods-tab</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">38px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e4393c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods-tab</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods-tab</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e4393c</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JQuery-v3">行为(JQuery)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.goods-tab&gt;li'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 得到当前li的索引号</span></span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index();</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'current'</span>).siblings().removeClass(<span class="string">'current'</span>);</span><br><span class="line">        $(<span class="string">'.item'</span>).eq(index).show().siblings(<span class="string">'.item'</span>).hide();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="效果-v3">效果</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jquery-jd-tab.gif" alt="jquery-jd-tab" style="zoom: 80%;" /><h2 id="照片墙高亮显示">照片墙高亮显示</h2><h3 id="结构-HTML-v4">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"highlight"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/01.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/02.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/03.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/04.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/05.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/06.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS-v4">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">630px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">394px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.highlight</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JQuery-v4">行为(JQuery)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.highlight li'</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).siblings().stop().fadeTo(<span class="number">300</span>, <span class="number">.5</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).siblings().stop().fadeTo(<span class="number">300</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="效果-v4">效果</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jquery-photo-highlight.gif" alt="jquery-photo-highlight" style="zoom: 67%;" /><h2 id="仿王者荣耀手风琴动画">仿王者荣耀手风琴动画</h2><h3 id="结构-HTML-v5">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pvp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/m1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/m.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/l1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/l.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/c1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/c.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/w1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/w.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/z1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/z.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/h1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/h.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/t1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/t.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS-v5">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pvp</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(img/bg.png);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">852px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pvp</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">69px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">69px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.small</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">69px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">69px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.big</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">224px</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pvp</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">224px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pvp</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> <span class="selector-class">.big</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pvp</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> <span class="selector-class">.small</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JQuery-v5">行为(JQuery)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".pvp li"</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 当前li宽度变为224px，同时里面的小图片淡出，大图片淡入</span></span><br><span class="line">        $(<span class="keyword">this</span>).stop().animate(&#123;</span><br><span class="line">            width: <span class="number">224</span></span><br><span class="line">        &#125;).find(<span class="string">".small"</span>).stop().fadeOut().siblings(<span class="string">".big"</span>).stop().fadeIn();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当其他li宽度变为64px，同时里面的大图片淡出，小图片淡入</span></span><br><span class="line">        $(<span class="keyword">this</span>).siblings().stop().animate(&#123;</span><br><span class="line">            width: <span class="number">69</span></span><br><span class="line">        &#125;).find(<span class="string">".big"</span>).stop().fadeOut().siblings(<span class="string">".small"</span>).stop().fadeIn();;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="效果-v5">效果</h3><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jQuery-pvp.gif" alt="jQuery-pvp"></p><h2 id="商品购物车综合">商品购物车综合</h2><h3 id="功能需求">功能需求</h3><ul><li>商品选择、全选/取消选择框功能</li><li>商品数量加减功能</li><li>统计单类商品小计功能</li><li>统计选中商品件数、商品总价功能</li><li>商品单类商品删除、删除选中商品、清空购物车功能</li></ul><h3 id="结构-HTML-v6">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 商品购物车综合案例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"goods"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span> <span class="attr">id</span>=<span class="string">"goodsHead"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"checkAll"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>小计<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">"goodsList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"check"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>纯棉T恤<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥39.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"num"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"sum"</span>&gt;</span>￥39.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"remove"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"check"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>牛皮腰带<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥29.90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"num"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"sum"</span>&gt;</span>￥29.90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"remove"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"check"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>千寻护目镜<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥22.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"num"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"sum"</span>&gt;</span>￥22.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"remove"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"check"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>魅可(MAC)经典唇膏<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥155.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"num"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"sum"</span>&gt;</span>￥155.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"remove"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> &gt;</span>共 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"goodsSumNum"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 件<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"removeSelected"</span>&gt;</span>删除选中的商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"removeAll"</span>&gt;</span>清空购物车<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>总价 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"goodsSumPrice"</span>&gt;</span>￥0.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>结算<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS-v6">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid orange;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid orange;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#404060</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff692f</span>;</span><br><span class="line">    <span class="attribute">font</span>: bold <span class="number">16px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">14px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#goodsList</span> <span class="selector-tag">tr</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fafafa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#goodsList</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#goodsList</span> <span class="selector-class">.sub</span>,</span><br><span class="line"><span class="selector-id">#goodsList</span> <span class="selector-class">.add</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#goodsList</span> <span class="selector-class">.num</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">tfoot</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goodsSumNum</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff4400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goodsSumPrice</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff4400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">tfoot</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff692f</span>;</span><br><span class="line">    <span class="attribute">font</span>: bold <span class="number">16px</span> <span class="string">"微软雅黑"</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">tfoot</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff4400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-tag">tfoot</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.removeSelected</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.removeAll</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.remove</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff4400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.remove</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JQuery-v6">行为(JQuery)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当全选框的状态改变时，其他选择框状态与其一致</span></span><br><span class="line">    $(<span class="string">".checkAll"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".check"</span>).prop(<span class="string">"checked"</span>, $(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">".check"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 检查全选按钮的状态</span></span><br><span class="line">        checkoutCheckAll()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装函数计算选中商品的总数量   </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calSumNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sumNum = <span class="number">0</span>;</span><br><span class="line">        $(<span class="string">".check:checked"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, domEle</span>) </span>&#123;</span><br><span class="line">            sumNum += <span class="built_in">parseInt</span>($(domEle).parents(<span class="string">"tr"</span>).find(<span class="string">".num"</span>).val());</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">".goodsSumNum"</span>).text(sumNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装函数计算选中商品的总金额</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calSumPrice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sumPrice = <span class="number">0</span>;</span><br><span class="line">        $(<span class="string">".check:checked"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, domEle</span>) </span>&#123;</span><br><span class="line">            sumPrice += <span class="built_in">parseFloat</span>($(domEle).parents(<span class="string">"tr"</span>).find(<span class="string">".sum"</span>).text().substr(<span class="number">1</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">".goodsSumPrice"</span>).text(<span class="string">"￥"</span> + sumPrice.toFixed(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当选择框的状态改变时，计算总数量和总金额</span></span><br><span class="line">    $(<span class="string">":checkbox"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 计算选中总数量</span></span><br><span class="line">        calSumNum();</span><br><span class="line">        <span class="comment">// 计算选中商品的总金额</span></span><br><span class="line">        calSumPrice();</span><br><span class="line">        <span class="comment">// 改变背景颜色</span></span><br><span class="line">        setCheckBgc();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 数量增减 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数量减少</span></span><br><span class="line">    $(<span class="string">"#goodsList .sub"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = $(<span class="keyword">this</span>).siblings(<span class="string">".num"</span>).val();</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num--;</span><br><span class="line">        $(<span class="keyword">this</span>).siblings(<span class="string">".num"</span>).val(num);</span><br><span class="line">        <span class="comment">// 小计计算</span></span><br><span class="line">        <span class="keyword">var</span> price = $(<span class="keyword">this</span>).parent().siblings(<span class="string">".price"</span>).text().substr(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sum = (num * price).toFixed(<span class="number">2</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).parent().siblings(<span class="string">".sum"</span>).text(<span class="string">"￥"</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算选中总数量</span></span><br><span class="line">        calSumNum();</span><br><span class="line">        <span class="comment">// 计算选中商品的总金额</span></span><br><span class="line">        calSumPrice();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数量增加</span></span><br><span class="line">    $(<span class="string">"#goodsList .add"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> num = $(<span class="keyword">this</span>).siblings(<span class="string">".num"</span>).val();</span><br><span class="line">        num++;</span><br><span class="line">        $(<span class="keyword">this</span>).siblings(<span class="string">".num"</span>).val(num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小计计算</span></span><br><span class="line">        <span class="keyword">var</span> price = $(<span class="keyword">this</span>).parent().siblings(<span class="string">".price"</span>).text().substr(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> sum = (num * price).toFixed(<span class="number">2</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).parent().siblings(<span class="string">".sum"</span>).text(<span class="string">"￥"</span> + sum);</span><br><span class="line">        <span class="comment">// 计算选中总数量</span></span><br><span class="line">        calSumNum();</span><br><span class="line">        <span class="comment">// 计算选中商品的总金额</span></span><br><span class="line">        calSumPrice();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数量改变时计算单个商品的小计</span></span><br><span class="line">    $(<span class="string">"#goodsList .num"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当用户输入的值不大于0或不为数字时强制将数量设置为1</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>($(<span class="keyword">this</span>).val()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).val() &lt;= <span class="number">0</span> || <span class="built_in">isNaN</span>($(<span class="keyword">this</span>).val())) &#123;</span><br><span class="line">            $(<span class="keyword">this</span>).val(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 小计计算</span></span><br><span class="line">        <span class="keyword">var</span> num = $(<span class="keyword">this</span>).val();</span><br><span class="line">        <span class="keyword">var</span> price = $(<span class="keyword">this</span>).parent().siblings(<span class="string">".price"</span>).text().substr(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> sum = (num * price).toFixed(<span class="number">2</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).parent().siblings(<span class="string">".sum"</span>).text(<span class="string">"￥"</span> + sum);</span><br><span class="line">        <span class="comment">// 计算选中总数量</span></span><br><span class="line">        calSumNum();</span><br><span class="line">        <span class="comment">// 计算选中商品的总金额</span></span><br><span class="line">        calSumPrice();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单类商品删除</span></span><br><span class="line">    $(<span class="string">".remove"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).parent().remove();</span><br><span class="line">        <span class="comment">// 计算选中总数量</span></span><br><span class="line">        calSumNum();</span><br><span class="line">        <span class="comment">// 计算选中商品的总金额</span></span><br><span class="line">        calSumPrice();</span><br><span class="line">        <span class="comment">// 检查全选按钮的状态</span></span><br><span class="line">        checkoutCheckAll();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除选中的商品</span></span><br><span class="line">    $(<span class="string">".removeSelected"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".check:checked"</span>).parents(<span class="string">'tr'</span>).remove();</span><br><span class="line">        <span class="comment">// 计算选中总数量</span></span><br><span class="line">        calSumNum();</span><br><span class="line">        <span class="comment">// 计算选中商品的总金额</span></span><br><span class="line">        calSumPrice();</span><br><span class="line">        <span class="comment">// 检查全选按钮的状态</span></span><br><span class="line">        checkoutCheckAll();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空购物车</span></span><br><span class="line">    $(<span class="string">".removeAll"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#goodsList"</span>).empty();</span><br><span class="line">        <span class="comment">// 计算选中总数量</span></span><br><span class="line">        calSumNum();</span><br><span class="line">        <span class="comment">// 计算选中商品的总金额</span></span><br><span class="line">        calSumPrice();</span><br><span class="line">        <span class="comment">// 检查全选按钮的状态</span></span><br><span class="line">        checkoutCheckAll();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查全选按钮的状态</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkoutCheckAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 使用:checked选择器选择已选择的选择器并加以判断</span></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="string">".check:checked"</span>).length == $(<span class="string">".check"</span>).length &amp;&amp; $(<span class="string">".check"</span>).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            $(<span class="string">".checkAll"</span>).prop(<span class="string">"checked"</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">".checkAll"</span>).prop(<span class="string">"checked"</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置选中行的背景颜色</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setCheckBgc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".check"</span>).parents(<span class="string">"tr"</span>).css(<span class="string">"background-color"</span>, <span class="string">"#fafafa"</span>);</span><br><span class="line">        $(<span class="string">".check:checked"</span>).parents(<span class="string">"tr"</span>).css(<span class="string">"background-color"</span>, <span class="string">"#fff4e8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="效果-v6">效果</h3><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jQuery-shopping-car.gif" alt="jQuery-shopping-car"></p><h2 id="仿淘宝侧边栏电梯特效综合">仿淘宝侧边栏电梯特效综合</h2><h3 id="功能需求-v2">功能需求</h3><ul><li>滚动条滚动至一定位置显示返回顶部按钮，否则隐藏</li><li>点击返回顶部按钮返回顶部</li><li>侧边栏点击滚动条滚动到指定模块</li><li>滚动条滚动侧边栏响应模块高亮显示</li></ul><h3 id="结构-HTML-v7">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仿淘宝固定侧边栏电梯特效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"w"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span>banner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内容模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/goods.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/shopping.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/good-store.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/live.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/life.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/play.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/shihui.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/love.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"fixed-tool"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"shopping-goods current lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>爱逛好货<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"store-live lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>好店直播<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"quality-feature lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>品质特色<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"benefit-hot lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>实惠热卖<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"guess-love lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>猜你喜欢<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"return-top"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"feed-back"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>反馈<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tip-off"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>暴恐举报<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS-v7">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3c3c3c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1190px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff8600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffc229</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(n+4)</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#31ba98</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">49%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#997aff</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">548px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, #ff971b, #ff5000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shopping-goods</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.guess-love</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff4400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.store-live</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0055</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.quality-feature</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8d7afb</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.return-top</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.benefit-hot</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a8c001</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, #ff971b, #ff5000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.current</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JQuery-v7">行为(JQuery)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> toolTop = $(<span class="string">".fixed-tool"</span>).offset().top;</span><br><span class="line">    <span class="keyword">var</span> contentTop = $(<span class="string">".content"</span>).offset().top;</span><br><span class="line">    <span class="comment">// 节流阀/互斥锁，当点击侧边栏li时不需要执行页面滚动事件里面电梯导航的样式改变代码</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 显示/隐藏返回顶部按钮并固定侧边栏</span></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">window</span>).scrollTop() &gt;= contentTop) &#123;</span><br><span class="line">            $(<span class="string">".return-top"</span>).show();</span><br><span class="line">            $(<span class="string">".fixed-tool"</span>).css(&#123;</span><br><span class="line">                position: <span class="string">"fixed"</span>,</span><br><span class="line">                top: <span class="number">30</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">".return-top"</span>).hide();</span><br><span class="line">            $(<span class="string">".fixed-tool"</span>).css(&#123;</span><br><span class="line">                position: <span class="string">"absolute"</span>,</span><br><span class="line">                top: toolTop</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 侧边栏中的电梯导航样式改变</span></span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">window</span>).scrollTop() &lt;= $(<span class="string">".content&gt;div:first"</span>).offset().top) &#123;</span><br><span class="line">            $(<span class="string">".fixed-tool .lift:first"</span>).addClass(<span class="string">"current"</span>).siblings(<span class="string">".lift"</span>).removeClass(<span class="string">"current"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            $(<span class="string">".content&gt;div"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, domEle</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="built_in">window</span>).scrollTop() &gt;= $(domEle).offset().top) &#123;</span><br><span class="line">                    $(<span class="string">".fixed-tool .lift"</span>).eq(index).addClass(<span class="string">"current"</span>).siblings(<span class="string">".lift"</span>).removeClass(<span class="string">"current"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击侧边栏中的电梯导航</span></span><br><span class="line">    $(<span class="string">".fixed-tool .lift"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 点击后关闭节流阀</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 改变样式</span></span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>).siblings(<span class="string">".lift"</span>).removeClass(<span class="string">"current"</span>);</span><br><span class="line">        <span class="comment">// 获取索引号滑动到指定模块</span></span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index();</span><br><span class="line">        <span class="keyword">var</span> top = $(<span class="string">".content&gt;div"</span>).eq(index).offset().top;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在滚动动画完成后在回调函数中打开节流阀</span></span><br><span class="line">        $(<span class="string">"html,body"</span>).stop().animate(&#123;</span><br><span class="line">            scrollTop: top</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点击返回顶部按钮返回顶部</span></span><br><span class="line">    $(<span class="string">".return-top"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        $(<span class="string">"html,body"</span>).stop().animate(&#123;</span><br><span class="line">            scrollTop: <span class="number">0</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="效果-v7">效果</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jquery-taobao-fixed-tool.gif" alt="jquery-taobao-fixed-tool" style="zoom:80%;" /><h2 id="仿todolist综合">仿todolist综合</h2><blockquote><p>todolist网站：<a href="http://www.todolist.cn/" target="_blank" rel="noopener">http://www.todolist.cn/</a></p></blockquote><h3 id="功能需求-v3">功能需求</h3><p>最简单的待办事件列表——关闭浏览器待办事件列表不会消失</p><h3 id="结构-HTML-v8">结构(HTML)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"w"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"todo-input"</span>&gt;</span>ToDoList<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"todo-input"</span> <span class="attr">placeholder</span>=<span class="string">"键入Enter添加ToDo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"w"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        正在进行</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        已经完成</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"done-count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"w"</span>&gt;</span></span><br><span class="line">    Copyright © 2014 todolist.cn</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span>clear<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式-CSS-v8">样式(CSS)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cdcdcd</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">620px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#323232</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.24</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.45</span>) inset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">h2</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e6e6fa</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#66667e</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="number">#629a9c</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.07</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">li</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">6px</span> double <span class="number">#FFF</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#66667e</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为-JQuery-v8">行为(JQuery)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 渲染页面</span></span><br><span class="line">    load();</span><br><span class="line">    <span class="comment">// 监听输入框的键盘事件，键入Enter存储数据并渲染页面</span></span><br><span class="line">    $(<span class="string">"#todo-input"</span>).on(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="keyword">this</span>).val() === <span class="string">""</span>) &#123;</span><br><span class="line">                alert(<span class="string">"请输入toDo事项"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获取数据</span></span><br><span class="line">                <span class="keyword">var</span> data = getData();</span><br><span class="line">                data.push(&#123; <span class="attr">title</span>: $(<span class="keyword">this</span>).val(), <span class="attr">done</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">                <span class="comment">// 保存数据到localStorage</span></span><br><span class="line">                saveData(data);</span><br><span class="line">                <span class="comment">// 渲染页面</span></span><br><span class="line">                load();</span><br><span class="line">                <span class="comment">// 清空文本框数据</span></span><br><span class="line">                $(<span class="keyword">this</span>).val(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 删除事件监听</span></span><br><span class="line">    $(<span class="string">"ol,ul"</span>).on(<span class="string">"click"</span>, <span class="string">"a"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).attr(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">var</span> data = getData();</span><br><span class="line">        data.splice(index, <span class="number">1</span>);</span><br><span class="line">        saveData(data);</span><br><span class="line">        load();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 使用事件委托监听事项的checkbox的点击事件</span></span><br><span class="line">    $(<span class="string">"ol,ul"</span>).on(<span class="string">"click"</span>, <span class="string">"input"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).siblings(<span class="string">"a"</span>).attr(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">var</span> data = getData();</span><br><span class="line">        data[index].done = $(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>);</span><br><span class="line">        saveData(data);</span><br><span class="line">        load();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空事件监听</span></span><br><span class="line">    $(<span class="string">".clear"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = [];</span><br><span class="line">        saveData(data);</span><br><span class="line">        load();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存数据到localStorage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    localStorage.setItem(<span class="string">"todoList"</span>, <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取localStorage中的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = localStorage.getItem(<span class="string">"todoList"</span>)</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将localStorage中的数据渲染到页面中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> datas = getData();</span><br><span class="line">    <span class="comment">// 记录正在进行和已经完成事项的个数</span></span><br><span class="line">    <span class="keyword">var</span> todoCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> doneCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 渲染页面前先清空页面数据</span></span><br><span class="line">    $(<span class="string">"ul,ol"</span>).empty();</span><br><span class="line">    $.each(datas, <span class="function"><span class="keyword">function</span> (<span class="params">index, ele</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ele.done) &#123;</span><br><span class="line">            <span class="comment">// 渲染至已经完成模块</span></span><br><span class="line">            <span class="keyword">var</span> li = $(<span class="string">"&lt;li&gt;&lt;input type='checkbox' checked&gt;&lt;p&gt;"</span> + ele.title + <span class="string">"&lt;/p&gt;&lt;a href='javascript:;' id='"</span> + index + <span class="string">"'&gt;×&lt;/a&gt;&lt;/li&gt;"</span>)</span><br><span class="line">            $(<span class="string">"ul"</span>).prepend(li);</span><br><span class="line">            doneCount++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 渲染至正在进行模块</span></span><br><span class="line">            <span class="keyword">var</span> li = $(<span class="string">"&lt;li&gt;&lt;input type='checkbox'&gt;&lt;p&gt;"</span> + ele.title + <span class="string">"&lt;/p&gt;&lt;a href='javascript:;' id='"</span> + index + <span class="string">"'&gt;×&lt;/a&gt;&lt;/li&gt;"</span>)</span><br><span class="line">            $(<span class="string">"ol"</span>).prepend(li);</span><br><span class="line">            todoCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 渲染事项个数</span></span><br><span class="line">    $(<span class="string">"#todo-count"</span>).text(todoCount);</span><br><span class="line">    $(<span class="string">"#done-count"</span>).text(doneCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果-v8">效果</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jquery-todolist.gif" alt="jquery-todolist" style="zoom:67%;" />]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1a4411w7Gx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery网页开发案例精讲&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jQuery" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://www.hardape.top/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>03-jQuery事件</title>
    <link href="https://www.hardape.top/article/b4f786d0.html"/>
    <id>https://www.hardape.top/article/b4f786d0.html</id>
    <published>2020-04-23T05:02:39.000Z</published>
    <updated>2020-06-11T09:21:48.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1a4411w7Gx" target="_blank" rel="noopener">jQuery网页开发案例精讲</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h1>jQuery事件</h1><h2 id="this">$(this)</h2><p>在jQuery事件中，<code>$(this)</code>指向接收事件的<strong>jQuery对象</strong></p><h2 id="jQuery事件注册">jQuery事件注册</h2><h3 id="单个事件注册">单个事件注册</h3><h4 id="语法">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.事件([<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;事件处理程序&#125;])</span><br></pre></td></tr></table></figure><ul><li>事件名称和原生JS的事件名称(不加on)基本一致，如<code>click</code>、<code>mouseover</code>、<code>mouseout</code>、<code>blur</code>、<code>focus</code>、<code>change</code>、<code>keydown</code>、<code>keyup</code>、<code>resize</code>、<code>scroll</code>等</li><li>jQuery事件注册不能给动态创建的元素注册事件。</li><li>当省略触发事件时，调用相应事件方法会自动触发该事件。如<code>$(&quot;button&quot;).click()</code></li></ul><h4 id="例子">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="jQuery事件处理">jQuery事件处理</h2><h3 id="on-绑定事件">on()绑定事件</h3><p><code>on()</code>方法用于在匹配元素上绑定一个或多个事件的事件处理函数。</p><h4 id="语法1">语法1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.on(events, [selector][, data], fn)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>events</code></td><td>一个或多个用<strong>空格</strong>分隔的事件类型，如<code>&quot;click&quot;</code>、<code>&quot;focus&quot;</code>等</td></tr><tr><td><code>selector</code></td><td>一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 <code>null</code> 或者忽略了该选择器，那么被选中的元素总是能触发事件。</td></tr><tr><td><code>data</code></td><td>当一个事件被触发时，要传递给事件处理函数的<code>event.data</code>,该传递的数据可以是对象类型，比如<code>{name:&quot;张三&quot;,age:18}</code>。</td></tr><tr><td><code>fn</code></td><td>事件被触发时，执行的函数。若该函数只是要执行<code>return false</code>的话，那么该参数位置可以直接简写成 <code>false</code>。</td></tr></tbody></table><h4 id="语法2">语法2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.on( events [, selector ] [, data ] )</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>events</code></td><td>一个对象，键是由一个或多个由空格分隔的事件类型及可选的名字空间，值是这些事件类型所对应的事件处理函数。</td></tr><tr><td><code>selector</code></td><td>一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 <code>null</code> 或者忽略了该选择器，那么被选中的元素总是能触发事件。</td></tr><tr><td><code>data</code></td><td>当一个事件被触发时，要传递给事件处理函数的<code>event.data</code>,该传递的数据可以是对象类型，比如<code>{name:&quot;张三&quot;,age:18}</code>。</td></tr></tbody></table><h4 id="例子-v2">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 第一种形式</span></span><br><span class="line">$(<span class="string">"div"</span>).on(<span class="string">"mouseenter mouseleave"</span>, &#123; <span class="attr">className</span>: <span class="string">"current"</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).toggleClass(e.data.className);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2. 第二种形式</span></span><br><span class="line">$(<span class="string">"div"</span>).on(&#123;</span><br><span class="line">    mouseenter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">"background"</span>, <span class="string">"skyblue"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">"background"</span>, <span class="string">"purple"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    mouseleave: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">"background"</span>, <span class="string">"blue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="注意">注意</h4><ul><li><code>on()</code>方法可以使用<code>selector</code>参数进行事件委派操作</li><li>事件委派：把原来加给子元素身上的绑定事件绑定在父元素身上，就是把事件委派给父元素</li><li>在此之前有<code>bind()</code>、<code>live()</code>、<code>delegate()</code>等方法来处理事件绑定或事件委派，最新版本的请用<code>on</code>代替它们</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件委派，click是绑定在ul上，但是触发click事件是ul的子元素li</span></span><br><span class="line">$(<span class="string">"ul"</span>).on(<span class="string">"click"</span>, <span class="string">"li"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"奥利给"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>on()</code>方法可以给动态生成的元素绑定事件，而jQuery事件注册的方法不能。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// on()方法可以给动态生成的元素绑定事件</span></span><br><span class="line">$(<span class="string">"ol"</span>).on(<span class="string">"click"</span>, <span class="string">"li"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"奥利给"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> li = $(<span class="string">"&lt;li&gt;我是被动态创建的&lt;/li&gt;"</span>);</span><br><span class="line">$(<span class="string">"ol"</span>).append(li);</span><br></pre></td></tr></table></figure><h3 id="off-解绑事件">off()解绑事件</h3><p><code>off()</code>方法可以移除通过<code>on()</code>方法添加的事件处理程序</p><h4 id="语法-v2">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.off( events [, selector ] [, fn] )</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>events</code></td><td>一个或多个用<strong>空格</strong>分隔的事件类型，如<code>&quot;click&quot;</code>、<code>&quot;focus&quot;</code>等</td></tr><tr><td><code>selector</code></td><td>一个选择器，当绑定事件处理程序时最初传递给 <code>.on()</code>的那个。</td></tr><tr><td><code>fn</code></td><td>事件处理程序函数以前附加事件名，或特殊值<code>false</code>.</td></tr></tbody></table><h4 id="例子-v3">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解绑p元素所有事件处理程序</span></span><br><span class="line">$(<span class="string">"p"</span>).off();</span><br><span class="line"><span class="comment">// 解绑p元素上的点击事件</span></span><br><span class="line">$(<span class="string">"p"</span>).off(<span class="string">"click"</span>);</span><br><span class="line"><span class="comment">// 解绑事件委托/委派</span></span><br><span class="line">$(<span class="string">"ul"</span>).off(<span class="string">"click"</span>, <span class="string">"li"</span>);</span><br></pre></td></tr></table></figure><h3 id="one-触发一次事件">one()触发一次事件</h3><ul><li><code>one()</code>为元素的事件添加处理函数。处理函数在每个元素上每种事件类型最<strong>多执行一次</strong>。</li><li><code>one()</code>的语法和参数与<code>on()</code>基本一致</li></ul><h4 id="语法1-v2">语法1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.one(events, [selector][, data], fn)</span><br></pre></td></tr></table></figure><h4 id="语法2-v2">语法2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.one( events [, selector ] [, data ] )</span><br></pre></td></tr></table></figure><h3 id="自动触发事件">自动触发事件</h3><p>有些事件希望自动触发，比如轮播图自动播放功能和点击右侧按钮一致，可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发。</p><h4 id="使用事件名">使用事件名()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.事件()</span><br></pre></td></tr></table></figure><ul><li>使用<code>element.事件()</code>会自动触发该事件，如<code>$(&quot;button&quot;).click()</code></li></ul><h4 id="使用trigger">使用trigger()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.trigger(<span class="string">"事件"</span>)</span><br></pre></td></tr></table></figure><ul><li>使用<code>element.trigger(&quot;事件&quot;)</code>会自动触发该事件，如<code>$(&quot;button&quot;).trigger(&quot;click&quot;)</code></li></ul><h4 id="使用triggerHandler">使用triggerHandler()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.triggerHandler(<span class="string">"事件"</span>)</span><br></pre></td></tr></table></figure><ul><li>使用<code>element.triggerHandler(&quot;事件&quot;)</code>会自动触发该事件，如<code>$(&quot;button&quot;).triggerHandler(&quot;click&quot;)</code></li><li><code>.triggerHandler()</code> 方法并不会触发事件的默认行为</li><li><code>.trigger()</code> 会影响所有与 jQuery 对象相匹配的元素，而 <code>.triggerHandler()</code> 仅影响第一个匹配到的元素。</li><li>使用 <code>.triggerHandler()</code> 创建的事件，并不会在 DOM 树中向上冒泡。如果事件没有被目标元素直接处理，那么它就不会进行任何处理。</li></ul><h2 id="jQuery事件对象">jQuery事件对象</h2><p>事件被触发，就会有事件对象的产生</p><h3 id="常用的事件对象方法">常用的事件对象方法</h3><table><thead><tr><th>常用事件对象方法</th><th>说明</th></tr></thead><tbody><tr><td><code>event.preventDefault()</code></td><td>阻止默认行为，也可以在事件函数中使用<code>return false</code>阻止事件的默认行为</td></tr><tr><td><code>event.stopPropagation()</code></td><td>阻止冒泡</td></tr></tbody></table><h1>jQuery其他方法</h1><h2 id="jQuery对象拷贝">jQuery对象拷贝</h2><p>如果想要把某个对象拷贝(合并)给另外一个对象使用，此时可以使用<code>$.extend()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.extend([deep], target, object1, [objectN])</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>deep</code></td><td>如果设为<code>true</code>为深拷贝，默认为<code>false</code>浅拷贝</td></tr><tr><td><code>target</code></td><td>要拷贝的目标对象</td></tr><tr><td><code>object1</code></td><td>第一个被合并的对象</td></tr><tr><td><code>objectN</code></td><td>第N个被合并的对象</td></tr></tbody></table><ul><li><strong>浅拷贝</strong>是把被拷贝的对象<strong>复杂数据类型中的地址</strong>拷贝给目标对象，修改目标对象会影响被拷贝对象。</li><li><strong>深拷贝</strong>，完全克隆(<strong>拷贝的是对象</strong>，而不是地址)，修改目标对象不会影响被拷贝对象，如果里面有不冲突的属性，会合并到一起。</li></ul><h2 id="jQuery多库共存">jQuery多库共存</h2><h3 id="问题概述">问题概述</h3><p>jQuery使用$作为标识符，随着jQuery的流行，其他js库也会用$作为标识符，这样一起使用会引起冲突，例如自己封装一个$函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个$函数可以实现使用选择器获取指定元素的第一个，使用时会与jQuery冲突</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(ele);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客观需求">客观需求</h3><p>需要一个解决方案，让jQuery和其他的JS库不存在冲突，可以同时存在，这就叫做<strong>多库共存</strong></p><h3 id="jQuery解决方案">jQuery解决方案</h3><h4 id="第一种解决方案">第一种解决方案</h4><p>把jQuery代码中的<code>$</code>符号统一改为<code>jQuery</code>，比如<code>jQuery(&quot;div&quot;)</code></p><h4 id="第二种解决方案">第二种解决方案</h4><p>jQuery允许用户使用<code>$.noConflict()</code>或<code>jQuery.noConflict()</code>给jQuery变量自定义新的名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 放弃jQuery控制$变量，自定义jQuery变量</span></span><br><span class="line"><span class="keyword">var</span> myJQuery = $.noConflict();</span><br><span class="line"><span class="comment">// 使用自定义的jQuery变量调用jQuery方法</span></span><br><span class="line">myJQuery(<span class="string">"button"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"淡黄的长裙"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="jQuery插件">jQuery插件</h2><ul><li>jQuery功能比较有限，想要更复杂的特效效果，可以借助于jQuery插完成</li><li>注意：这些插件也是依赖于jQuery来完成的，所以必须<strong>先引入jQuery文件</strong>，因此也称为jQuery插件</li></ul><h3 id="jQuery插件常用的网站">jQuery插件常用的网站</h3><ul><li><a href="http://www.jq22.com" target="_blank" rel="noopener">jQuery插件库</a></li><li><a href="http://www.htmleaf.com/" target="_blank" rel="noopener">jQuery之家</a>(推荐)</li></ul><h3 id="jQuery插件使用步骤">jQuery插件使用步骤</h3><ol><li>引入相关文件(jQuery文件和插件文件)</li><li>复制相关html、css、js(调用插件)</li><li>修改相关结构和参数</li></ol><h3 id="图片懒加载技术">图片懒加载技术</h3><h4 id="原理">原理</h4><ul><li>当页面滑动到可视区域时，再显示图片</li><li>图片使用延迟加载可以提高网页加载速度，它也能帮助减轻服务器负载</li></ul><h4 id="图片懒加载插件EasyLazyLoad-js">图片懒加载插件EasyLazyLoad.js</h4><blockquote><p>详见 <a href="http://www.jq22.com/jquery-info11629" target="_blank" rel="noopener">EasyLazyload.js 超好用js图片延迟加载</a></p></blockquote><ol><li>引入 EasyLazyload.js</li><li>将图片 src 替换为 data-lazy-src，即<code>&lt;img data-lazy-src=&quot;...&quot; /&gt;</code></li><li>调用相关JS代码</li><li>【注意：此时的JS引入文件必须写到DOM元素(图片)的最后面】</li></ol><h3 id="全屏滚动插件fullpage-js">全屏滚动插件fullpage.js</h3><blockquote><p>GitHub地址： <a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="noopener">fullPage.js</a></p><p>中文翻译网站：<a href="http://www.dowebok.com/demo/2014/77/" target="_blank" rel="noopener">jQuery全屏滚动插件fullPage.js演示</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1a4411w7Gx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery网页开发案例精讲&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jQuery" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://www.hardape.top/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>02-jQuery常用API</title>
    <link href="https://www.hardape.top/article/c69b7a16.html"/>
    <id>https://www.hardape.top/article/c69b7a16.html</id>
    <published>2020-04-23T05:01:25.000Z</published>
    <updated>2020-06-11T09:21:48.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1a4411w7Gx" target="_blank" rel="noopener">jQuery网页开发案例精讲</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><blockquote><p>详见<a href="https://www.jquery123.com/" target="_blank" rel="noopener">jQuery API 中文文档</a></p></blockquote><h2 id="jQuery选择器">jQuery选择器</h2><p>原生JS获取元素方式多且杂，而且兼容性情况不一致，因此jQuery对这些方式进行封装，使获取元素统一标准</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"选择器"</span>)<span class="comment">//里面选择器直接写CSS选择器即可，但是要加引号(单引号双引号都可以)</span></span><br></pre></td></tr></table></figure><h3 id="jQuery基础选择器">jQuery基础选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td><code>$(&quot;#id&quot;)</code></td><td>获取指定ID的元素</td></tr><tr><td>全选选择器</td><td><code>$(&quot;*&quot;)</code></td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td><code>$(&quot;.class&quot;)</code></td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td><code>$(&quot;div&quot;)</code></td><td>获取统一类名标签的所有元素</td></tr><tr><td>并集选择器</td><td><code>$(&quot;div,p,li&quot;)</code></td><td>获取多个元素</td></tr><tr><td>交集选择器</td><td><code>$(&quot;li.current&quot;)</code></td><td>交集元素</td></tr></tbody></table><h3 id="jQuery层级选择器">jQuery层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td><code>$(&quot;ul&gt;li&quot;)</code></td><td>使用<code>&gt;</code>号，获取亲儿子层级的元素，不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td><code>$(&quot;ul li&quot;)</code></td><td>使用空格，代表后代选择器，包括所有孙子层级的元素</td></tr></tbody></table><h3 id="jQuery筛选选择器">jQuery筛选选择器</h3><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td><code>:first</code></td><td><code>$(&quot;li:first&quot;)</code></td><td>获取第一个li元素</td></tr><tr><td><code>:last</code></td><td><code>$(&quot;li:last&quot;)</code></td><td>获取最后一个li元素</td></tr><tr><td><code>:eq(index)</code></td><td><code>$(&quot;li:eq(2)&quot;)</code></td><td>从获取到的li元素中选择索引号为2的li元素，索引号从0开始</td></tr><tr><td><code>:odd</code></td><td><code>$(&quot;li:odd&quot;)</code></td><td>从获取到的li元素中选择<strong>索引号为奇数</strong>的li元素</td></tr><tr><td><code>:even</code></td><td><code>$(&quot;li:even&quot;)</code></td><td>从获取到的li元素中选择<strong>索引号为偶数</strong>的li元素</td></tr><tr><td><code>:checked</code></td><td><code>$(&quot;input:checked&quot;)</code></td><td>选取所有被选中的元素（复选框或单选按钮）</td></tr></tbody></table><h2 id="jQuery筛选方法">jQuery筛选方法</h2><table><thead><tr><th>语法</th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td><code>parent([selector])</code></td><td><code>$(&quot;li&quot;).parent()</code></td><td>查找父级，最近一级的指定选择器的父级元素</td></tr><tr><td><code>parents([selector])</code></td><td><code>$(&quot;li&quot;).parents()</code></td><td>查找指定选择器的祖先级元素</td></tr><tr><td><code>children([selector])</code></td><td><code>$(&quot;ul&quot;).children(&quot;li&quot;)</code></td><td>相当于<code>$(&quot;ul&gt;li&quot;)</code>，查找子代中指定选择器的元素，选择器省略时选择所有子代元素，最近一级(亲儿子)</td></tr><tr><td><code>find([selector])</code></td><td><code>$(&quot;ul&quot;).find(&quot;li&quot;)</code></td><td>相当于<code>$(&quot;ul li&quot;)</code>，查找后代中指定选择器的元素</td></tr><tr><td><code>siblings([selector])</code></td><td><code>$(&quot;.first&quot;).siblings(&quot;li&quot;)</code></td><td>查找兄弟节点中指定选择器的元素，选择器省略时选择所有兄弟元素，不包括自己本身</td></tr><tr><td><code>nextAll([expr])</code></td><td><code>$(&quot;first&quot;).nextAll()</code></td><td>查找当前元素之后所有的同辈元素</td></tr><tr><td><code>prevAll([expr])</code></td><td><code>$(&quot;first&quot;).prevAll()</code></td><td>查找当前元素之前所有的同辈元素</td></tr><tr><td><code>hasClass(class)</code></td><td><code>$('div').hasClass(&quot;protected&quot;)</code></td><td>检查当前的元素是否含有某个特定的类名，如果有，则返回true，否则返回false</td></tr><tr><td><code>eq(index)</code></td><td><code>$('li').eq(2)</code></td><td>相当于<code>$(&quot;li:eq(2)&quot;)</code>，index从0开始，推荐使用该方法</td></tr></tbody></table><h2 id="jQuery样式操作">jQuery样式操作</h2><h3 id="操作css方法">操作css方法</h3><p>jQuery可以使用css方法来修改简单元素样式</p><h4 id="获取样式属性值">获取样式属性值</h4><p>参数只写属性名，则是返回属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).css(<span class="string">'color'</span>);</span><br></pre></td></tr></table></figure><h4 id="设置单组样式属性值">设置单组样式属性值</h4><p>参数是属性名和属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"color"</span>, <span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><h4 id="设置多组样式属性值">设置多组样式属性值</h4><p>参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开，属性名可以不用加引号，但不加引号的属性名遵循<strong>驼峰命名法</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="number">20</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="设置类样式">设置类样式</h3><p>作用等同于原生JS中的classList，可以操作类样式，<strong>注意操作类里面的参数不加点号</strong></p><h4 id="添加类addClass">添加类addClass</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).addClass(<span class="string">'current'</span>);</span><br></pre></td></tr></table></figure><h4 id="移除类removeClass">移除类removeClass</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).removeClass(<span class="string">'current'</span>);</span><br></pre></td></tr></table></figure><h4 id="切换类toggleClass">切换类toggleClass</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).toggleClass(<span class="string">'current'</span>);</span><br></pre></td></tr></table></figure><h2 id="jQuery隐式迭代">jQuery隐式迭代</h2><ul><li>jQuery遍历内部元素(伪数组形式存储)的过程就称为<strong>隐式迭代</strong></li><li>简单理解：给匹配到的所有元素进行循环遍历，执行相应的方法，而不需要开发者再进行循环，简化操作。</li></ul><h2 id="jQuery链式编程">jQuery链式编程</h2><ul><li>链式编程：是将多个操作（多行代码）通过点号&quot;.&quot;链接在一起成为一句代码。</li><li>链式编程是为了节省代码量，看起来更优雅。</li><li>使用链式编程一定要注意是哪个对象执行样式。</li></ul><h2 id="jQuery排他思想">jQuery排他思想</h2><ul><li>排他思想：同一组元素，想要某一种元素实现某种样式</li><li>在jQuery中可利用jQuery隐式迭代的特性快速实现排他思想</li><li>实现：当前元素设置样式，其余的兄弟( 利用<code>siblings([selector])</code>   )清除样式</li></ul><h2 id="jQuery效果">jQuery效果</h2><p>jQuery封装了很多动画效果，如<strong>显示隐藏</strong>、<strong>滑动</strong>、<strong>淡入淡出</strong>、<strong>自定义动画</strong>等等</p><h3 id="显示隐藏效果">显示隐藏效果</h3><h4 id="显示语法规范">显示语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show([speed,[easing,[fn]]])</span><br></pre></td></tr></table></figure><h4 id="隐藏语法规范">隐藏语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hide([speed,[easing,[fn]]])</span><br></pre></td></tr></table></figure><h4 id="切换语法规范">切换语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toggle([speed,[easing,[fn]]])</span><br></pre></td></tr></table></figure><h4 id="显示-隐藏参数">显示/隐藏参数</h4><p>参数都可以省略，不写任何参数即无动画直接显示</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>speed</code></td><td>规定显示隐藏效果的速度。值可以是特定字符串(&quot;<code>slow</code>&quot;,&quot;<code>normal</code>&quot;,<code>fast</code>)或表示动画时长的毫秒数值(如：1000)</td></tr><tr><td><code>easing</code></td><td>规定在动画的不同点上元素的速度。默认值为 “<code>swing</code>”。可取值：&quot;<code>swing</code>&quot; - 在开头/结尾移动慢，在中间移动快；&quot;<code>linear</code>&quot; - 匀速运动</td></tr><tr><td><code>fn</code></td><td>回调函数，在动画完成时执行的函数</td></tr></tbody></table><h3 id="滑动效果">滑动效果</h3><h4 id="上滑语法规范">上滑语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slideUp([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h4 id="下滑语法规范">下滑语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slideDown([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h4 id="切换语法规范-v2">切换语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slideToggle([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h4 id="上滑下滑参数">上滑下滑参数</h4><p>参数都可以省略</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>speed</code></td><td>规定上滑下滑效果的速度。值可以是特定字符串(&quot;<code>slow</code>&quot;,&quot;<code>normal</code>&quot;,<code>fast</code>)或表示动画时长的毫秒数值(如：1000)，默认为&quot;<code>normal</code>&quot;。</td></tr><tr><td><code>easing</code></td><td>规定在动画的不同点上元素的速度。默认值为 “<code>swing</code>”。可取值：&quot;<code>swing</code>&quot; - 在开头/结尾移动慢，在中间移动快；&quot;<code>linear</code>&quot; - 匀速运动</td></tr><tr><td><code>fn</code></td><td>回调函数，在动画完成时执行的函数</td></tr></tbody></table><h3 id="事件切换">事件切换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hover([over,]out)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>over</code></td><td>鼠标移动到元素上要触发的函数(相当于<code>mouseenter</code>)</td></tr><tr><td><code>out</code></td><td>鼠标移出元素要触发的函数(相当于<code>mouseleave</code>)</td></tr></tbody></table><ul><li>当只有一个函数作为参数时，当鼠标移到元素上或移出元素时都会触发执行该函数</li><li><code>hover</code>配合<code>toggle</code>、<code>slideToggle</code>等动画切换函数可以以简洁的代码实现动画效果</li></ul><h3 id="动画队列及其停止排队方法">动画队列及其停止排队方法</h3><h4 id="动画或效果队列">动画或效果队列</h4><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行</p><h4 id="停止排队">停止排队</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop()</span><br></pre></td></tr></table></figure><ul><li><code>stop</code>方法用于停止动画或效果</li><li>注意：<code>stop</code>写到动画或者效果的<strong>前面</strong>，<strong>相当于停止结束上一次的动画</strong>。</li></ul><h3 id="淡入淡出效果">淡入淡出效果</h3><h4 id="淡入语法规范">淡入语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeIn([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h4 id="淡出语法规范">淡出语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeOut([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h4 id="切换语法规范-v3">切换语法规范</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeToggle([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><h4 id="渐进方式调整到指定的不透明度">渐进方式调整到指定的不透明度</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeTo(speed,opacity,[[easing],[fn]])</span><br></pre></td></tr></table></figure><h4 id="淡入淡出参数">淡入淡出参数</h4><p>除<code>fadeTo</code>中的<code>speed</code>和<code>opacity</code>参数必须写，其他参数都可以省略</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>speed</code></td><td>规定淡入淡出效果的速度。值可以是特定字符串(&quot;<code>slow</code>&quot;,&quot;<code>normal</code>&quot;,<code>fast</code>)或表示动画时长的毫秒数值(如：1000)，默认为&quot;<code>normal</code>&quot;。</td></tr><tr><td><code>easing</code></td><td>规定在动画的不同点上元素的速度。默认值为 “<code>swing</code>”。可取值：&quot;<code>swing</code>&quot; - 在开头/结尾移动慢，在中间移动快；&quot;<code>linear</code>&quot; - 匀速运动</td></tr><tr><td><code>fn</code></td><td>回调函数，在动画完成时执行的函数</td></tr><tr><td><code>opacity</code></td><td>透明度必须写，取值0~1之间</td></tr></tbody></table><h3 id="自定义动画">自定义动画</h3><h4 id="语法">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animate(params,[speed],[easing],[fn])</span><br></pre></td></tr></table></figure><h4 id="参数">参数</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>params</code></td><td>想要更改的样式属性，以<strong>对象形式</strong>传递，必须写。属性名可以不用带引号，如果是复合属性需要采取<strong>驼峰命名法</strong>(如borderLeft)，其余参数可以省略。</td></tr><tr><td><code>speed</code></td><td>规定淡入淡出效果的速度。值可以是特定字符串(&quot;<code>slow</code>&quot;,&quot;<code>normal</code>&quot;,<code>fast</code>)或表示动画时长的毫秒数值(如：1000)，默认为&quot;<code>normal</code>&quot;。</td></tr><tr><td><code>easing</code></td><td>规定在动画的不同点上元素的速度。默认值为 “<code>swing</code>”。可取值：&quot;<code>swing</code>&quot; - 在开头/结尾移动慢，在中间移动快；&quot;<code>linear</code>&quot; - 匀速运动</td></tr><tr><td><code>fn</code></td><td>回调函数，在动画完成时执行的函数</td></tr></tbody></table><h2 id="jQuery属性操作">jQuery属性操作</h2><h3 id="获取和设置元素固有属性prop">获取和设置元素固有属性prop()</h3><p>固有属性是指元素本身自带的属性，比如<code>&lt;a&gt;</code>元素里面的<code>href</code>，<code>&lt;input&gt;</code>元素里面的<code>type</code></p><h4 id="获取属性">获取属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).prop(<span class="string">"属性"</span>)</span><br></pre></td></tr></table></figure><h4 id="设置属性">设置属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).prop(<span class="string">"属性"</span>, <span class="string">"属性值"</span>)</span><br></pre></td></tr></table></figure><h3 id="获取和设置元素自定义属性attr">获取和设置元素自定义属性attr()</h3><h4 id="获取属性-v2">获取属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).attr(<span class="string">"属性"</span>)<span class="comment">// 类似原生JS中的getAttribute()</span></span><br></pre></td></tr></table></figure><h4 id="设置属性-v2">设置属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).attr(<span class="string">"属性"</span>,<span class="string">"属性值"</span>)<span class="comment">//类似原生JS中的setAttribute()</span></span><br></pre></td></tr></table></figure><ul><li>该方法也可以获取和设置以<code>data-</code>开头的H5自定义属性</li></ul><h3 id="数据缓存data">数据缓存data()</h3><h4 id="获取数据">获取数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).data(<span class="string">"name"</span>)<span class="comment">//向被选元素获取数据</span></span><br></pre></td></tr></table></figure><h4 id="附加数据">附加数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).data(<span class="string">"name"</span>, <span class="string">"value"</span>) <span class="comment">//向被选元素附加数据</span></span><br></pre></td></tr></table></figure><ul><li><code>data()</code>方法可以在指定元素上存取数据，但是并不会修改DOM元素结构。一旦页面刷新，之前存放的数据都将被移除。</li><li>同时，<code>data()</code>方法还可以读取以<code>data-</code>开头的H5自定义属性，其中参数<code>name</code>不需要加前缀<code>data-</code>，而且得到的值是数字型。</li><li>如<code>&lt;div data-index=&quot;1&quot;&gt;Hello&lt;/div&gt;</code>读取为<code>$(&quot;div&quot;).data(&quot;index&quot;)</code></li></ul><h2 id="jQuery内容文本值">jQuery内容文本值</h2><p>注意针对元素的<strong>内容</strong>还有<strong>表单的值</strong>的操作</p><h3 id="普通元素内容html">普通元素内容html()</h3><p>相当于原生JS中的<code>innerHTML</code>，包含HTML标签</p><h4 id="获取元素内容">获取元素内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).html()</span><br></pre></td></tr></table></figure><h4 id="设置元素内容">设置元素内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).html(<span class="string">"内容"</span>)</span><br></pre></td></tr></table></figure><h3 id="普通元素文本text">普通元素文本text()</h3><p>相当于原生JS中的<code>innerText</code>，不包含HTML标签</p><h4 id="获取元素文本">获取元素文本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).text()</span><br></pre></td></tr></table></figure><h4 id="设置元素文本">设置元素文本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).text(<span class="string">"文本"</span>)</span><br></pre></td></tr></table></figure><h3 id="表单元素内容val">表单元素内容val()</h3><p>相当于原生JS中的<code>value</code></p><h4 id="获取表单内容">获取表单内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).val()</span><br></pre></td></tr></table></figure><h4 id="设置表单内容">设置表单内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).val(<span class="string">"内容"</span>)</span><br></pre></td></tr></table></figure><h2 id="jQuery元素操作">jQuery元素操作</h2><p>jQuery元素操作主要包括<strong>遍历</strong>、<strong>创建</strong>、<strong>添加</strong>、<strong>删除</strong>元素操作</p><h3 id="遍历元素">遍历元素</h3><p>jQuery隐式迭代是对同一类元素做了同样的操作，如果想要给同一类元素做不同的操作，就需要用到遍历。</p><h4 id="each方法">each方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, domEle</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>each()</code>方法遍历匹配的每一个元素，主要用DOM处理。</li><li>里面的回调函数有2个参数：<code>index</code>是每个元素的索引号；<code>domEle</code>是每个<strong>DOM元素对象</strong>，不是jQuery对象，参数名称可以自定义。</li><li>如果想要在回调函数中使用jQuery方法，需将DOM元素转为jQuery对象，即<code>$(domEle)</code></li></ul><h4 id="each方法-v2">$.each方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.each(object, <span class="function"><span class="keyword">function</span>(<span class="params">index, element</span>) </span>&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>$.each()</code>方法可以用于遍历任何对象。主要用于数据处理，比如数组，对象</li><li>里面的函数有2个参数：<code>index</code>是每个元素的索引号或是对象的属性名；<code>element</code>是遍历内容或对象的属性值。</li></ul><h3 id="创建元素">创建元素</h3><h4 id="语法-v2">语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"html代码"</span>)</span><br></pre></td></tr></table></figure><h4 id="例子">例子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = $(<span class="string">"&lt;li&gt;我是被动态创建的&lt;/li&gt;"</span>) <span class="comment">//动态创建li标签</span></span><br></pre></td></tr></table></figure><h3 id="添加元素">添加元素</h3><h4 id="内部添加">内部添加</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部后置添加</span></span><br><span class="line">$(selector).append(content | <span class="function"><span class="keyword">function</span>(<span class="params">index,html</span>))</span></span><br><span class="line"><span class="function">// 内部前置添加</span></span><br><span class="line"><span class="function"><span class="title">$</span>(<span class="params">selector</span>).<span class="title">preend</span>(<span class="params">content | function(index,html</span>))</span></span><br></pre></td></tr></table></figure><ul><li>参数可以是内容<code>content</code>，也可以是函数<code>function</code></li><li><code>append</code>把内容放入匹配元素内部<strong>最后面</strong>，类似原生JS中的<code>appendChild</code></li><li><code>preend</code>把内容放入匹配元素内部<strong>最前面</strong></li></ul><h4 id="外部添加">外部添加</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部后置添加</span></span><br><span class="line">$(selector).after(content | <span class="function"><span class="keyword">function</span>(<span class="params">index,html</span>))</span></span><br><span class="line"><span class="function">// 外部前置添加</span></span><br><span class="line"><span class="function"><span class="title">$</span>(<span class="params">selector</span>).<span class="title">before</span>(<span class="params">content | function(index,html</span>))</span></span><br></pre></td></tr></table></figure><ul><li>参数可以是内容<code>content</code>，也可以是函数<code>function</code></li></ul><h4 id="参数说明">参数说明</h4><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>content</code></td><td>要添加的内容，可以是<strong>HTML元素</strong>、<strong>DOM对象</strong>、<strong>jQuery对象</strong></td></tr><tr><td><code>function(index,html)</code></td><td>函数必须返回一个HTML字符串，用于追加到每一个匹配元素的里边。接受两个参数，<code>index</code>参数为对象在这个集合中的索引值，<code>html</code>参数为这个对象原先的html值。</td></tr></tbody></table><h3 id="删除元素">删除元素</h3><h4 id="删除匹配的元素">删除匹配的元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector1).remove([selector2])</span><br></pre></td></tr></table></figure><ul><li>删除符合<code>selector1</code>的元素中符合<code>selector2</code>的元素</li><li><code>selector2</code>省略时即删除符合<code>selector1</code>的元素</li></ul><h4 id="删除匹配的元素集合中所有的子节点">删除匹配的元素集合中所有的子节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).empty()</span><br></pre></td></tr></table></figure><ul><li><code>html(&quot;&quot;)</code>和<code>empty()</code>的作用相同</li></ul><h2 id="jQuery尺寸和位置操作">jQuery尺寸和位置操作</h2><h3 id="jQuery尺寸">jQuery尺寸</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>width()/height()</code></td><td>取得匹配元素宽度和高度值，只算<code>width/heigth</code></td></tr><tr><td><code>innerWidth()/innerHeight()</code></td><td>取得匹配元素宽度和高度值，包含<code>padding</code></td></tr><tr><td><code>outerWidth()/outerHeight()</code></td><td>取得匹配元素宽度和高度值，包含<code>padding</code>、<code>border</code></td></tr><tr><td><code>outWidth(true)/outerHeight(true)</code></td><td>取得匹配元素宽度和高度值，包含<code>padding</code>、<code>border</code>、<code>margin</code></td></tr></tbody></table><ul><li>以上参数为空，则是获取相应值，返回的是数字型</li><li>如果参数为数字，则是修改相应值</li><li>参数可以不必写单位</li></ul><h3 id="jQuery位置">jQuery位置</h3><p>位置主要有三个：<strong>offset()</strong>、<strong>position()</strong>、<strong>scrollTop()/scrollLeft()</strong></p><h4 id="offset-获取或设置元素偏移">offset()获取或设置元素偏移</h4><ul><li><code>offset</code>方法设置或返回被选元素相对于<strong>文档</strong>的偏移坐标，和父级没有关系</li><li>该方法有2个属性<code>left</code>、<code>top</code>。<code>offset().top</code>用于获取距离文档顶部的距离；<code>offset().left</code>用于获取距离文档左侧的距离。</li><li>可以以对象作为参数设置元素的偏移，如<code>offset({top: 10, left: 30});</code></li></ul><h4 id="position-获取元素偏移">position()获取元素偏移</h4><ul><li><code>position</code>方法用于返回被选元素相对于<strong>带有定位的父级元素</strong>的偏移坐标，如果父级都没定位，则以文档为准。</li><li>该方法有2个属性<code>left</code>、<code>top</code>。<code>offset().top</code>用于获取距离有定位的父级元素顶部的距离；<code>offset().left</code>用于获取距离有定位的父级元素左侧的距离。</li><li>该方法只能获取元素偏移，不能设置元素偏移。</li></ul><h4 id="scrollTop-scrollLeft-获取或设置元素被卷去的头部-左侧">scrollTop()/scrollLeft()获取或设置元素被卷去的头部/左侧</h4><ul><li><code>scrollTop()</code>方法设置元素被卷去的头部</li><li><code>scrollLeft()</code>方法设置元素被卷去的左侧</li><li>如果参数为数字，则是设置元素被卷去的头部/左侧</li></ul><h4 id="带有动画效果的返回顶部">带有动画效果的返回顶部</h4><ul><li>核心原理：使用<code>animate</code>动画返回顶部</li><li><code>animate</code>动画函数里面有个<code>scrollTop</code>属性，可以设置位置</li><li>动画的对象应该为元素，即<code>body</code>和<code>html</code>，不能使用<code>document</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"body,html"</span>).stop().animate(&#123;</span><br><span class="line">    scrollTop: <span class="number">0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1a4411w7Gx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery网页开发案例精讲&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jQuery" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://www.hardape.top/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>01-jQuery入门</title>
    <link href="https://www.hardape.top/article/36bfa31c.html"/>
    <id>https://www.hardape.top/article/36bfa31c.html</id>
    <published>2020-04-23T04:58:56.000Z</published>
    <updated>2020-06-19T14:03:21.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1a4411w7Gx" target="_blank" rel="noopener">jQuery网页开发案例精讲</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="jQuery概述">jQuery概述</h2><h3 id="JavaScript库">JavaScript库</h3><h4 id="概念">概念</h4><ul><li>JavaScript库，即library，是一个<strong>封装好的特定的集合</strong>(方法和函数)。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画<code>animate</code>、<code>hide</code>、<code>show</code>，比如获取元素等。</li><li>简单理解，JavaScript就是一个JS文件，里面对原生的JS的代码进行了封装。这样就可以快速高效地使用这些封装好的功能了。</li><li>比如jQuery，就是为了快速方便地操作DOM，里面基本都是函数(方法)。</li></ul><h4 id="常见的JavaScript">常见的JavaScript</h4><ul><li>jQuery</li><li>Prototype</li><li>YUI</li><li>Dojo</li><li>Ext JS</li><li>移动端的zepto</li></ul><h3 id="jQuery的概念">jQuery的概念</h3><ul><li><strong>jQuery</strong>是一个快速、简洁的JavaScript库，其设计的宗旨是&quot; write Less, Do More &quot;，即提倡写更少的代码，做更多的事情。</li><li>jQuery中的 j 表示JavaScript，Query表示查询，旨在快速查询DOM元素</li><li>jQuery封装了JavaScript常用的功能代码，优化了DOM操作、事件处理、动画设计和Ajax交互</li></ul><h3 id="jQuery的优点">jQuery的优点</h3><ul><li>轻量级。核心文件才几十kb，不会影响页面加载速度</li><li>跨浏览器兼容。基本兼容了现在主流的浏览器</li><li>链式编程、隐式迭代</li><li>对事件、样式、动画支持，大大简化了DOM操作</li><li>支持插件扩展开发。有着丰富的第三方的插件，例如：树形菜单、日期控件、轮播图等</li><li>免费、开源</li></ul><h3 id="jQuery的下载">jQuery的下载</h3><p>官方网址：<a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a></p><h4 id="版本">版本</h4><ul><li>1x：兼容IE6/7/8等低版本浏览器，官网不再更新</li><li>2x：不兼容IE6/7/8等低版本浏览器，官网不再更新</li><li>3x：不兼容IE6/7/8等低版本浏览器，是官方主要更新维护的版本</li></ul><h3 id="jQuery的入口函数">jQuery的入口函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   ... <span class="comment">// 此处的页面DOM加载完成的入口 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   ... <span class="comment">// 此处的页面DOM加载完成的入口 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>等着DOM结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery完成了封装。</li><li>相当于原生JS中的DOMContentLoaded。</li><li>不同于原生JS中的load事件是等页面文档、外部的JS文件、css文件、图片加载完毕才执行内部代码。</li><li>更推荐使用第一种方式，简洁。</li></ul><h3 id="jQuery-的顶级对象">jQuery 的顶级对象$</h3><ul><li>$是jQuery的别称，在代码中可以使用jQuery代替$，但一般为了方便，通常都直接使用$。</li><li>$是jQuery的顶级对象，相当于原生JavaScript中的window。把元素利用$包装成<strong>jQuery对象</strong>，就可以调用jQuery的方法。</li></ul><h2 id="jQuery对象和DOM对象">jQuery对象和DOM对象</h2><h3 id="区别">区别</h3><ul><li>用原生JS获取来的对象是DOM对象，用jQuery方法获取的元素是jQuery对象</li><li>jQuery对象的本质是：<strong>利用$对DOM对象包装后产生的对象(伪数组形式存储)</strong></li><li>注意：<strong>jQuery对象只能使用jQuery方法，DOM对象只能使用原生的JavaScript的属性和方法</strong></li></ul><h3 id="转换">转换</h3><ul><li>DOM对象和jQuery对象之间是可以相互转换的。</li><li>因为原生JS比JQuery大，原生的一些属性和方法jQuery没有进行封装。要想使用这些属性和方法需要把jQuery对象装换为DOM对象才能使用</li></ul><h4 id="DOM对象装换为jQuery对象">DOM对象装换为jQuery对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(DOM对象)</span><br></pre></td></tr></table></figure><h4 id="jQuery对象装换为DOM对象">jQuery对象装换为DOM对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line">jQuery对象[index]<span class="comment">//index是索引号</span></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line">jQuery对象.get(index)<span class="comment">//index是索引号</span></span><br></pre></td></tr></table></figure><h1></h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1a4411w7Gx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery网页开发案例精讲&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="jQuery" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://www.hardape.top/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>16-JS的本地存储</title>
    <link href="https://www.hardape.top/article/ff788ea5.html"/>
    <id>https://www.hardape.top/article/ff788ea5.html</id>
    <published>2020-04-20T08:25:24.000Z</published>
    <updated>2020-06-11T09:21:48.412Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1k4411w7sV" target="_blank" rel="noopener">JavaScript核心 DOM BOM操作</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="本地存储概述">本地存储概述</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案</p><h2 id="本地存储特性">本地存储特性</h2><ul><li>数据存储在用户浏览器中</li><li>设置、读取方便、设置页面刷新不丢失数据</li><li>容量较大，<code>sessionStorage</code>约5M，<code>localStorage</code>约20M</li><li>只能存储字符串，可以将对象<code>JSON.stringify()</code>编码后存储</li></ul><h2 id="window-sessionStorage">window.sessionStorage</h2><h3 id="特性">特性</h3><ul><li>生命周期为<strong>关闭浏览器窗口</strong></li><li>在**同一个窗口(页面)**下数据可以共享</li><li>以<strong>键值对</strong>的形式存储使用</li></ul><h3 id="使用">使用</h3><h4 id="存储-设置数据">存储/设置数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.setItem(key,value);</span><br></pre></td></tr></table></figure><h4 id="获取数据">获取数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.getItem(key);</span><br></pre></td></tr></table></figure><h4 id="删除数据">删除数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.removeItem(key);</span><br></pre></td></tr></table></figure><h4 id="清空所有数据">清空所有数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.clear();</span><br></pre></td></tr></table></figure><h2 id="window-localStorage">window.localStorage</h2><h3 id="特性-v2">特性</h3><ul><li>生命周期永久生效，除非手动删除，否则<strong>关闭页面也会存在</strong></li><li>可以多窗口(页面)共享(<strong>同一浏览器可以共享)</strong></li><li>以<strong>键值对</strong>的形式存储使用</li></ul><h3 id="使用-v2">使用</h3><h4 id="存储-设置数据-v2">存储/设置数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(key,value);</span><br></pre></td></tr></table></figure><h4 id="获取数据-v2">获取数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.getItem(key);</span><br></pre></td></tr></table></figure><h4 id="删除数据-v2">删除数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(key);</span><br></pre></td></tr></table></figure><h4 id="清空所有数据-v2">清空所有数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStoragesessionStorage.clear();</span><br></pre></td></tr></table></figure><h2 id="案例-记住用户名">案例-记住用户名</h2><h3 id="代码">代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例-记住用户名<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"uname"</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"remember-uname"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"remember-uname"</span>&gt;</span>记住用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> uname = <span class="built_in">document</span>.querySelector(<span class="string">'#uname'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> rememberUname = <span class="built_in">document</span>.querySelector(<span class="string">'#remember-uname'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 如果用户已经记住了用户名,从loaclStorage中取得用户名</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (localStorage.getItem(<span class="string">'uname'</span>)) &#123;</span></span><br><span class="line"><span class="actionscript">            uname.value = localStorage.getItem(<span class="string">'uname'</span>);</span></span><br><span class="line"><span class="actionscript">            rememberUname.checked = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 监听记住用户名选择框change事件</span></span></span><br><span class="line"><span class="actionscript">        rememberUname.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            if (rememberUname.checked) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 存储用户名</span></span></span><br><span class="line"><span class="actionscript">                localStorage.setItem(<span class="string">'uname'</span>, uname.value);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除存储的用户名</span></span></span><br><span class="line"><span class="actionscript">                localStorage.removeItem(<span class="string">'uname'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果">效果</h3><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/localStorage-remember-uname.gif" alt="localStorage-remember-uname" style="zoom:80%;" />]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1k4411w7sV&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript核心 DOM BOM操作&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>15-移动端网页特效</title>
    <link href="https://www.hardape.top/article/c2cb33d0.html"/>
    <id>https://www.hardape.top/article/c2cb33d0.html</id>
    <published>2020-04-20T08:23:53.000Z</published>
    <updated>2020-06-11T09:21:48.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1k4411w7sV" target="_blank" rel="noopener">JavaScript核心 DOM BOM操作</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="触屏事件">触屏事件</h2><ul><li>移动端浏览器兼容性较好，不需要考虑JS的兼容性问题，可以放心地使用原生JS书写效果，但是移动端也有自动独特的地方。比如<strong>触屏事件touch</strong>(也称为触摸事件)，Andorid和IOS都有。</li><li>touch对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指(或触控笔)对屏幕或者触控板操作。</li></ul><h3 id="常见的触屏事件">常见的触屏事件</h3><table><thead><tr><th>常见的触屏事件</th><th>说明</th></tr></thead><tbody><tr><td><code>touchstart</code></td><td>手指触摸到一个DOM元素时触发</td></tr><tr><td><code>touchmove</code></td><td>手指在一个DOM元素上移动时触发</td></tr><tr><td><code>touchend</code></td><td>手指从一个DOM元素上移开时触发</td></tr></tbody></table><h2 id="触摸事件对象-TouchEvent">触摸事件对象(TouchEvent)</h2><ul><li>TouchEvent是一类描述手指在触摸平面(触摸屏、触摸板等)的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少等等。</li><li><code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>三个事件都有各自的事件对象。</li></ul><h3 id="常用触摸事件对象列表">常用触摸事件对象列表</h3><table><thead><tr><th>常用触摸事件对象列表(伪数组)</th><th>说明</th></tr></thead><tbody><tr><td><code>e.touches</code></td><td>正在触摸屏幕的所有手指的一个列表</td></tr><tr><td><strong><code>e.targetTouches</code></strong></td><td>正在触摸当前DOM元素上的手指的一个列表</td></tr><tr><td><code>e.changedTouches</code></td><td>手指状态发生了改变的列表，从无到有，从有到无变化</td></tr></tbody></table><ul><li>由于在开发时都是给元素注册触摸事件，故最常使用<code>targetTouches</code></li></ul><h3 id="案例-移动端拖动元素">案例-移动端拖动元素</h3><ul><li><code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>可实现拖动元素。</li><li>当前手指的坐标值：<code>e.targetTouches[0].pageX</code>和<code>e.targetTouches[0].pageY</code>。</li><li>移动端拖动的原理：手指移动中，计算手指移动的距离，盒子的坐标 = 盒子原来的位置 + 手指移动的距离。</li><li>手指移动的距离 = 手指滑动中的位置 - 手指刚开始触摸的位置。</li><li>注意：手指移动也会触发屏幕滚动屏幕，故要阻止默认的屏幕滚动：<code>e.preventDefault()</code>。</li></ul><h4 id="拖动元素步骤">拖动元素步骤</h4><ol><li>触摸元素<code>touchstart</code>：获取手指初始坐标和盒子原来的位置</li><li>移动手指<code>touchmove</code>：计算手指的滑动距离，并且移动盒子</li><li>离开手指<code>touchend</code>：无</li></ol><h4 id="代码">代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>移动端拖动元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> startX = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> startY = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> divX = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> divY = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        div.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取手指触摸元素时手指的坐标</span></span></span><br><span class="line">            startX = e.targetTouches[0].pageX;</span><br><span class="line">            startY = e.targetTouches[0].pageY;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取盒子原来的位置</span></span></span><br><span class="line"><span class="actionscript">            divX = <span class="keyword">this</span>.offsetLeft;</span></span><br><span class="line"><span class="actionscript">            divY = <span class="keyword">this</span>.offsetTop;</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        div.addEventListener(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取手指在元素上移动时手指的坐标并计算手指移动的距离</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> moveX = e.targetTouches[<span class="number">0</span>].pageX - startX;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> moveY = e.targetTouches[<span class="number">0</span>].pageY - startY;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 移动盒子的位置</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.left = divX + moveX + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.style.top = divY + moveY + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 阻止默认的屏幕滚动</span></span></span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="移动端常见特效">移动端常见特效</h2><h3 id="移动端轮播图-仿携程网">移动端轮播图(仿携程网)</h3><h4 id="功能需求">功能需求</h4><p>移动端轮播图功能基本和PC端一致</p><ul><li>可以自动播放图片</li><li>手指可以拖动播放轮播图</li></ul><h4 id="特殊需求">特殊需求</h4><ul><li>为了防止用户在页面初始时往右拖动轮播图会有空白，应动态复制最后一张轮播图至最前</li><li>由于在移动端不需要考虑兼容性问题，滚动图片可使用CSS3中的<code>translate</code>转换和<code>transition</code>过渡实现动画效果</li></ul><h4 id="无缝滚动">无缝滚动</h4><ul><li>无缝滚动的原理基本和PC端一致</li><li>特殊的是，在移动端使用<code>transition</code>过渡，故判断条件是要等到图片滚动完毕再去判断，即过渡完成后判断</li><li>此时需要添加监听过渡完成事件<code>transitionend</code></li></ul><h4 id="classList属性">classList属性</h4><ul><li>classList属性是HTML5新增的一个属性，返回元素的类名列表(伪数组)，但是ie10以上版本支持。</li><li><code>Element.classList</code> 是一个只读属性，返回一个元素的类属性的实时DOMTokenList集合。</li><li>该属性用于在元素中添加，移除以及切换CSS类</li></ul><table><thead><tr><th>classList属性常用方法</th><th>说明</th></tr></thead><tbody><tr><td><code>element.classList.add('类名')</code></td><td>添加类名，不会覆盖原类名</td></tr><tr><td><code>element.classList.remove('类名')</code></td><td>移除指定的类名</td></tr><tr><td><code>element.classList.toggle('类名')</code></td><td>切换类名，若元素无指定类名，则添加该类名；若元素有指定类名，则移除该类名。</td></tr></tbody></table><h4 id="结构-HTML">结构(HTML)</h4><p>在原先的移动端仿携程网的搜索模块后添加轮播图模块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 轮播图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"focus"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"focus-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"upload/focus1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"upload/focus2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"upload/focus3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"focus-nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS">样式(CSS)</h4><p>添加轮播图的CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 轮播图模块 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus-content</span> &#123;</span><br><span class="line">    <span class="comment">/* 清除浮动 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus-nav</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus-nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">6</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus-nav</span> <span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行为-JS">行为(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> focus = <span class="built_in">document</span>.querySelector(<span class="string">'.focus'</span>);</span><br><span class="line">    <span class="keyword">var</span> focusContent = <span class="built_in">document</span>.querySelector(<span class="string">'.focus-content'</span>);</span><br><span class="line">    <span class="keyword">var</span> focusNav = <span class="built_in">document</span>.querySelector(<span class="string">'.focus-nav'</span>);</span><br><span class="line">    <span class="comment">// 轮播图的宽度</span></span><br><span class="line">    <span class="keyword">var</span> focusWidth = focus.offsetWidth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; focusContent.children.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 动态创建并添加小圆点</span></span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">        focusNav.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给第一个小圆点添加current样式</span></span><br><span class="line">    focusNav.children[<span class="number">0</span>].className = <span class="string">'current'</span>;</span><br><span class="line">    <span class="comment">// 为了防止用户在页面初始时往右拖动轮播图会有空白，应动态复制最后一张轮播图至最前</span></span><br><span class="line">    <span class="keyword">var</span> lastImg = focusContent.children[focusContent.children.length - <span class="number">1</span>].cloneNode(<span class="literal">true</span>);</span><br><span class="line">    focusContent.insertBefore(lastImg, focusContent.children[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 动态复制原第一张轮播图(现在第二张)至最后</span></span><br><span class="line">    <span class="keyword">var</span> firstImg = focusContent.children[<span class="number">1</span>].cloneNode(<span class="literal">true</span>);</span><br><span class="line">    focusContent.appendChild(firstImg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 利用定时器自动轮播图片</span></span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">        focusContent.style.transition = <span class="string">'all .5s'</span>;</span><br><span class="line">        focusContent.style.transform = <span class="string">'translateX('</span> + -num * focusWidth + <span class="string">'px)'</span>;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    focusContent.addEventListener(<span class="string">'transitionend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无缝衔接</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &gt;= focusNav.children.length) &#123;<span class="comment">// 最后一张的下一张</span></span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            focusContent.style.transition = <span class="string">'none'</span>;</span><br><span class="line">            focusContent.style.transform = <span class="string">'translateX('</span> + -num * focusWidth + <span class="string">'px)'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123; <span class="comment">// 第一张的前一张</span></span><br><span class="line">            num = focusNav.children.length - <span class="number">1</span>;</span><br><span class="line">            focusContent.style.transition = <span class="string">'none'</span>;</span><br><span class="line">            focusContent.style.transform = <span class="string">'translateX('</span> + -num * focusWidth + <span class="string">'px)'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将小圆点列表中带有current类名的去掉current类名</span></span><br><span class="line">        focusNav.querySelector(<span class="string">'.current'</span>).classList.remove(<span class="string">'current'</span>);</span><br><span class="line">        <span class="comment">// 让当前索引号和小圆点添加current类名</span></span><br><span class="line">        focusNav.children[num].classList.add(<span class="string">'current'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手指滑动轮播图特效</span></span><br><span class="line">    <span class="comment">// 手指放在轮播图上时</span></span><br><span class="line">    <span class="keyword">var</span> startX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> moveX = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;<span class="comment">// 只有用户手指移动过flag才为true</span></span><br><span class="line">    focus.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 手指触摸停止计时器</span></span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        <span class="comment">// 获取手指的横坐标</span></span><br><span class="line">        startX = e.targetTouches[<span class="number">0</span>].pageX;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手指拖动时</span></span><br><span class="line">    focus.addEventListener(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取手指移动的距离</span></span><br><span class="line">        moveX = e.targetTouches[<span class="number">0</span>].pageX - startX;</span><br><span class="line">        <span class="built_in">console</span>.log(moveX);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手指拖动时不需要过渡效果</span></span><br><span class="line">        focusContent.style.transition = <span class="string">'none'</span>;</span><br><span class="line">        <span class="comment">// 移动盒子：盒子原来的位置 + 手指移动的距离</span></span><br><span class="line">        focusContent.style.transform = <span class="string">'translateX('</span> + (-num * focusWidth + moveX) + <span class="string">'px)'</span>;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 组织滚动屏幕的行为</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    focus.addEventListener(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果手指拖动距离大于50像素就播放上一张或者下一张</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(moveX) &gt; <span class="number">50</span>) &#123;</span><br><span class="line">                <span class="comment">// moveX为正播放表示右滑</span></span><br><span class="line">                <span class="keyword">if</span> (moveX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    num--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            focusContent.style.transition = <span class="string">'all .5s'</span>;</span><br><span class="line">            focusContent.style.transform = <span class="string">'translateX('</span> + -num * focusWidth + <span class="string">'px)'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开启定时器之前先清除定时器</span></span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            num++;</span><br><span class="line">            focusContent.style.transition = <span class="string">'all .5s'</span>;</span><br><span class="line">            focusContent.style.transform = <span class="string">'translateX('</span> + -num * focusWidth + <span class="string">'px)'</span>;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="效果">效果</h4><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/trip-focus.gif" alt="trip-focus" style="zoom:80%;" /><h3 id="移动端返回顶部">移动端返回顶部</h3><p>移动端返回顶部特效同移动端一致，且不需要考虑兼容性问题，可放心使用<code>window.pageYOffset</code>，在原有移动端仿携程网上添加代码如下：</p><h4 id="结构-HTML-v2">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 返回顶部按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"return-top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/back.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS-v2">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 返回顶部按钮 */</span></span><br><span class="line"><span class="selector-class">.return-top</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.return-top</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行为-JS-v2">行为(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">'.nav'</span>);</span><br><span class="line"><span class="keyword">var</span> returnTop = <span class="built_in">document</span>.querySelector(<span class="string">'.return-top'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当页面滚动距离大于导航栏offsetTop时显示返回顶部按钮,否则隐藏</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= nav.offsetTop) &#123;</span><br><span class="line">        returnTop.style.display = <span class="string">'block'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        returnTop.style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击返回顶部按钮返回顶部 </span></span><br><span class="line">returnTop.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    animate(<span class="built_in">window</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 页面滚动动画函数封装，obj-目标对象，target-目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target, callback</span>) </span>&#123;</span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> step = (target - <span class="built_in">window</span>.pageYOffset) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset == target) &#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.scroll(<span class="number">0</span>, <span class="built_in">window</span>.pageYOffset + step);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果-v2">效果</h4><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/trip-return-top.gif" alt="trip-return-top" style="zoom:80%;" /><h3 id="移动端click延时解决方案">移动端click延时解决方案</h3><p>移动端click事件会有300ms的延时，原因是移动端屏幕双击会缩放(doube tap to zoom)页面，解决方案如下：</p><h4 id="禁用缩放">禁用缩放</h4><p>在视口标签中禁用浏览器默认的双击缩放行为并且去掉300ms的点击延迟</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="封装touch事件">封装touch事件</h4><ul><li>利用touch事件自己封装这个事件解决300ms延迟</li><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕，用离开的时间减去触摸的时间</li><li>如果时间小于<strong>150ms</strong>，并且没有滑动过屏幕，就定义为单次点击</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装tap, 解决移动端click 300ms延迟</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tap</span> (<span class="params">obj,callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> isMove = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> startTime = <span class="number">0</span>; <span class="comment">// 记录触摸时候的时间变量</span></span><br><span class="line">    obj.addEventListener(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        startTime = <span class="built_in">Date</span>.now(); <span class="comment">// 记录触摸时间</span></span><br><span class="line">    &#125;);</span><br><span class="line">    obj.addEventListener(<span class="string">'touchmove'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        isMove = <span class="literal">true</span>; <span class="comment">// 检查是否有滑动，有滑动算拖拽，不算点击</span></span><br><span class="line">    &#125;);</span><br><span class="line">    obj.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果手指触摸和离开时间小于150ms算点击</span></span><br><span class="line">        <span class="keyword">if</span>(isMove &amp;&amp; (<span class="built_in">Date</span>.now() - startTime &lt; <span class="number">150</span>)) &#123; </span><br><span class="line">            callback &amp;&amp; callback();<span class="comment">// 执行回调函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 重置</span></span><br><span class="line">        isMove  = <span class="literal">false</span>;</span><br><span class="line">        startTime = <span class="number">0</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">tap(element,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用fastclick插件">使用fastclick插件</h4><p>具体使用查看fastclick的GitHub地址：<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">https://github.com/ftlabs/fastclick</a></p><h2 id="移动端常用开发插件">移动端常用开发插件</h2><h3 id="JS插件">JS插件</h3><ul><li>JS插件是JS文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</li><li>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</li><li>使用：(1)引入插件相关文件；(2)按照规定语法使用。</li></ul><h3 id="fastclick插件">fastclick插件</h3><ul><li>fastclick插件用于解决移动端click事件会有300ms的延时问题</li><li>GitHub地址：<a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">https://github.com/ftlabs/fastclick</a></li></ul><h3 id="Swiper插件">Swiper插件</h3><h4 id="官网地址">官网地址</h4><p>中文官网地址：<a href="http://www.swiper.com.cn/" target="_blank" rel="noopener">http://www.swiper.com.cn/</a></p><h4 id="使用">使用</h4><blockquote><p>详见<a href="https://www.swiper.com.cn/usage/index.html" target="_blank" rel="noopener">Swiper5 使用方法</a></p></blockquote><ol><li>首先加载插件，需要用到的文件有swiper.min.js和swiper.min.css文件。可下载<a href="https://www.swiper.com.cn/download/index.html#file1" target="_blank" rel="noopener">Swiper文件</a>或使用<a href="https://www.swiper.com.cn/cdn/index.html" target="_blank" rel="noopener">CDN</a>。</li><li>添加HTML内容(需使用指定结构和类名)</li><li>可自定义CSS覆盖原先样式</li><li>初始化Swiper，可在<a href="https://www.swiper.com.cn/api/index.html" target="_blank" rel="noopener">SwiperAPI文档</a>自定义参数</li><li>如果不能写在HTML内容的后面，则需要在页面加载完成后再初始化。</li></ol><h3 id="zyMedia插件">zyMedia插件</h3><ul><li><p>zyMedia是掌阅科技开源的一款基于HTML5的、轻量级的、实现移动端全平台统一UI的多媒体播放器，该播放器已经在千万级设备上适配使用。</p></li><li><p>GitHub地址 ：<a href="https://github.com/ireaderlab/zyMedia" target="_blank" rel="noopener">https://github.com/ireaderlab/zyMedia</a></p></li></ul><h3 id="其他移动端常见插件">其他移动端常见插件</h3><ul><li><a href="http://www.superslide2.com/" target="_blank" rel="noopener">superslide</a></li><li><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a></li></ul><h2 id="移动端常用开发框架">移动端常用开发框架</h2><h3 id="框架概述">框架概述</h3><ul><li>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</li><li>前端常用的框架有<strong>Bootstrap</strong>、<strong>Vue</strong>、<strong>Angular</strong>、<strong>React</strong>等等。既能开发PC端，也能开发移动端。</li></ul><h3 id="使用Bootstrap轮播图">使用Bootstrap轮播图</h3><blockquote><p>详见 <a href="https://v3.bootcss.com/javascript/#collapse" target="_blank" rel="noopener">https://v3.bootcss.com/javascript/#collapse</a></p></blockquote><ol><li>引入相关JS文件(Bootstrap依赖JQuery)</li><li>复制HTML结构</li><li>修改对应样式</li><li>修改相应JS参数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Bootstrap轮播图的HTML结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Indicators 小圆点导航模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Wrapper for slides 图片滑动模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span> <span class="attr">role</span>=<span class="string">"listbox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Controls 控制箭头(上一张、下一张)模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1k4411w7sV&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript核心 DOM BOM操作&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>14-PC端网页特效</title>
    <link href="https://www.hardape.top/article/9c2ad406.html"/>
    <id>https://www.hardape.top/article/9c2ad406.html</id>
    <published>2020-04-20T08:21:20.000Z</published>
    <updated>2020-06-11T09:21:48.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1k4411w7sV" target="_blank" rel="noopener">JavaScript核心 DOM BOM操作</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="元素偏移量offset系列">元素偏移量offset系列</h2><h3 id="offset概述">offset概述</h3><p>offset，即偏移量，使用offset系列相关属性可以<strong>动态的</strong>得到该元素的位置(偏移)、大小等。</p><ul><li>获得元素距离<strong>带有定位父元素</strong>的位置，无定位父元素以body为准</li><li>获得元素自身的大小(宽高)</li><li>注意：<strong>返回的数值都不带单位</strong></li></ul><h3 id="offset系列常用属性">offset系列常用属性</h3><table><thead><tr><th>offset系列常用属性</th><th>说明</th></tr></thead><tbody><tr><td><code>element.offsetParent</code></td><td>返回作为该元素带有定位的父级元素，如果父级都没有定位则返回body</td></tr><tr><td><code>element.offsetTop</code></td><td>返回元素相对带有定位父元素上方的偏移</td></tr><tr><td><code>elemetn.offsetLeft</code></td><td>返回元素相对带有定位父元素边框的偏移</td></tr><tr><td><code>element.offsetWidth</code></td><td>返回自身包括padding、边框、内容区的宽度</td></tr><tr><td><code>element.offsetHeight</code></td><td>返回自身包括padding、边框、内容区的高度</td></tr></tbody></table><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200419115148338.png" alt="image-20200419115148338"></p><h3 id="offset与style的比较">offset与style的比较</h3><h4 id="offset">offset</h4><ul><li>offset可以得到任意样式表中的样式值</li><li>offset系列获取的数值是没有单位的</li><li>offsetWidth包含padding+border+width</li><li>offsetWidth等属性是只读属性，只能获取不能复制</li><li><strong>所以，想要获取元素大小位置，用offset更合适</strong></li></ul><h4 id="style">style</h4><ul><li>style只能得到行内样式表中的样式值</li><li>style.width获得的是带有单位的字符串</li><li>style.width获得不包含padding和border的值</li><li>style.width是可读写属性，可以获取也可以赋值</li><li><strong>所以，想要给元素更改大小位置，需要用style改变</strong></li></ul><h3 id="案例1-获取鼠标在盒子内的坐标">案例1-获取鼠标在盒子内的坐标</h3><h4 id="结构-HTML">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 获取鼠标在盒子内的坐标案例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>获取鼠标在盒子内的坐标案例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"showPosition"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.showPosition</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.showPosition</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行为-JS">行为(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'.div'</span>);</span><br><span class="line"><span class="keyword">var</span> showPosition = <span class="built_in">document</span>.querySelector(<span class="string">'.showPosition'</span>);</span><br><span class="line"><span class="comment">// 显示坐标的盒子在位置在鼠标上</span></span><br><span class="line">div.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    showPosition.style.left = e.pageX - <span class="number">15</span> + <span class="string">'px'</span>;</span><br><span class="line">    showPosition.style.top = e.pageY - <span class="number">40</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 点击盒子显示盒子内位置，1秒后位置信息隐藏</span></span><br><span class="line"><span class="comment">// 盒子内坐标 = 鼠标页面坐标 - 盒子坐标</span></span><br><span class="line">div.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    showPosition.style.display = <span class="string">'block'</span>;</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX - <span class="keyword">this</span>.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> y = e.pageY - <span class="keyword">this</span>.offsetTop;</span><br><span class="line">    showPosition.innerHTML = <span class="string">'('</span> + x + <span class="string">','</span> + y + <span class="string">')'</span>;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        showPosition.style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="效果">效果</h4><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/box-mouse-position.gif" alt="box-mouse-position"></p><h3 id="案例2-拖动模态框">案例2-拖动模态框</h3><h4 id="结构-HTML-v2">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拖动模态框案例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span>点击，弹出登录框<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"close-btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-title"</span>&gt;</span>登录会员<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-input"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"uname"</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"uname"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-input"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"upwd"</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"upwd"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>登录会员<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 遮罩层 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS-v2">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">512px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">#ccc</span> <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-title</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-title</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: move;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-content</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-input</span> &#123;</span><br><span class="line">    <span class="comment">/* 清除浮动 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-input</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-input</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">#ccc</span> <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-btn</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">#ccc</span> <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.login-btn</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.close-btn</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'关闭'</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">21px</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">21px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行为-JS-v2">行为(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> login = <span class="built_in">document</span>.querySelector(<span class="string">'.login'</span>);</span><br><span class="line"><span class="keyword">var</span> loginWrapper = <span class="built_in">document</span>.querySelector(<span class="string">'.login-wrapper'</span>)</span><br><span class="line"><span class="keyword">var</span> closeBtn = <span class="built_in">document</span>.querySelector(<span class="string">'.close-btn'</span>);</span><br><span class="line"><span class="keyword">var</span> loginMove = <span class="built_in">document</span>.querySelector(<span class="string">'.login-title'</span>);</span><br><span class="line"><span class="keyword">var</span> mask = <span class="built_in">document</span>.querySelector(<span class="string">'.mask'</span>);</span><br><span class="line"><span class="comment">// 点击登录链接,显示遮罩层和登录框</span></span><br><span class="line">login.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    loginWrapper.style.display = <span class="string">'block'</span>;</span><br><span class="line">    mask.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 点击关闭按钮,隐藏遮罩层和登录框</span></span><br><span class="line">closeBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    loginWrapper.style.display = <span class="string">'none'</span>;</span><br><span class="line">    mask.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1.当鼠标按下，获得鼠标在登录框中的坐标</span></span><br><span class="line">loginMove.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX - loginWrapper.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> y = e.pageY - loginWrapper.offsetTop;</span><br><span class="line">    <span class="comment">// 2.当鼠标移动时，鼠标在页面中的坐标减去鼠标在盒子内的坐标就是模态框的坐标</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, move);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        loginWrapper.style.left = e.pageX - x + <span class="string">'px'</span>;</span><br><span class="line">        loginWrapper.style.top = e.pageY - y + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.当鼠标停止时，移除鼠标移动事件</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, move);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="效果-v2">效果</h4><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/login-model-frame.gif" alt="login-model-frame" style="zoom:67%;" /><h3 id="案例3-仿京东商品放大镜效果">案例3-仿京东商品放大镜效果</h3><h4 id="结构-HTML-v3">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"preview"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/jd-switch.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"preview-img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"magnify-mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"magnify"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/jd-switch.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"magnify-img"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS-v3">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.preview</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.magnify</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">545px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">545px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.magnify-img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.magnify-mask</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">304px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">304px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fede4f</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: move;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构-JS">结构(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preview = <span class="built_in">document</span>.querySelector(<span class="string">'.preview'</span>);</span><br><span class="line"><span class="keyword">var</span> mask = <span class="built_in">document</span>.querySelector(<span class="string">'.magnify-mask'</span>);</span><br><span class="line"><span class="keyword">var</span> magnify = <span class="built_in">document</span>.querySelector(<span class="string">'.magnify'</span>)</span><br><span class="line"><span class="keyword">var</span> magnifyImg = magnify.querySelector(<span class="string">'img'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.鼠标经过图片显示遮罩层和大盒子</span></span><br><span class="line">preview.addEventListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    mask.style.display = <span class="string">'block'</span>;</span><br><span class="line">    magnify.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2.鼠标离开图片显示遮罩层和大盒子</span></span><br><span class="line">preview.addEventListener(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    mask.style.display = <span class="string">'none'</span>;</span><br><span class="line">    magnify.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">preview.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.计算出鼠标在盒子中的坐标</span></span><br><span class="line">    <span class="keyword">var</span> x = e.pageX - <span class="keyword">this</span>.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> y = e.pageY - <span class="keyword">this</span>.offsetTop;</span><br><span class="line">    <span class="comment">// 2.计算出遮罩层在盒子中的随鼠标移动(鼠标在遮罩层中心)的坐标</span></span><br><span class="line">    <span class="keyword">var</span> maskX = x - mask.offsetWidth / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> maskY = y - mask.offsetWidth / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 3.限制遮罩层在盒子中的坐标范围</span></span><br><span class="line">    <span class="keyword">var</span> maskMaxX = preview.offsetWidth - mask.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> maskMaxY = preview.offsetHeight - mask.offsetHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maskX &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        maskX = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskX &gt;= maskMaxX) &#123;</span><br><span class="line">        maskX = maskMaxX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maskY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        maskY = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskY &gt;= maskMaxY) &#123;</span><br><span class="line">        maskY = maskMaxY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.设置遮罩层的坐标</span></span><br><span class="line">    mask.style.left = maskX + <span class="string">'px'</span>;</span><br><span class="line">    mask.style.top = maskY + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.计算放大图片移动距离比例</span></span><br><span class="line">    <span class="keyword">var</span> times = magnifyImg.offsetWidth / preview.offsetWidth;</span><br><span class="line"></span><br><span class="line">    magnifyImg.style.left = -maskX * times + <span class="string">'px'</span>;</span><br><span class="line">    magnifyImg.style.top = -maskY * times + <span class="string">'px'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="效果-v3">效果</h4><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jd-magnify.gif" alt="jd-magnify"></p><h2 id="元素可视区client系列">元素可视区client系列</h2><p>client，即客户端，使用client系列的相关属性来获取元素可视区的相关信息。通过client系列的相关属性可以动态地得到该元素的边框大小、元素大小等。</p><h3 id="client系列常用属性">client系列常用属性</h3><table><thead><tr><th>client系列常用属性</th><th>说明</th></tr></thead><tbody><tr><td><code>element.clientTop</code></td><td>返回元素上边框的大小</td></tr><tr><td><code>element.clientLeft</code></td><td>返回元素左边框的大小</td></tr><tr><td><code>element.clientWidth</code></td><td>返回自身包括paddig、内容区的宽度，不含边框，返回数值不带单位</td></tr><tr><td><code>element.clientHeight</code></td><td>返回自身包括paddig、内容区的高度，不含边框，返回数值不带单位</td></tr></tbody></table><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200419115209789.png" alt="image-20200419115209789"></p><h2 id="案例-淘宝flexible-js源码分析">案例-淘宝flexible.js源码分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即执行函数</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">flexible</span>(<span class="params">window, document</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取的html 的根元素</span></span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement</span><br><span class="line">    <span class="comment">// dpr 物理像素比</span></span><br><span class="line">    <span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// adjust body font size  设置我们body 的字体大小</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setBodyFontSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果页面中有body 这个元素 就设置body的字体大小</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">            <span class="built_in">document</span>.body.style.fontSize = (<span class="number">12</span> * dpr) + <span class="string">'px'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果页面中没有body 这个元素，则等着 我们页面主要的DOM元素加载完毕再去设置body的字体大小</span></span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, setBodyFontSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setBodyFontSize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set 1rem = viewWidth / 10  设置我们html 元素的文字大小</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">10</span></span><br><span class="line">        docEl.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setRemUnit()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset rem unit on page resize  当我们页面尺寸大小发生变化的时候，要重新设置下rem 的大小</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setRemUnit)</span><br><span class="line">    <span class="comment">// pageshow 是我们重新加载页面触发的事件</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// e.persisted 返回的是true 表示如果这个页面是从缓存取过来的页面，也需要从新计算一下rem 的大小</span></span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">            setRemUnit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// detect 0.5px supports  有些移动端的浏览器不支持0.5像素的写法</span></span><br><span class="line">    <span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> fakeBody = <span class="built_in">document</span>.createElement(<span class="string">'body'</span>)</span><br><span class="line">        <span class="keyword">var</span> testElement = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">        testElement.style.border = <span class="string">'.5px solid transparent'</span></span><br><span class="line">        fakeBody.appendChild(testElement)</span><br><span class="line">        docEl.appendChild(fakeBody)</span><br><span class="line">        <span class="keyword">if</span> (testElement.offsetHeight === <span class="number">1</span>) &#123;</span><br><span class="line">            docEl.classList.add(<span class="string">'hairlines'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        docEl.removeChild(fakeBody)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>))</span><br></pre></td></tr></table></figure><h3 id="立即执行函数">立即执行函数</h3><p>立即执行函数：不需要调用，立马能够自己执行的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.第一种写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)()</span><br><span class="line"><span class="comment">// 2.第二种写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;())</span><br></pre></td></tr></table></figure><ul><li>多个立即执行函数间需用 <code>;</code>隔开</li><li>主要作用：创建一个独立的作用域。避免的命名冲突问题</li></ul><h3 id="设备的物理像素比">设备的物理像素比</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.devicePixelRatio</span><br></pre></td></tr></table></figure><h3 id="window-onpageshow事件">window.onpageshow事件</h3><p><code>onpageshow</code>事件用于重新加载页面时触发</p><h4 id="pageshow和load的区别">pageshow和load的区别</h4><ul><li>三种情况会刷新页面会触发<code>load</code>事件：<strong>a标签的超链接</strong>、<strong>F5或者刷新按钮(强制刷新)</strong>、<strong>前进后退按钮</strong></li><li>但在火狐中，存在&quot;往返缓存&quot;，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态，实际上是将整个页面都保存在了内存里。所以次数后退按钮不能刷新页面。</li><li>此时可以使用<code>pageshow</code>事件来触发，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面过程中，<code>pageshow</code>会在<code>load</code>事件后触发；根据事件对象中的**<code>presisted</code>**来判断是否是缓存中的页面触发的<code>pageshow</code>事件，注意这个事件给window添加。</li></ul><h2 id="元素滚动scroll系列">元素滚动scroll系列</h2><p>scroll，即滚动，使用scroll系列的相关属性可以动态地得到该元素的大小、滚动距离等</p><h3 id="scroll系列常用属性">scroll系列常用属性</h3><table><thead><tr><th>scroll系列常用属性</th><th>说明</th></tr></thead><tbody><tr><td><code>element.scrollTop</code></td><td>返回被卷去的上侧距离，返回数值不带单位</td></tr><tr><td><code>element.scrollLeft</code></td><td>返回被卷去的左侧距离，返回数值不带单位</td></tr><tr><td><code>element.scrollWidth</code></td><td>返回自身实际的宽度，不含边框，返回数值不带单位</td></tr><tr><td><code>element.scrollHeight</code></td><td>返回自身实际的高度，不含边框，返回数值不带单位</td></tr></tbody></table><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200419094441783.png" alt="image-20200419094441783" style="zoom:67%;" /><h3 id="页面被卷去的头部">页面被卷去的头部</h3><ul><li>如果浏览器的高(或宽)度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，称为<strong>页面被卷去的头部</strong>。滚动条在滚动时会触发**<code>onscroll</code>**事件。</li><li>页面被卷去的头部可以通过**<code>window.pageYOffset</code><strong>获得，如果是被卷去的左侧可通过</strong><code>window.pageXOffset</code>**获得</li><li>注意，元素被卷去的头部是<code>element.scrollTop</code></li></ul><h4 id="页面被卷去的头部兼容性方案">页面被卷去的头部兼容性方案</h4><p>需要注意的是，页面被卷去的头部，有兼容性问题，一次被卷去的头部通常有如下几种写法:</p><ul><li>声明了DTD，使用<code>document.documentElement.scrollTop</code></li><li>未声明DTD，使用<code>document.body.scrollTop</code></li><li>新方法<code>window.pageYOffset</code>和<code>window.pageOffset</code>，IE9开始支持</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        left: <span class="built_in">window</span>.pageXOffset || <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>,</span><br><span class="line">        top: <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：使用时 <code>getScroll().left</code></p><h3 id="案例-仿淘宝固定侧边栏">案例-仿淘宝固定侧边栏</h3><h4 id="结构-HTML-v4">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仿淘宝固定侧边栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"w"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span>banner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内容模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/shopping.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/good-store.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/live.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/life.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/play.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/shihui.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/love.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"fixed-tool"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lshopping-goods current lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>爱逛好货<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"store-live lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>好店直播<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"quality-feature lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>品质特色<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"benefit-hot lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>实惠热卖<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"guess-love lift"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>猜你喜欢<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"return-top"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"feed-back"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>反馈<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"tip-off"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>暴恐举报<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS-v4">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3c3c3c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.w</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1190px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff8600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffc229</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(n+4)</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#31ba98</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">49%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> <span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-class">.right</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#997aff</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">548px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, #ff971b, #ff5000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fixed-tool</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shopping-goods</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.store-live</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.guess-love</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff4400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.quality-feature</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8d7afb</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.return-top</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.benefit-hot</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a8c001</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, #ff971b, #ff5000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.current</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行为-JS-v3">行为(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tool = <span class="built_in">document</span>.querySelector(<span class="string">'.fixed-tool'</span>);</span><br><span class="line"><span class="keyword">var</span> returnTop = <span class="built_in">document</span>.querySelector(<span class="string">'.return-top'</span>);</span><br><span class="line"><span class="comment">// 获取侧边栏的offsetTop</span></span><br><span class="line"><span class="keyword">var</span> toolTop = tool.offsetTop;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= toolTop) &#123;</span><br><span class="line">        tool.style.position = <span class="string">'fixed'</span>;</span><br><span class="line">        tool.style.top = <span class="string">'30px'</span>;</span><br><span class="line">        returnTop.style.display = <span class="string">'block'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tool.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">        tool.style.top = toolTop + <span class="string">'px'</span>;</span><br><span class="line">        returnTop.style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="效果-v4">效果</h4><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/taobao-fixed-tool.gif" alt="taobao-fixed-tool" style="zoom: 67%;" /><h2 id="动画函数封装">动画函数封装</h2><h3 id="动画实现原理">动画实现原理</h3><ul><li>核心原理：通过定时器<code>setInterval()</code>不断移动盒子的位置</li><li>实现步骤：(1) 获得盒子当前位置；(2) 让盒子在当前位置加上1个移动距离；(3)利用定时器不断重复这个操作；(4)加一个结束定时器的条件</li><li>注意：此元素需要添加定位，才能使用<code>element.style.left</code>和<code>element.style.top</code></li></ul><h3 id="动画实现案例">动画实现案例</h3><h4 id="结构-HTML-v5">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简易动画实现案例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"go"</span>&gt;</span>盒子快走<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"move-div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS-v5">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.move-div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行为-JS-v4">行为(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'.move-div'</span>);</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.go'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击盒子盒子移动</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (div.offsetLeft &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">            <span class="comment">// 停止动画，本质是停止定时器</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            div.style.left = div.offsetLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果-v5">效果</h4><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/div-move.gif" style="zoom:67%;" /><h3 id="动画函数简单封装">动画函数简单封装</h3><p>注意函数需要传递两个参数，<strong>动画对象</strong>和<strong>移动到的距离</strong>，以上述动画封装为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单动画函数封装，obj-目标对象，target-目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.offsetLeft &gt;= target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画，本质是停止定时器</span></span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.style.left = obj.offsetLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动画函数给不同元素记录不同计时器">动画函数给不同元素记录不同计时器</h3><ul><li>如果多个元素都使用这个动画函数，每次都要<code>var</code>声明计时器。可以给不同的元素使用不同的定时器(自己专门用自己的定时器)</li><li>核心原理：利用JS是一门动态语言，可以很方便地给当前对象添加属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单动画函数封装，obj-目标对象，target-目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当我们不断点击按钮时元素的盒子会越来越快，因为开启了太多的定时器</span></span><br><span class="line">    <span class="comment">// 解决方案，使元素只有一个定时器执行</span></span><br><span class="line">    <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">// 将定时器定义为目标对象的属性</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.offsetLeft &gt;= target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画，本质是停止定时器</span></span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.style.left = obj.offsetLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓动动画">缓动动画</h3><ul><li>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</li><li>思路：让盒子每次一到的距离慢慢变小，速度就会慢慢落下来</li><li>核心算法：<code>(目标值 - 现在的位置) / 10</code> 作为每次移动的距离步长，10可自定义</li><li>需要把步长值改为整数，否则真实停止距离和目标距离会有误差</li><li>步长取整需要判断正负，否则动画往返时由于步长正负值取整后绝对值不一致，导致位置出现偏差</li><li>动画函数在多个目标值之间移动，判断步长，如果是正值，则往大取整；如果是负值，往小取整。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 简单动画函数封装，obj-目标对象，target-目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当我们不断点击按钮时元素的盒子会越来越快，因为开启了太多的定时器</span></span><br><span class="line">    <span class="comment">// 解决方案，使元素只有一个定时器执行</span></span><br><span class="line">    <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">// 将定时器定义为目标对象的属性</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 定义缓动动画的步长，并取整，判断正负以解决step正负值取整绝对值不一致问题</span></span><br><span class="line">        <span class="keyword">var</span> step = (target - obj.offsetLeft) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">        <span class="keyword">if</span> (obj.offsetLeft == target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画，本质是停止定时器</span></span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.style.left = obj.offsetLeft + step + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击按钮盒子移动</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    animate(div, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/div-move2.gif" alt="div-move2" style="zoom:67%;" /><h3 id="动画函数添加回调函数">动画函数添加回调函数</h3><h4 id="回调函数原理">回调函数原理</h4><ul><li>函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，在执行传进去的这个函数，这个过程就叫做<strong>回调</strong>。</li><li>回调函数书写的位置：<strong>定时器结束的位置</strong></li><li>回调函数可使用 <code>callback &amp;&amp; callback()</code>来代替<code>if(callback){callback()}</code></li></ul><h4 id="回调函数案例">回调函数案例</h4><p>仍使用上面移动盒子的案例加以添加回调函数，使其在移动到目标位置后背景颜色改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单动画函数封装，obj-目标对象，target-目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当我们不断点击按钮时元素的盒子会越来越快，因为开启了太多的定时器</span></span><br><span class="line">    <span class="comment">// 解决方案，使元素只有一个定时器执行</span></span><br><span class="line">    <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">// 将定时器定义为目标对象的属性</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 定义缓动动画的步长，并取整，判断正负以解决step正负值取整绝对值不一致问题</span></span><br><span class="line">        <span class="keyword">var</span> step = (target - obj.offsetLeft) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">        <span class="keyword">if</span> (obj.offsetLeft == target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画，本质是停止定时器</span></span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 回调函数写到定时器结束后</span></span><br><span class="line">            <span class="comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="comment">//     callback();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.style.left = obj.offsetLeft + step + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮盒子移动</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    animate(div, <span class="number">500</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        div.style.backgroundColor = <span class="string">'blue'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/div-move3.gif" alt="div-move3" style="zoom:67%;" /><h3 id="案例-利用动画函数完成滑动栏">案例-利用动画函数完成滑动栏</h3><h4 id="animate-js">animate.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单动画函数封装，obj-目标对象，target-目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 当我们不断点击按钮时元素的盒子会越来越快，因为开启了太多的定时器</span></span><br><span class="line">    <span class="comment">// 解决方案，使元素只有一个定时器执行</span></span><br><span class="line">    <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    <span class="comment">// 将定时器定义为目标对象的属性</span></span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 定义缓动动画的步长，并取整，判断正负以解决step正负值取整绝对值不一致问题</span></span><br><span class="line">        <span class="keyword">var</span> step = (target - obj.offsetLeft) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">        <span class="keyword">if</span> (obj.offsetLeft == target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画，本质是停止定时器</span></span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 回调函数写到定时器结束后</span></span><br><span class="line">            <span class="comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="comment">//     callback();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj.style.left = obj.offsetLeft + step + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="slide-html">slide.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.slider-bar</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            top: 300px;</span><br><span class="line">            right: 0;</span><br><span class="line">            cursor: pointer;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            font-weight: 700;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.slider-bar</span> <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            z-index: -1;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/animate.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slider-bar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>←<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>问题反馈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sliderBar = <span class="built_in">document</span>.querySelector(<span class="string">'.slider-bar'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> content = <span class="built_in">document</span>.querySelector(<span class="string">'.content'</span>);</span></span><br><span class="line"><span class="actionscript">        sliderBar.addEventListener(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            animate(content, <span class="number">-160</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                sliderBar.children[<span class="number">0</span>].innerHTML = <span class="string">'→'</span>;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">        sliderBar.addEventListener(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            animate(content, <span class="number">0</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                sliderBar.children[<span class="number">0</span>].innerHTML = <span class="string">'←'</span>;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="效果-v6">效果</h4><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/flexible-bar.gif" alt="flexible-bar" style="zoom:80%;" /><h2 id="常见网页特效案例">常见网页特效案例</h2><h3 id="网页轮播图-仿淘宝">网页轮播图(仿淘宝)</h3><p>轮播图也称为焦点图，是网页中比较常见的网页特效。</p><h4 id="功能需求">功能需求</h4><ul><li>鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</li><li>点击右侧按钮一次，图片往左播放一张，一次类推，左侧按钮同理。</li><li>图片播放的同时，下面小圆圈模块跟随一起变化。</li><li>点击小圆圈，可以播放响应图片。</li><li>鼠标不经过轮播图，轮播图也会自动播放图片。</li><li>鼠标经过轮播图，自动播放停止。</li></ul><h4 id="无缝滚动">无缝滚动</h4><ul><li>把轮播图中的第一张图片的li复制一份，放到轮播图ul的最后面</li><li>当图片滚动到克隆的最后一张图片时，让ul快速地、不做动画地跳到最左侧：left为0</li></ul><h4 id="节流阀">节流阀</h4><ul><li>节流阀可以防止轮播图按钮连续点击这次播放过快</li><li>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一行函数动画，让事件无法连续触发。</li><li>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数。</li><li>步骤：开始时设置一个变量<code>var flag = true</code>，通过<code>if(flag) {flag = false;do something}</code>来锁住函数，利用回调函数中设置<code>flag = true</code>解锁函数</li></ul><h4 id="结构-focus-html">结构(focus.html)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>仿淘宝轮播图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入font-awesome字体图标库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入css文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/focus.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入移动动画 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/animate.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入js文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/focus.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"focus"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"fa fa-angle-left prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"fa fa-angle-right next"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/focus-0.webp"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/focus-1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/focus-2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/focus-3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/focus-4.webp"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-focus-css">样式(focus.css)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">520px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.focus</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.prev</span>,</span><br><span class="line"><span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f1f3f7</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.prev</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.next</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.prev</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff5000</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行为-focus-js">行为(focus.js)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> focus = <span class="built_in">document</span>.querySelector(<span class="string">'.focus'</span>);</span><br><span class="line">    <span class="keyword">var</span> prev = <span class="built_in">document</span>.querySelector(<span class="string">'.prev'</span>);</span><br><span class="line">    <span class="keyword">var</span> next = <span class="built_in">document</span>.querySelector(<span class="string">'.next'</span>);</span><br><span class="line">    <span class="keyword">var</span> content = <span class="built_in">document</span>.querySelector(<span class="string">'.content'</span>);</span><br><span class="line">    <span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">'.nav'</span>);</span><br><span class="line">    <span class="keyword">var</span> focusWidth = focus.offsetWidth;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// flag 节流阀</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 鼠标经过轮播图时</span></span><br><span class="line">    focus.addEventListener(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 显示上一张、下一张箭头</span></span><br><span class="line">        prev.style.display = <span class="string">'block'</span>;</span><br><span class="line">        next.style.display = <span class="string">'block'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 停止轮播计时器</span></span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        timer = <span class="literal">null</span>; <span class="comment">// 清除定时器变量</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 鼠标移出轮播图时</span></span><br><span class="line">    focus.addEventListener(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 隐藏上一张、下一张箭头</span></span><br><span class="line">        prev.style.display = <span class="string">'none'</span>;</span><br><span class="line">        next.style.display = <span class="string">'none'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加轮播计时器</span></span><br><span class="line">        timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 手动调用右侧按钮点击事件</span></span><br><span class="line">            next.click();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 封装函数，当前小圆圈添加current类，其余去除current类</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">navLisChange</span>(<span class="params">current</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nav.children.length; i++) &#123;</span><br><span class="line">            nav.children[i].className = <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current.className = <span class="string">'current'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; content.children.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 动态创建小圆圈</span></span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">        <span class="comment">// 给小圆圈设置自定义属性index,存储索引号</span></span><br><span class="line">        li.setAttribute(<span class="string">'index'</span>, i);</span><br><span class="line">        <span class="comment">// 动态添加小圆圈</span></span><br><span class="line">        nav.appendChild(li);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击小圆圈</span></span><br><span class="line">        li.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 当前小圆圈添加current类，其余去除current类</span></span><br><span class="line">            navLisChange(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 图片轮播，让图片滚动【小圆圈的索引号乘以图片的宽度】距离,注意是负值</span></span><br><span class="line">            <span class="keyword">var</span> index = <span class="keyword">this</span>.getAttribute(<span class="string">'index'</span>)</span><br><span class="line">            animate(content, -focusWidth * index);</span><br><span class="line">            num = index;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给第一个小圆圈添加current类，表示选中</span></span><br><span class="line">    nav.children[<span class="number">0</span>].className = <span class="string">'current'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 克隆第一张图片至最后一张,使用深度拷贝</span></span><br><span class="line">    <span class="keyword">var</span> firstContentLi = content.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span><br><span class="line">    content.appendChild(firstContentLi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标点击下一张箭头时切换图片</span></span><br><span class="line">    next.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 无缝滚动</span></span><br><span class="line">            <span class="keyword">if</span> (num == content.children.length - <span class="number">1</span>) &#123;</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">                content.style.left = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">            animate(content, -focusWidth * num, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            navLisChange(nav.children[num == nav.children.length ? <span class="number">0</span> : num]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 鼠标点击上一张箭头时切换图片</span></span><br><span class="line">    prev.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 无缝滚动</span></span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                num = content.children.length - <span class="number">1</span>;</span><br><span class="line">                content.style.left = -num * focusWidth + <span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num--;</span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line"></span><br><span class="line">            animate(content, -focusWidth * num, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            navLisChange(nav.children[num]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器自动轮播</span></span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 手动调用右侧按钮点击事件</span></span><br><span class="line">        next.click();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="效果-v7">效果</h4><img src= /img/loading.gif data-src="https://cdn.jsdelivr.net/gh/hardcodeape/blogImg/img/taobao-focus.gif" style="zoom:80%;" /><h3 id="侧边栏返回顶部-仿淘宝">侧边栏返回顶部(仿淘宝)</h3><h4 id="滚动窗口至文档中的特定位置">滚动窗口至文档中的特定位置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.scroll(x,y)</span><br></pre></td></tr></table></figure><ul><li>x和y参数不加单位，直接写数字即可</li></ul><h4 id="代码">代码</h4><p>HTML和CSS前面已给出，在JS中添加下列代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击侧边栏顶部按钮返回顶部 </span></span><br><span class="line">returnTop.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    animate(<span class="built_in">window</span>, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 页面滚动动画函数封装，obj-目标对象，target-目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target, callback</span>) </span>&#123;</span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> step = (target - <span class="built_in">window</span>.pageYOffset) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset == target) &#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.scroll(<span class="number">0</span>, <span class="built_in">window</span>.pageYOffset + step);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">15</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果-v8">效果</h4><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/taobao-return-top.gif" alt="taobao-return-top" style="zoom:67%;" />]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1k4411w7sV&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript核心 DOM BOM操作&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>13-BOM</title>
    <link href="https://www.hardape.top/article/c6aff757.html"/>
    <id>https://www.hardape.top/article/c6aff757.html</id>
    <published>2020-04-20T08:19:20.000Z</published>
    <updated>2020-06-11T09:21:48.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><em>『 注 : 本笔记摘自视频 <a href="https://www.bilibili.com/video/BV1k4411w7sV" target="_blank" rel="noopener">JavaScript核心 DOM BOM操作</a>，如有侵权,请联系删除。』</em></p></blockquote><a id="more"></a><h2 id="BOM概述">BOM概述</h2><ul><li>BOM( Browser Object Model )即<strong>浏览器对象模型</strong>，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是<strong>window</strong>。</li><li>BOM由一系列相关的对象构成，并且每个对象都提供了很多方法和属性</li><li>BOM缺乏标准，JavaScript语法的标准化组织是ECMA，DOM的标准化组织是W3C，BOM最初是Netscape(网景)浏览器标准的一部分。</li></ul><h3 id="DOM和BOM的比较">DOM和BOM的比较</h3><h4 id="DOM">DOM</h4><ul><li>文档对象模型</li><li>把【文档】当做一个【对象】来看待</li><li>DOM的顶级对象是<strong>document</strong></li><li>DOM学习的是操作页面元素</li><li>DOM是W3C的标准规范</li></ul><h4 id="BOM">BOM</h4><ul><li>浏览器对象模型</li><li>把【浏览器】当做一个【对象】来看待</li><li>BOM的顶级对象是<strong>window</strong></li><li>BOM学习的是浏览器窗口交互的一些对象</li><li>BOM是浏览器厂商在各自浏览器上定义的，兼容性较差</li></ul><h3 id="BOM的构成">BOM的构成</h3><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200418140320024.png" alt="image-20200418140320024"></p><ul><li>BOM比DOM更大，它包含DOM。</li><li><strong>window对象是浏览器的顶级对象</strong>，它具有双重结构。</li><li>window对象是JS访问浏览器窗口的一个<strong>接口</strong>。</li><li>window对象是一个<strong>全局对象</strong>。定义在全局作用域中的变量、函数都会变成window对象的属性和方法。</li><li>在使用window属性和方法时可以省略window，前面学习的对话框都属于window对象方法，如<code>alert()</code>，<code>prompt()</code>等。</li><li>注意：window下的一个特殊属性<code>window.name</code>，故在JS中标识符名不建议使用name</li></ul><h2 id="window对象的常见事件">window对象的常见事件</h2><h3 id="窗口加载事件">窗口加载事件</h3><p><code>window.onload</code>是窗口(页面)加载事件，当文档内容完全加载完成会触发该事件(包括图像、脚本文件、CSS文件等)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统注册方式</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 方法监听注册方式</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>有了<code>window.onload</code>就可以直接把JS代码写到页面元素的上方，因为<code>onload</code>是等页面内容全部加载完毕，再去执行处理函数</li><li><code>window.onload</code>传统注册事件方式只能写一次，如果有多个，会以最后一个<code>window.onload</code>为准。</li><li>如果使用<code>addEventListener</code>则没有限制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM加载事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>DOMContentLoaded</code>事件触发时，仅当DOM加载完成，不包括样式表、图片、flash等等，ie9以上才支持</li><li>如果页面的图片较多，从用户访问到onload触发可能需要较长的时间，必然影响用户的体验，此时用<code>DOMContentLoaded</code>事件比较合适</li></ul><h3 id="调整窗口大小事件">调整窗口大小事件</h3><p><code>window.onresize</code>是调整窗口大小加载事件，窗口大小发生变化时就调用的处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统注册方式</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 方法监听注册方式</span></span><br><span class="line"><span class="built_in">window</span>.addEventListeer(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>只要浏览器窗口大小发生像素变化，就会触发该事件</li><li>我们经常利用这个事件完成响应式布局。</li><li><code>innerWidth / innerHeight</code> 返回窗口的文档显示区的宽/高度。</li></ul><h2 id="定时器">定时器</h2><p>window对象提供了2个<strong>定时器</strong>：<code>setTimeout</code>和<code>setInterval</code></p><h3 id="setTimeout">setTimeout</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.setTimeout(调用函数[, 延迟的毫秒数]);</span><br></pre></td></tr></table></figure><ul><li><code>setTimeout</code>方法用于设置一个定时器，该定时器在定时器到期后执行调用函数</li><li>延迟的毫秒数省略默认为0</li><li>页面中可能有很多的定时器，我们经常给定时器加标识符，即<code>var time1 = setTimeout(fn, 3000)</code></li><li>这个调用函数可以<strong>直接写匿名函数</strong>，或者<strong>写函数名</strong>，或者采取字符串**‘函数名()’**三种形式，第三种字符串形式不推荐。</li></ul><h4 id="回调函数">回调函数</h4><ul><li><code>setTimeout()</code>中的调用函数我们也称为<strong>回调函数(callback)</strong></li><li>普通函数是按照代码顺序直接调用，而需要等待另一个事件完成再调用该函数的函数就称为<strong>回调函数</strong></li></ul><h4 id="停止setTimeout定时器">停止setTimeout定时器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.clearTimeout(timeoutID)</span><br></pre></td></tr></table></figure><ul><li><code>clearTimeout</code>方法取消了先前通过调用<code>setTimeout</code>建立的定时器</li><li>参数<code>timeoutID</code>是需要停止的<code>setTimeout</code>定时器的标识符(名称)</li></ul><h3 id="setInterval">setInterval</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.setInterval(调用函数[, 间隔的毫秒数]);</span><br></pre></td></tr></table></figure><ul><li><code>setInterval</code>方法重复调用一个函数，每隔这个时间，就调用一次回调函数</li><li>间隔的毫秒数省略默认为0</li><li>页面中可能有很多的定时器，我们经常给定时器加标识符，即<code>var time2 = setInterval(fn, 3000)</code></li><li>这个调用函数可以<strong>直接写匿名函数</strong>，或者<strong>写函数名</strong>，或者采取字符串**‘函数名()’**三种形式，第三种字符串形式不推荐。</li></ul><h4 id="停止setInterval定时器">停止setInterval定时器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.clearInterval(intervalID)</span><br></pre></td></tr></table></figure><ul><li><code>clearInterval</code>方法取消了先前通过调用<code>setInterval</code>建立的定时器</li><li>参数<code>intervalID</code>是需要停止的<code>setInterval</code>定时器的标识符(名称)</li></ul><h3 id="案例1-仿京东秒杀计时器">案例1-仿京东秒杀计时器</h3><h4 id="结构-HTML">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仿京东秒杀倒计时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>仿京东秒杀倒计时<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jd-seckill"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>京东秒杀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>本场距离结束还有<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"time_h"</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>:<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"time_m"</span>&gt;</span>48<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>:<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"time_s"</span>&gt;</span>18<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="样式-CSS">样式(CSS)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.jd-seckill</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="comment">/* 清除外边距合并 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">190px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(images/jd-seckill.png) no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jd-seckill</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">31px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jd-seckill</span> <span class="selector-class">.info</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jd-seckill</span> <span class="selector-class">.time</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jd-seckill</span> <span class="selector-class">.time</span> <span class="selector-tag">span</span><span class="selector-attr">[class^=<span class="string">'time'</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.jd-seckill</span> <span class="selector-class">.time</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">900</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="行为-JS">行为(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 倒计时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">// 当前时间戳</span></span><br><span class="line">    <span class="keyword">var</span> toTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time);<span class="comment">// 倒计时结束时间戳</span></span><br><span class="line">    <span class="keyword">var</span> times = (toTime - nowTime) / <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);<span class="comment">// 时</span></span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">'0'</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>);<span class="comment">// 分</span></span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>);<span class="comment">// 秒</span></span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">'0'</span> + s : s;</span><br><span class="line">    <span class="keyword">return</span> [h, m, s];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seckill</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hour = <span class="built_in">document</span>.querySelector(<span class="string">'.time_h'</span>);</span><br><span class="line">    <span class="keyword">var</span> minute = <span class="built_in">document</span>.querySelector(<span class="string">'.time_m'</span>);</span><br><span class="line">    <span class="keyword">var</span> second = <span class="built_in">document</span>.querySelector(<span class="string">'.time_s'</span>);</span><br><span class="line">    <span class="keyword">var</span> time = countDown(<span class="string">'2020-4-18 17:00:00'</span>);</span><br><span class="line">    hour.innerHTML = time[<span class="number">0</span>];</span><br><span class="line">    minute.innerHTML = time[<span class="number">1</span>];</span><br><span class="line">    second.innerHTML = time[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">seckill();  <span class="comment">//先调用一次秒杀函数，防止第一次刷新页面空白</span></span><br><span class="line">setInterval(seckill, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4 id="效果">效果</h4><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/jd-seckill.gif" alt="jd-seckill"></p><h3 id="案例2-发送验证码短信案例">案例2-发送验证码短信案例</h3><h4 id="结构-HTML-v2">结构(HTML)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 发送验证码短信案例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>发送验证码短信案例<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"send"</span>&gt;</span>发送验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="行为-JS-v2">行为(JS)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btnSend = <span class="built_in">document</span>.querySelector(<span class="string">'.send'</span>);</span><br><span class="line">btnSend.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = <span class="number">5</span>;<span class="comment">//定义剩下的秒数</span></span><br><span class="line">    <span class="keyword">this</span>.disabled = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span><br><span class="line">            clearInterval(timer);</span><br><span class="line">            btnSend.innerHTML = <span class="string">'发送验证码'</span>;</span><br><span class="line">            btnSend.disabled = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            btnSend.innerHTML = <span class="string">'还剩'</span> + time + <span class="string">'秒再次点击'</span>;</span><br><span class="line">            time--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="效果-v2">效果</h4><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/send-identify-code.gif" alt="send-identify-code"></p><h2 id="this指向问题">this指向问题</h2><p><code>this</code>的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定<code>this</code>到底指向谁一般情况下<code>this</code>的最终指向的是那个调用它的对象。</p><ul><li>全局作用域或者普通函数中<code>this</code>指向全局对象<code>window</code>，注意定时器中的<code>this</code>指向<code>window</code></li><li>方法调用中谁调用<code>this</code>指向谁</li><li>构造函数中<code>this</code>指向构造函数的实例</li></ul><h2 id="JS执行机制">JS执行机制</h2><h3 id="JS是单线程">JS是单线程</h3><ul><li>JavaScript语言的一大特点就是单线程，也就是说，同一时间只能做一件事。这个由于JS这门脚本语言诞生的使命所致——JS是为处理页面中用户的交互，以及操作DOM而诞生的。比如我们对某个DOM元素进行添加和删除操作，不能同时进行。应该先进行添加，之后再删除。</li><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是：如果JS执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</li></ul><h3 id="同步和异步">同步和异步</h3><p>为了解决单线程渲染加载阻塞的问题，利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程。于是，JS中出现了<strong>同步</strong>和<strong>异步</strong>。</p><h4 id="同步">同步</h4><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。</p><h4 id="异步">异步</h4><p>程序的执行顺序与任务的排列顺序是不一致的、异步的。</p><h4 id="同步任务">同步任务</h4><p>在JS中，同步任务都在主线程上执行，形成一个<strong>执行栈</strong></p><h4 id="异步任务">异步任务</h4><p>JS的异步任务是通过<strong>回调函数</strong>实现的。一般而言，异步任务有以下三种类型：</p><ul><li>普通事件，如<code>click</code>、<code>resize</code>等</li><li>资源加载，如<code>load</code>、<code>error</code>等</li><li>定时器，如<code>setInterval</code>、<code>setTimeout</code>等</li></ul><p>异步任务相关回调函数添加到<strong>任务队列</strong>中(任务队列也称为消息队列)</p><h3 id="JS执行机制-v2">JS执行机制</h3><ol><li>先执行<strong>执行栈中的同步任务</strong></li><li>异步任务(回调函数)放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li></ol><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/image-20200418164655126.png" alt="image-20200418164655126"></p><p>由于主线程不断地重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为<strong>事件循环( event loop )</strong></p><h2 id="location对象">location对象</h2><p>window对象给我们提供了一个<strong>location属性</strong>用于<strong>获取或设置窗体的URL</strong>，并且可以用于<strong>解析URL</strong>。因为这个属性返回的是一个对象，所以我们将这个属性称为<strong>location对象</strong></p><h3 id="URL">URL</h3><p>**统一资源定位符( Uniform Resource Loactor, URL )**是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><p>URL的一般语法格式为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol://host[:port]/path/[?query]#fragment</span><br></pre></td></tr></table></figure><table><thead><tr><th>URL组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议，常用的http,ftp,maito等</td></tr><tr><td>host</td><td>主机(域名)，<a href="http://xn--www-eo8e.baidu.com" target="_blank" rel="noopener">如www.baidu.com</a></td></tr><tr><td>port</td><td>端口号，可选，省略时使用协议的默认端口，如http的默认端口为80</td></tr><tr><td>path</td><td>路径，由零或多个’/'符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</td></tr><tr><td>query</td><td>参数，以键值对的形式，通过<code>&amp;</code>符号分隔开来</td></tr><tr><td>fragment</td><td>片段，#后面内容，常见于链接锚点</td></tr></tbody></table><h3 id="loaction对象常见属性">loaction对象常见属性</h3><table><thead><tr><th>loaction对象常见属性</th><th>说明</th></tr></thead><tbody><tr><td><code>location.href</code></td><td>获取或者设置整个URL</td></tr><tr><td><code>location.host</code></td><td>返回主机(域名)</td></tr><tr><td><code>location.port</code></td><td>返回端口号，如果未写返回空字符串</td></tr><tr><td><code>location.pathname</code></td><td>返回路径</td></tr><tr><td><code>location.search</code></td><td>返回参数，包含?</td></tr><tr><td><code>location.hash</code></td><td>返回片段，包含#</td></tr></tbody></table><h4 id="案例-登录获取URL参数数据">案例-登录获取URL参数数据</h4><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"index.html"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.user</span> &#123;</span></span><br><span class="line">            font-weight: 700;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> userDiv = <span class="built_in">document</span>.querySelector(<span class="string">'.user'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> search = location.search;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> uname = search.substr(<span class="number">1</span>).split(<span class="string">'='</span>)[<span class="number">1</span>];</span></span><br><span class="line">            userDiv.innerHTML = uname;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,欢迎您！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src= /img/loading.gif data-src="https://gitee.com/code-ape/blogImage/raw/master/img/location-search-login.gif" alt="location-search-login"></p><h3 id="location对象常用方法">location对象常用方法</h3><table><thead><tr><th>location对象常用方法</th><th>说明</th></tr></thead><tbody><tr><td><code>location.assign(URL)</code></td><td>跳转页面，也称为重定向页面，因为记录历史，所以能后退页面</td></tr><tr><td><code>location.replace(URL)</code></td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td><code>location.reload()</code></td><td>重新加载页面，相当于刷新按钮或者F5；如果参数为<code>true</code>，强制刷新，相当于Ctrl+F5(不使用缓存)</td></tr></tbody></table><h2 id="navigator对象">navigator对象</h2><p><strong>navigatior对象</strong>包含有关浏览器的信息，它有很多属性，最常用的属性是**<code>userAgent</code>**，该属性可以返回由客户机发送服务器的<code>user-agent</code>头部的值。</p><p>下面前端代码可以判断用户在哪个终端打开页面，实现跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">''</span>; <span class="comment">// 移动端</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">''</span>  <span class="comment">// PC端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="history对象">history对象</h2><p>window对象提供了一个<strong>history对象</strong>，与浏览器历史记录进行交互。该对象包含用户(在浏览器窗口中)访问过的URL。</p><h4 id="history对象常用方法">history对象常用方法</h4><table><thead><tr><th>history对象常用方法</th><th>说明</th></tr></thead><tbody><tr><td><code>history.back()</code></td><td>后退功能</td></tr><tr><td><code>history.forward()</code></td><td>前进功能</td></tr><tr><td><code>history.go(steps)</code></td><td>前进/后退功能，steps参数为1即前进一个页面，参数为-1级后退一个页面</td></tr></tbody></table><p>history对象一般在实际开发中比较少用，但是会在一些OA办公系统中见到</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;『 注 : 本笔记摘自视频 &lt;a href=&quot;https://www.bilibili.com/video/BV1k4411w7sV&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript核心 DOM BOM操作&lt;/a&gt;，如有侵权,请联系删除。』&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://www.hardape.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.hardape.top/tags/JavaScript/"/>
    
      <category term="BOM" scheme="https://www.hardape.top/tags/BOM/"/>
    
  </entry>
  
</feed>
